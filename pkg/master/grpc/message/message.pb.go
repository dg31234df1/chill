// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/master/grpc/message/message.proto

package message

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ErrorCode int32

const (
	ErrorCode_SUCCESS                 ErrorCode = 0
	ErrorCode_UNEXPECTED_ERROR        ErrorCode = 1
	ErrorCode_CONNECT_FAILED          ErrorCode = 2
	ErrorCode_PERMISSION_DENIED       ErrorCode = 3
	ErrorCode_COLLECTION_NOT_EXISTS   ErrorCode = 4
	ErrorCode_ILLEGAL_ARGUMENT        ErrorCode = 5
	ErrorCode_ILLEGAL_DIMENSION       ErrorCode = 7
	ErrorCode_ILLEGAL_INDEX_TYPE      ErrorCode = 8
	ErrorCode_ILLEGAL_COLLECTION_NAME ErrorCode = 9
	ErrorCode_ILLEGAL_TOPK            ErrorCode = 10
	ErrorCode_ILLEGAL_ROWRECORD       ErrorCode = 11
	ErrorCode_ILLEGAL_VECTOR_ID       ErrorCode = 12
	ErrorCode_ILLEGAL_SEARCH_RESULT   ErrorCode = 13
	ErrorCode_FILE_NOT_FOUND          ErrorCode = 14
	ErrorCode_META_FAILED             ErrorCode = 15
	ErrorCode_CACHE_FAILED            ErrorCode = 16
	ErrorCode_CANNOT_CREATE_FOLDER    ErrorCode = 17
	ErrorCode_CANNOT_CREATE_FILE      ErrorCode = 18
	ErrorCode_CANNOT_DELETE_FOLDER    ErrorCode = 19
	ErrorCode_CANNOT_DELETE_FILE      ErrorCode = 20
	ErrorCode_BUILD_INDEX_ERROR       ErrorCode = 21
	ErrorCode_ILLEGAL_NLIST           ErrorCode = 22
	ErrorCode_ILLEGAL_METRIC_TYPE     ErrorCode = 23
	ErrorCode_OUT_OF_MEMORY           ErrorCode = 24
)

var ErrorCode_name = map[int32]string{
	0:  "SUCCESS",
	1:  "UNEXPECTED_ERROR",
	2:  "CONNECT_FAILED",
	3:  "PERMISSION_DENIED",
	4:  "COLLECTION_NOT_EXISTS",
	5:  "ILLEGAL_ARGUMENT",
	7:  "ILLEGAL_DIMENSION",
	8:  "ILLEGAL_INDEX_TYPE",
	9:  "ILLEGAL_COLLECTION_NAME",
	10: "ILLEGAL_TOPK",
	11: "ILLEGAL_ROWRECORD",
	12: "ILLEGAL_VECTOR_ID",
	13: "ILLEGAL_SEARCH_RESULT",
	14: "FILE_NOT_FOUND",
	15: "META_FAILED",
	16: "CACHE_FAILED",
	17: "CANNOT_CREATE_FOLDER",
	18: "CANNOT_CREATE_FILE",
	19: "CANNOT_DELETE_FOLDER",
	20: "CANNOT_DELETE_FILE",
	21: "BUILD_INDEX_ERROR",
	22: "ILLEGAL_NLIST",
	23: "ILLEGAL_METRIC_TYPE",
	24: "OUT_OF_MEMORY",
}

var ErrorCode_value = map[string]int32{
	"SUCCESS":                 0,
	"UNEXPECTED_ERROR":        1,
	"CONNECT_FAILED":          2,
	"PERMISSION_DENIED":       3,
	"COLLECTION_NOT_EXISTS":   4,
	"ILLEGAL_ARGUMENT":        5,
	"ILLEGAL_DIMENSION":       7,
	"ILLEGAL_INDEX_TYPE":      8,
	"ILLEGAL_COLLECTION_NAME": 9,
	"ILLEGAL_TOPK":            10,
	"ILLEGAL_ROWRECORD":       11,
	"ILLEGAL_VECTOR_ID":       12,
	"ILLEGAL_SEARCH_RESULT":   13,
	"FILE_NOT_FOUND":          14,
	"META_FAILED":             15,
	"CACHE_FAILED":            16,
	"CANNOT_CREATE_FOLDER":    17,
	"CANNOT_CREATE_FILE":      18,
	"CANNOT_DELETE_FOLDER":    19,
	"CANNOT_DELETE_FILE":      20,
	"BUILD_INDEX_ERROR":       21,
	"ILLEGAL_NLIST":           22,
	"ILLEGAL_METRIC_TYPE":     23,
	"OUT_OF_MEMORY":           24,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{0}
}

//*
// @brief Field data type
type DataType int32

const (
	DataType_NONE          DataType = 0
	DataType_BOOL          DataType = 1
	DataType_INT8          DataType = 2
	DataType_INT16         DataType = 3
	DataType_INT32         DataType = 4
	DataType_INT64         DataType = 5
	DataType_FLOAT         DataType = 10
	DataType_DOUBLE        DataType = 11
	DataType_STRING        DataType = 20
	DataType_VECTOR_BINARY DataType = 100
	DataType_VECTOR_FLOAT  DataType = 101
)

var DataType_name = map[int32]string{
	0:   "NONE",
	1:   "BOOL",
	2:   "INT8",
	3:   "INT16",
	4:   "INT32",
	5:   "INT64",
	10:  "FLOAT",
	11:  "DOUBLE",
	20:  "STRING",
	100: "VECTOR_BINARY",
	101: "VECTOR_FLOAT",
}

var DataType_value = map[string]int32{
	"NONE":          0,
	"BOOL":          1,
	"INT8":          2,
	"INT16":         3,
	"INT32":         4,
	"INT64":         5,
	"FLOAT":         10,
	"DOUBLE":        11,
	"STRING":        20,
	"VECTOR_BINARY": 100,
	"VECTOR_FLOAT":  101,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{1}
}

type CompareOperator int32

const (
	CompareOperator_LT  CompareOperator = 0
	CompareOperator_LTE CompareOperator = 1
	CompareOperator_EQ  CompareOperator = 2
	CompareOperator_GT  CompareOperator = 3
	CompareOperator_GTE CompareOperator = 4
	CompareOperator_NE  CompareOperator = 5
)

var CompareOperator_name = map[int32]string{
	0: "LT",
	1: "LTE",
	2: "EQ",
	3: "GT",
	4: "GTE",
	5: "NE",
}

var CompareOperator_value = map[string]int32{
	"LT":  0,
	"LTE": 1,
	"EQ":  2,
	"GT":  3,
	"GTE": 4,
	"NE":  5,
}

func (x CompareOperator) String() string {
	return proto.EnumName(CompareOperator_name, int32(x))
}

func (CompareOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{2}
}

type Occur int32

const (
	Occur_INVALID  Occur = 0
	Occur_MUST     Occur = 1
	Occur_SHOULD   Occur = 2
	Occur_MUST_NOT Occur = 3
)

var Occur_name = map[int32]string{
	0: "INVALID",
	1: "MUST",
	2: "SHOULD",
	3: "MUST_NOT",
}

var Occur_value = map[string]int32{
	"INVALID":  0,
	"MUST":     1,
	"SHOULD":   2,
	"MUST_NOT": 3,
}

func (x Occur) String() string {
	return proto.EnumName(Occur_name, int32(x))
}

func (Occur) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{3}
}

////////////////////pulsar//////////////////////////////////////
type OpType int32

const (
	OpType_INSERT OpType = 0
	OpType_DELETE OpType = 1
)

var OpType_name = map[int32]string{
	0: "INSERT",
	1: "DELETE",
}

var OpType_value = map[string]int32{
	"INSERT": 0,
	"DELETE": 1,
}

func (x OpType) String() string {
	return proto.EnumName(OpType_name, int32(x))
}

func (OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{4}
}

type SyncType int32

const (
	SyncType_READ  SyncType = 0
	SyncType_WRITE SyncType = 1
)

var SyncType_name = map[int32]string{
	0: "READ",
	1: "WRITE",
}

var SyncType_value = map[string]int32{
	"READ":  0,
	"WRITE": 1,
}

func (x SyncType) String() string {
	return proto.EnumName(SyncType_name, int32(x))
}

func (SyncType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{5}
}

type Status struct {
	ErrorCode            ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=milvus.grpc.ErrorCode" json:"error_code,omitempty"`
	Reason               string    `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{0}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetErrorCode() ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ErrorCode_SUCCESS
}

func (m *Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//*
// @brief General usage
type KeyValuePair struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValuePair) Reset()         { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()    {}
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{1}
}

func (m *KeyValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValuePair.Unmarshal(m, b)
}
func (m *KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValuePair.Marshal(b, m, deterministic)
}
func (m *KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePair.Merge(m, src)
}
func (m *KeyValuePair) XXX_Size() int {
	return xxx_messageInfo_KeyValuePair.Size(m)
}
func (m *KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePair proto.InternalMessageInfo

func (m *KeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

//*
// @brief Collection name
type CollectionName struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionName) Reset()         { *m = CollectionName{} }
func (m *CollectionName) String() string { return proto.CompactTextString(m) }
func (*CollectionName) ProtoMessage()    {}
func (*CollectionName) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{2}
}

func (m *CollectionName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionName.Unmarshal(m, b)
}
func (m *CollectionName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionName.Marshal(b, m, deterministic)
}
func (m *CollectionName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionName.Merge(m, src)
}
func (m *CollectionName) XXX_Size() int {
	return xxx_messageInfo_CollectionName.Size(m)
}
func (m *CollectionName) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionName.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionName proto.InternalMessageInfo

func (m *CollectionName) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

//*
// @brief Collection name list
type CollectionNameList struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionNames      []string `protobuf:"bytes,2,rep,name=collection_names,json=collectionNames,proto3" json:"collection_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionNameList) Reset()         { *m = CollectionNameList{} }
func (m *CollectionNameList) String() string { return proto.CompactTextString(m) }
func (*CollectionNameList) ProtoMessage()    {}
func (*CollectionNameList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{3}
}

func (m *CollectionNameList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionNameList.Unmarshal(m, b)
}
func (m *CollectionNameList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionNameList.Marshal(b, m, deterministic)
}
func (m *CollectionNameList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionNameList.Merge(m, src)
}
func (m *CollectionNameList) XXX_Size() int {
	return xxx_messageInfo_CollectionNameList.Size(m)
}
func (m *CollectionNameList) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionNameList.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionNameList proto.InternalMessageInfo

func (m *CollectionNameList) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CollectionNameList) GetCollectionNames() []string {
	if m != nil {
		return m.CollectionNames
	}
	return nil
}

//*
// @brief Field name
type FieldName struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	FieldName            string   `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldName) Reset()         { *m = FieldName{} }
func (m *FieldName) String() string { return proto.CompactTextString(m) }
func (*FieldName) ProtoMessage()    {}
func (*FieldName) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{4}
}

func (m *FieldName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldName.Unmarshal(m, b)
}
func (m *FieldName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldName.Marshal(b, m, deterministic)
}
func (m *FieldName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldName.Merge(m, src)
}
func (m *FieldName) XXX_Size() int {
	return xxx_messageInfo_FieldName.Size(m)
}
func (m *FieldName) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldName.DiscardUnknown(m)
}

var xxx_messageInfo_FieldName proto.InternalMessageInfo

func (m *FieldName) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *FieldName) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

//*
// @brief Collection mapping
// @extra_params: key-value pair for extra parameters of the collection
//    typically usage:
//        extra_params["params"] = {segment_row_count: 1000000, auto_id: true}
//    Note:
//        the segment_row_count specify segment row count limit for merging
//        the auto_id = true means entity id is auto-generated by milvus
type Mapping struct {
	Status               *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName       string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Schema               *Schema         `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Mapping) Reset()         { *m = Mapping{} }
func (m *Mapping) String() string { return proto.CompactTextString(m) }
func (*Mapping) ProtoMessage()    {}
func (*Mapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{5}
}

func (m *Mapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mapping.Unmarshal(m, b)
}
func (m *Mapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mapping.Marshal(b, m, deterministic)
}
func (m *Mapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mapping.Merge(m, src)
}
func (m *Mapping) XXX_Size() int {
	return xxx_messageInfo_Mapping.Size(m)
}
func (m *Mapping) XXX_DiscardUnknown() {
	xxx_messageInfo_Mapping.DiscardUnknown(m)
}

var xxx_messageInfo_Mapping proto.InternalMessageInfo

func (m *Mapping) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Mapping) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *Mapping) GetSchema() *Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *Mapping) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Collection mapping list
type MappingList struct {
	Status               *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	MappingList          []*Mapping `protobuf:"bytes,2,rep,name=mapping_list,json=mappingList,proto3" json:"mapping_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MappingList) Reset()         { *m = MappingList{} }
func (m *MappingList) String() string { return proto.CompactTextString(m) }
func (*MappingList) ProtoMessage()    {}
func (*MappingList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{6}
}

func (m *MappingList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MappingList.Unmarshal(m, b)
}
func (m *MappingList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MappingList.Marshal(b, m, deterministic)
}
func (m *MappingList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MappingList.Merge(m, src)
}
func (m *MappingList) XXX_Size() int {
	return xxx_messageInfo_MappingList.Size(m)
}
func (m *MappingList) XXX_DiscardUnknown() {
	xxx_messageInfo_MappingList.DiscardUnknown(m)
}

var xxx_messageInfo_MappingList proto.InternalMessageInfo

func (m *MappingList) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MappingList) GetMappingList() []*Mapping {
	if m != nil {
		return m.MappingList
	}
	return nil
}

//*
// @brief Parameters of partition
type PartitionParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionParam) Reset()         { *m = PartitionParam{} }
func (m *PartitionParam) String() string { return proto.CompactTextString(m) }
func (*PartitionParam) ProtoMessage()    {}
func (*PartitionParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{7}
}

func (m *PartitionParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionParam.Unmarshal(m, b)
}
func (m *PartitionParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionParam.Marshal(b, m, deterministic)
}
func (m *PartitionParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionParam.Merge(m, src)
}
func (m *PartitionParam) XXX_Size() int {
	return xxx_messageInfo_PartitionParam.Size(m)
}
func (m *PartitionParam) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionParam.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionParam proto.InternalMessageInfo

func (m *PartitionParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *PartitionParam) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

//*
// @brief Partition list
type PartitionList struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionTagArray    []string `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionList) Reset()         { *m = PartitionList{} }
func (m *PartitionList) String() string { return proto.CompactTextString(m) }
func (*PartitionList) ProtoMessage()    {}
func (*PartitionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{8}
}

func (m *PartitionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionList.Unmarshal(m, b)
}
func (m *PartitionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionList.Marshal(b, m, deterministic)
}
func (m *PartitionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionList.Merge(m, src)
}
func (m *PartitionList) XXX_Size() int {
	return xxx_messageInfo_PartitionList.Size(m)
}
func (m *PartitionList) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionList.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionList proto.InternalMessageInfo

func (m *PartitionList) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PartitionList) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

//*
// @brief Vector row record
type VectorRowRecord struct {
	FloatData            []float32 `protobuf:"fixed32,1,rep,packed,name=float_data,json=floatData,proto3" json:"float_data,omitempty"`
	BinaryData           []byte    `protobuf:"bytes,2,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VectorRowRecord) Reset()         { *m = VectorRowRecord{} }
func (m *VectorRowRecord) String() string { return proto.CompactTextString(m) }
func (*VectorRowRecord) ProtoMessage()    {}
func (*VectorRowRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{9}
}

func (m *VectorRowRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorRowRecord.Unmarshal(m, b)
}
func (m *VectorRowRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorRowRecord.Marshal(b, m, deterministic)
}
func (m *VectorRowRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorRowRecord.Merge(m, src)
}
func (m *VectorRowRecord) XXX_Size() int {
	return xxx_messageInfo_VectorRowRecord.Size(m)
}
func (m *VectorRowRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorRowRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VectorRowRecord proto.InternalMessageInfo

func (m *VectorRowRecord) GetFloatData() []float32 {
	if m != nil {
		return m.FloatData
	}
	return nil
}

func (m *VectorRowRecord) GetBinaryData() []byte {
	if m != nil {
		return m.BinaryData
	}
	return nil
}

type EntityIds struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntityIdArray        []int64  `protobuf:"varint,2,rep,packed,name=entity_id_array,json=entityIdArray,proto3" json:"entity_id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityIds) Reset()         { *m = EntityIds{} }
func (m *EntityIds) String() string { return proto.CompactTextString(m) }
func (*EntityIds) ProtoMessage()    {}
func (*EntityIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{10}
}

func (m *EntityIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityIds.Unmarshal(m, b)
}
func (m *EntityIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityIds.Marshal(b, m, deterministic)
}
func (m *EntityIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityIds.Merge(m, src)
}
func (m *EntityIds) XXX_Size() int {
	return xxx_messageInfo_EntityIds.Size(m)
}
func (m *EntityIds) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityIds.DiscardUnknown(m)
}

var xxx_messageInfo_EntityIds proto.InternalMessageInfo

func (m *EntityIds) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *EntityIds) GetEntityIdArray() []int64 {
	if m != nil {
		return m.EntityIdArray
	}
	return nil
}

type VectorRecord struct {
	Records              []*VectorRowRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VectorRecord) Reset()         { *m = VectorRecord{} }
func (m *VectorRecord) String() string { return proto.CompactTextString(m) }
func (*VectorRecord) ProtoMessage()    {}
func (*VectorRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{11}
}

func (m *VectorRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorRecord.Unmarshal(m, b)
}
func (m *VectorRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorRecord.Marshal(b, m, deterministic)
}
func (m *VectorRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorRecord.Merge(m, src)
}
func (m *VectorRecord) XXX_Size() int {
	return xxx_messageInfo_VectorRecord.Size(m)
}
func (m *VectorRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VectorRecord proto.InternalMessageInfo

func (m *VectorRecord) GetRecords() []*VectorRowRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type VectorParam struct {
	Json                 string        `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
	RowRecord            *VectorRecord `protobuf:"bytes,2,opt,name=row_record,json=rowRecord,proto3" json:"row_record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VectorParam) Reset()         { *m = VectorParam{} }
func (m *VectorParam) String() string { return proto.CompactTextString(m) }
func (*VectorParam) ProtoMessage()    {}
func (*VectorParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{12}
}

func (m *VectorParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorParam.Unmarshal(m, b)
}
func (m *VectorParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorParam.Marshal(b, m, deterministic)
}
func (m *VectorParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorParam.Merge(m, src)
}
func (m *VectorParam) XXX_Size() int {
	return xxx_messageInfo_VectorParam.Size(m)
}
func (m *VectorParam) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorParam.DiscardUnknown(m)
}

var xxx_messageInfo_VectorParam proto.InternalMessageInfo

func (m *VectorParam) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

func (m *VectorParam) GetRowRecord() *VectorRecord {
	if m != nil {
		return m.RowRecord
	}
	return nil
}

//*
// @brief schema
type FieldMeta struct {
	FieldName            string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Type                 DataType `protobuf:"varint,2,opt,name=type,proto3,enum=milvus.grpc.DataType" json:"type,omitempty"`
	Dim                  int64    `protobuf:"varint,3,opt,name=dim,proto3" json:"dim,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldMeta) Reset()         { *m = FieldMeta{} }
func (m *FieldMeta) String() string { return proto.CompactTextString(m) }
func (*FieldMeta) ProtoMessage()    {}
func (*FieldMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{13}
}

func (m *FieldMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldMeta.Unmarshal(m, b)
}
func (m *FieldMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldMeta.Marshal(b, m, deterministic)
}
func (m *FieldMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldMeta.Merge(m, src)
}
func (m *FieldMeta) XXX_Size() int {
	return xxx_messageInfo_FieldMeta.Size(m)
}
func (m *FieldMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldMeta.DiscardUnknown(m)
}

var xxx_messageInfo_FieldMeta proto.InternalMessageInfo

func (m *FieldMeta) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *FieldMeta) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_NONE
}

func (m *FieldMeta) GetDim() int64 {
	if m != nil {
		return m.Dim
	}
	return 0
}

type Schema struct {
	FieldMetas           []*FieldMeta `protobuf:"bytes,1,rep,name=field_metas,json=fieldMetas,proto3" json:"field_metas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Schema) Reset()         { *m = Schema{} }
func (m *Schema) String() string { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()    {}
func (*Schema) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{14}
}

func (m *Schema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Schema.Unmarshal(m, b)
}
func (m *Schema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Schema.Marshal(b, m, deterministic)
}
func (m *Schema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema.Merge(m, src)
}
func (m *Schema) XXX_Size() int {
	return xxx_messageInfo_Schema.Size(m)
}
func (m *Schema) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema.DiscardUnknown(m)
}

var xxx_messageInfo_Schema proto.InternalMessageInfo

func (m *Schema) GetFieldMetas() []*FieldMeta {
	if m != nil {
		return m.FieldMetas
	}
	return nil
}

type RowData struct {
	Blob                 []byte   `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RowData) Reset()         { *m = RowData{} }
func (m *RowData) String() string { return proto.CompactTextString(m) }
func (*RowData) ProtoMessage()    {}
func (*RowData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{15}
}

func (m *RowData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowData.Unmarshal(m, b)
}
func (m *RowData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowData.Marshal(b, m, deterministic)
}
func (m *RowData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowData.Merge(m, src)
}
func (m *RowData) XXX_Size() int {
	return xxx_messageInfo_RowData.Size(m)
}
func (m *RowData) XXX_DiscardUnknown() {
	xxx_messageInfo_RowData.DiscardUnknown(m)
}

var xxx_messageInfo_RowData proto.InternalMessageInfo

func (m *RowData) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

//////////////////////suvlim-proxy///////////////////////////////////
type InsertParam struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Schema               *Schema         `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	RowsData             []*RowData      `protobuf:"bytes,3,rep,name=rows_data,json=rowsData,proto3" json:"rows_data,omitempty"`
	EntityIdArray        []int64         `protobuf:"varint,4,rep,packed,name=entity_id_array,json=entityIdArray,proto3" json:"entity_id_array,omitempty"`
	PartitionTag         string          `protobuf:"bytes,5,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,6,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *InsertParam) Reset()         { *m = InsertParam{} }
func (m *InsertParam) String() string { return proto.CompactTextString(m) }
func (*InsertParam) ProtoMessage()    {}
func (*InsertParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{16}
}

func (m *InsertParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertParam.Unmarshal(m, b)
}
func (m *InsertParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertParam.Marshal(b, m, deterministic)
}
func (m *InsertParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertParam.Merge(m, src)
}
func (m *InsertParam) XXX_Size() int {
	return xxx_messageInfo_InsertParam.Size(m)
}
func (m *InsertParam) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertParam.DiscardUnknown(m)
}

var xxx_messageInfo_InsertParam proto.InternalMessageInfo

func (m *InsertParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *InsertParam) GetSchema() *Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *InsertParam) GetRowsData() []*RowData {
	if m != nil {
		return m.RowsData
	}
	return nil
}

func (m *InsertParam) GetEntityIdArray() []int64 {
	if m != nil {
		return m.EntityIdArray
	}
	return nil
}

func (m *InsertParam) GetPartitionTag() string {
	if m != nil {
		return m.PartitionTag
	}
	return ""
}

func (m *InsertParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type SearchParam struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	VectorParam          []*VectorParam  `protobuf:"bytes,2,rep,name=vector_param,json=vectorParam,proto3" json:"vector_param,omitempty"`
	Dsl                  string          `protobuf:"bytes,3,opt,name=dsl,proto3" json:"dsl,omitempty"`
	PartitionTag         []string        `protobuf:"bytes,4,rep,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchParam) Reset()         { *m = SearchParam{} }
func (m *SearchParam) String() string { return proto.CompactTextString(m) }
func (*SearchParam) ProtoMessage()    {}
func (*SearchParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{17}
}

func (m *SearchParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchParam.Unmarshal(m, b)
}
func (m *SearchParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchParam.Marshal(b, m, deterministic)
}
func (m *SearchParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchParam.Merge(m, src)
}
func (m *SearchParam) XXX_Size() int {
	return xxx_messageInfo_SearchParam.Size(m)
}
func (m *SearchParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchParam proto.InternalMessageInfo

func (m *SearchParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *SearchParam) GetVectorParam() []*VectorParam {
	if m != nil {
		return m.VectorParam
	}
	return nil
}

func (m *SearchParam) GetDsl() string {
	if m != nil {
		return m.Dsl
	}
	return ""
}

func (m *SearchParam) GetPartitionTag() []string {
	if m != nil {
		return m.PartitionTag
	}
	return nil
}

func (m *SearchParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type SearchInSegmentParam struct {
	FileIdArray          []string     `protobuf:"bytes,1,rep,name=file_id_array,json=fileIdArray,proto3" json:"file_id_array,omitempty"`
	SearchParam          *SearchParam `protobuf:"bytes,2,opt,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SearchInSegmentParam) Reset()         { *m = SearchInSegmentParam{} }
func (m *SearchInSegmentParam) String() string { return proto.CompactTextString(m) }
func (*SearchInSegmentParam) ProtoMessage()    {}
func (*SearchInSegmentParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{18}
}

func (m *SearchInSegmentParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchInSegmentParam.Unmarshal(m, b)
}
func (m *SearchInSegmentParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchInSegmentParam.Marshal(b, m, deterministic)
}
func (m *SearchInSegmentParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchInSegmentParam.Merge(m, src)
}
func (m *SearchInSegmentParam) XXX_Size() int {
	return xxx_messageInfo_SearchInSegmentParam.Size(m)
}
func (m *SearchInSegmentParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchInSegmentParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchInSegmentParam proto.InternalMessageInfo

func (m *SearchInSegmentParam) GetFileIdArray() []string {
	if m != nil {
		return m.FileIdArray
	}
	return nil
}

func (m *SearchInSegmentParam) GetSearchParam() *SearchParam {
	if m != nil {
		return m.SearchParam
	}
	return nil
}

type Entities struct {
	Status               *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Ids                  []int64    `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	ValidRow             []bool     `protobuf:"varint,3,rep,packed,name=valid_row,json=validRow,proto3" json:"valid_row,omitempty"`
	RowsData             []*RowData `protobuf:"bytes,4,rep,name=rows_data,json=rowsData,proto3" json:"rows_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Entities) Reset()         { *m = Entities{} }
func (m *Entities) String() string { return proto.CompactTextString(m) }
func (*Entities) ProtoMessage()    {}
func (*Entities) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{19}
}

func (m *Entities) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entities.Unmarshal(m, b)
}
func (m *Entities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entities.Marshal(b, m, deterministic)
}
func (m *Entities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entities.Merge(m, src)
}
func (m *Entities) XXX_Size() int {
	return xxx_messageInfo_Entities.Size(m)
}
func (m *Entities) XXX_DiscardUnknown() {
	xxx_messageInfo_Entities.DiscardUnknown(m)
}

var xxx_messageInfo_Entities proto.InternalMessageInfo

func (m *Entities) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Entities) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *Entities) GetValidRow() []bool {
	if m != nil {
		return m.ValidRow
	}
	return nil
}

func (m *Entities) GetRowsData() []*RowData {
	if m != nil {
		return m.RowsData
	}
	return nil
}

//*
// @brief Query result
type QueryResult struct {
	Status               *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Entities             *Entities       `protobuf:"bytes,2,opt,name=entities,proto3" json:"entities,omitempty"`
	RowNum               int64           `protobuf:"varint,3,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	Scores               []float32       `protobuf:"fixed32,4,rep,packed,name=scores,proto3" json:"scores,omitempty"`
	Distances            []float32       `protobuf:"fixed32,5,rep,packed,name=distances,proto3" json:"distances,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,6,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	QueryId              int64           `protobuf:"varint,7,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	ClientId             int64           `protobuf:"varint,8,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *QueryResult) Reset()         { *m = QueryResult{} }
func (m *QueryResult) String() string { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()    {}
func (*QueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{20}
}

func (m *QueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResult.Unmarshal(m, b)
}
func (m *QueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResult.Marshal(b, m, deterministic)
}
func (m *QueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResult.Merge(m, src)
}
func (m *QueryResult) XXX_Size() int {
	return xxx_messageInfo_QueryResult.Size(m)
}
func (m *QueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResult proto.InternalMessageInfo

func (m *QueryResult) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *QueryResult) GetEntities() *Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *QueryResult) GetRowNum() int64 {
	if m != nil {
		return m.RowNum
	}
	return 0
}

func (m *QueryResult) GetScores() []float32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *QueryResult) GetDistances() []float32 {
	if m != nil {
		return m.Distances
	}
	return nil
}

func (m *QueryResult) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

func (m *QueryResult) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *QueryResult) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

//*
// @brief Server string Reply
type StringReply struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StringReply          string   `protobuf:"bytes,2,opt,name=string_reply,json=stringReply,proto3" json:"string_reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringReply) Reset()         { *m = StringReply{} }
func (m *StringReply) String() string { return proto.CompactTextString(m) }
func (*StringReply) ProtoMessage()    {}
func (*StringReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{21}
}

func (m *StringReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringReply.Unmarshal(m, b)
}
func (m *StringReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringReply.Marshal(b, m, deterministic)
}
func (m *StringReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringReply.Merge(m, src)
}
func (m *StringReply) XXX_Size() int {
	return xxx_messageInfo_StringReply.Size(m)
}
func (m *StringReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StringReply.DiscardUnknown(m)
}

var xxx_messageInfo_StringReply proto.InternalMessageInfo

func (m *StringReply) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *StringReply) GetStringReply() string {
	if m != nil {
		return m.StringReply
	}
	return ""
}

//*
// @brief Server bool Reply
type BoolReply struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BoolReply            bool     `protobuf:"varint,2,opt,name=bool_reply,json=boolReply,proto3" json:"bool_reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolReply) Reset()         { *m = BoolReply{} }
func (m *BoolReply) String() string { return proto.CompactTextString(m) }
func (*BoolReply) ProtoMessage()    {}
func (*BoolReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{22}
}

func (m *BoolReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolReply.Unmarshal(m, b)
}
func (m *BoolReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolReply.Marshal(b, m, deterministic)
}
func (m *BoolReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolReply.Merge(m, src)
}
func (m *BoolReply) XXX_Size() int {
	return xxx_messageInfo_BoolReply.Size(m)
}
func (m *BoolReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolReply.DiscardUnknown(m)
}

var xxx_messageInfo_BoolReply proto.InternalMessageInfo

func (m *BoolReply) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BoolReply) GetBoolReply() bool {
	if m != nil {
		return m.BoolReply
	}
	return false
}

//*
// @brief Return collection row count
type CollectionRowCount struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionRowCount   int64    `protobuf:"varint,2,opt,name=collection_row_count,json=collectionRowCount,proto3" json:"collection_row_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionRowCount) Reset()         { *m = CollectionRowCount{} }
func (m *CollectionRowCount) String() string { return proto.CompactTextString(m) }
func (*CollectionRowCount) ProtoMessage()    {}
func (*CollectionRowCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{23}
}

func (m *CollectionRowCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionRowCount.Unmarshal(m, b)
}
func (m *CollectionRowCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionRowCount.Marshal(b, m, deterministic)
}
func (m *CollectionRowCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionRowCount.Merge(m, src)
}
func (m *CollectionRowCount) XXX_Size() int {
	return xxx_messageInfo_CollectionRowCount.Size(m)
}
func (m *CollectionRowCount) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionRowCount.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionRowCount proto.InternalMessageInfo

func (m *CollectionRowCount) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CollectionRowCount) GetCollectionRowCount() int64 {
	if m != nil {
		return m.CollectionRowCount
	}
	return 0
}

//*
// @brief Server command parameters
type Command struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{24}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

//*
// @brief Index params
// @collection_name: target collection
// @field_name: target field
// @index_name: a name for index provided by user, unique within this field
// @extra_params: index parameters in json format
//    for vector field:
//        extra_params["index_type"] = one of the values: FLAT, IVF_LAT, IVF_SQ8, NSGMIX, IVFSQ8H,
//                                                        PQ, HNSW, HNSW_SQ8NM, ANNOY
//        extra_params["metric_type"] = one of the values: L2, IP, HAMMING, JACCARD, TANIMOTO
//                                                         SUBSTRUCTURE, SUPERSTRUCTURE
//        extra_params["params"] = extra parameters for index, for example ivflat: {nlist: 2048}
//    for structured field:
//        extra_params["index_type"] = one of the values: SORTED
type IndexParam struct {
	Status               *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName       string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	FieldName            string          `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	IndexName            string          `protobuf:"bytes,4,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *IndexParam) Reset()         { *m = IndexParam{} }
func (m *IndexParam) String() string { return proto.CompactTextString(m) }
func (*IndexParam) ProtoMessage()    {}
func (*IndexParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{25}
}

func (m *IndexParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexParam.Unmarshal(m, b)
}
func (m *IndexParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexParam.Marshal(b, m, deterministic)
}
func (m *IndexParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexParam.Merge(m, src)
}
func (m *IndexParam) XXX_Size() int {
	return xxx_messageInfo_IndexParam.Size(m)
}
func (m *IndexParam) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexParam.DiscardUnknown(m)
}

var xxx_messageInfo_IndexParam proto.InternalMessageInfo

func (m *IndexParam) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IndexParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *IndexParam) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *IndexParam) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *IndexParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Parameters for flush action
type FlushParam struct {
	CollectionNameArray  []string `protobuf:"bytes,1,rep,name=collection_name_array,json=collectionNameArray,proto3" json:"collection_name_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlushParam) Reset()         { *m = FlushParam{} }
func (m *FlushParam) String() string { return proto.CompactTextString(m) }
func (*FlushParam) ProtoMessage()    {}
func (*FlushParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{26}
}

func (m *FlushParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlushParam.Unmarshal(m, b)
}
func (m *FlushParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlushParam.Marshal(b, m, deterministic)
}
func (m *FlushParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushParam.Merge(m, src)
}
func (m *FlushParam) XXX_Size() int {
	return xxx_messageInfo_FlushParam.Size(m)
}
func (m *FlushParam) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushParam.DiscardUnknown(m)
}

var xxx_messageInfo_FlushParam proto.InternalMessageInfo

func (m *FlushParam) GetCollectionNameArray() []string {
	if m != nil {
		return m.CollectionNameArray
	}
	return nil
}

//*
// @brief Parameters for flush action
type CompactParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Threshold            float64  `protobuf:"fixed64,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompactParam) Reset()         { *m = CompactParam{} }
func (m *CompactParam) String() string { return proto.CompactTextString(m) }
func (*CompactParam) ProtoMessage()    {}
func (*CompactParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{27}
}

func (m *CompactParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompactParam.Unmarshal(m, b)
}
func (m *CompactParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompactParam.Marshal(b, m, deterministic)
}
func (m *CompactParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactParam.Merge(m, src)
}
func (m *CompactParam) XXX_Size() int {
	return xxx_messageInfo_CompactParam.Size(m)
}
func (m *CompactParam) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactParam.DiscardUnknown(m)
}

var xxx_messageInfo_CompactParam proto.InternalMessageInfo

func (m *CompactParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *CompactParam) GetThreshold() float64 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

//*
// @brief Parameters for deleting entities by id
type DeleteByIDParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IdArray              []int64  `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteByIDParam) Reset()         { *m = DeleteByIDParam{} }
func (m *DeleteByIDParam) String() string { return proto.CompactTextString(m) }
func (*DeleteByIDParam) ProtoMessage()    {}
func (*DeleteByIDParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{28}
}

func (m *DeleteByIDParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteByIDParam.Unmarshal(m, b)
}
func (m *DeleteByIDParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteByIDParam.Marshal(b, m, deterministic)
}
func (m *DeleteByIDParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteByIDParam.Merge(m, src)
}
func (m *DeleteByIDParam) XXX_Size() int {
	return xxx_messageInfo_DeleteByIDParam.Size(m)
}
func (m *DeleteByIDParam) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteByIDParam.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteByIDParam proto.InternalMessageInfo

func (m *DeleteByIDParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *DeleteByIDParam) GetIdArray() []int64 {
	if m != nil {
		return m.IdArray
	}
	return nil
}

//*
// @brief Return collection stats
// @json_info: collection stats in json format, typically, the format is like:
//     {
//        row_count: xxx,
//        data_size: xxx,
//        partitions: [
//          {
//            tag: xxx,
//            id: xxx,
//            row_count: xxx,
//            data_size: xxx,
//            segments: [
//              {
//                 id: xxx,
//                 row_count: xxx,
//                 data_size: xxx,
//                 files: [
//                    {
//                       field: xxx,
//                       name: xxx,
//                       index_type: xxx,
//                       path: xxx,
//                       data_size: xxx,
//                    }
//                 ]
//              }
//            ]
//          }
//        ]
//     }
type CollectionInfo struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	JsonInfo             string   `protobuf:"bytes,2,opt,name=json_info,json=jsonInfo,proto3" json:"json_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionInfo) Reset()         { *m = CollectionInfo{} }
func (m *CollectionInfo) String() string { return proto.CompactTextString(m) }
func (*CollectionInfo) ProtoMessage()    {}
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{29}
}

func (m *CollectionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionInfo.Unmarshal(m, b)
}
func (m *CollectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionInfo.Marshal(b, m, deterministic)
}
func (m *CollectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionInfo.Merge(m, src)
}
func (m *CollectionInfo) XXX_Size() int {
	return xxx_messageInfo_CollectionInfo.Size(m)
}
func (m *CollectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionInfo proto.InternalMessageInfo

func (m *CollectionInfo) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CollectionInfo) GetJsonInfo() string {
	if m != nil {
		return m.JsonInfo
	}
	return ""
}

//*
// @brief Parameters for returning entities id of a segment
type GetEntityIDsParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	SegmentId            int64    `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEntityIDsParam) Reset()         { *m = GetEntityIDsParam{} }
func (m *GetEntityIDsParam) String() string { return proto.CompactTextString(m) }
func (*GetEntityIDsParam) ProtoMessage()    {}
func (*GetEntityIDsParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{30}
}

func (m *GetEntityIDsParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntityIDsParam.Unmarshal(m, b)
}
func (m *GetEntityIDsParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntityIDsParam.Marshal(b, m, deterministic)
}
func (m *GetEntityIDsParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntityIDsParam.Merge(m, src)
}
func (m *GetEntityIDsParam) XXX_Size() int {
	return xxx_messageInfo_GetEntityIDsParam.Size(m)
}
func (m *GetEntityIDsParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntityIDsParam.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntityIDsParam proto.InternalMessageInfo

func (m *GetEntityIDsParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *GetEntityIDsParam) GetSegmentId() int64 {
	if m != nil {
		return m.SegmentId
	}
	return 0
}

//*
// @brief Entities identity
type EntityIdentity struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IdArray              []int64  `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
	FieldNames           []string `protobuf:"bytes,3,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityIdentity) Reset()         { *m = EntityIdentity{} }
func (m *EntityIdentity) String() string { return proto.CompactTextString(m) }
func (*EntityIdentity) ProtoMessage()    {}
func (*EntityIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{31}
}

func (m *EntityIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityIdentity.Unmarshal(m, b)
}
func (m *EntityIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityIdentity.Marshal(b, m, deterministic)
}
func (m *EntityIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityIdentity.Merge(m, src)
}
func (m *EntityIdentity) XXX_Size() int {
	return xxx_messageInfo_EntityIdentity.Size(m)
}
func (m *EntityIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_EntityIdentity proto.InternalMessageInfo

func (m *EntityIdentity) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *EntityIdentity) GetIdArray() []int64 {
	if m != nil {
		return m.IdArray
	}
	return nil
}

func (m *EntityIdentity) GetFieldNames() []string {
	if m != nil {
		return m.FieldNames
	}
	return nil
}

//*
// @brief Vector field parameters
type VectorFieldParam struct {
	Dimension            int64    `protobuf:"varint,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorFieldParam) Reset()         { *m = VectorFieldParam{} }
func (m *VectorFieldParam) String() string { return proto.CompactTextString(m) }
func (*VectorFieldParam) ProtoMessage()    {}
func (*VectorFieldParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{32}
}

func (m *VectorFieldParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorFieldParam.Unmarshal(m, b)
}
func (m *VectorFieldParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorFieldParam.Marshal(b, m, deterministic)
}
func (m *VectorFieldParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorFieldParam.Merge(m, src)
}
func (m *VectorFieldParam) XXX_Size() int {
	return xxx_messageInfo_VectorFieldParam.Size(m)
}
func (m *VectorFieldParam) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorFieldParam.DiscardUnknown(m)
}

var xxx_messageInfo_VectorFieldParam proto.InternalMessageInfo

func (m *VectorFieldParam) GetDimension() int64 {
	if m != nil {
		return m.Dimension
	}
	return 0
}

//*
// @brief Field type
type FieldType struct {
	// Types that are valid to be assigned to Value:
	//	*FieldType_DataType
	//	*FieldType_VectorParam
	Value                isFieldType_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FieldType) Reset()         { *m = FieldType{} }
func (m *FieldType) String() string { return proto.CompactTextString(m) }
func (*FieldType) ProtoMessage()    {}
func (*FieldType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{33}
}

func (m *FieldType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldType.Unmarshal(m, b)
}
func (m *FieldType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldType.Marshal(b, m, deterministic)
}
func (m *FieldType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldType.Merge(m, src)
}
func (m *FieldType) XXX_Size() int {
	return xxx_messageInfo_FieldType.Size(m)
}
func (m *FieldType) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldType.DiscardUnknown(m)
}

var xxx_messageInfo_FieldType proto.InternalMessageInfo

type isFieldType_Value interface {
	isFieldType_Value()
}

type FieldType_DataType struct {
	DataType DataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=milvus.grpc.DataType,oneof"`
}

type FieldType_VectorParam struct {
	VectorParam *VectorFieldParam `protobuf:"bytes,2,opt,name=vector_param,json=vectorParam,proto3,oneof"`
}

func (*FieldType_DataType) isFieldType_Value() {}

func (*FieldType_VectorParam) isFieldType_Value() {}

func (m *FieldType) GetValue() isFieldType_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FieldType) GetDataType() DataType {
	if x, ok := m.GetValue().(*FieldType_DataType); ok {
		return x.DataType
	}
	return DataType_NONE
}

func (m *FieldType) GetVectorParam() *VectorFieldParam {
	if x, ok := m.GetValue().(*FieldType_VectorParam); ok {
		return x.VectorParam
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FieldType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FieldType_DataType)(nil),
		(*FieldType_VectorParam)(nil),
	}
}

//*
// @brief Field parameters
type FieldParam struct {
	Id                   uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 DataType        `protobuf:"varint,3,opt,name=type,proto3,enum=milvus.grpc.DataType" json:"type,omitempty"`
	IndexParams          []*KeyValuePair `protobuf:"bytes,4,rep,name=index_params,json=indexParams,proto3" json:"index_params,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FieldParam) Reset()         { *m = FieldParam{} }
func (m *FieldParam) String() string { return proto.CompactTextString(m) }
func (*FieldParam) ProtoMessage()    {}
func (*FieldParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{34}
}

func (m *FieldParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldParam.Unmarshal(m, b)
}
func (m *FieldParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldParam.Marshal(b, m, deterministic)
}
func (m *FieldParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldParam.Merge(m, src)
}
func (m *FieldParam) XXX_Size() int {
	return xxx_messageInfo_FieldParam.Size(m)
}
func (m *FieldParam) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldParam.DiscardUnknown(m)
}

var xxx_messageInfo_FieldParam proto.InternalMessageInfo

func (m *FieldParam) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FieldParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldParam) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_NONE
}

func (m *FieldParam) GetIndexParams() []*KeyValuePair {
	if m != nil {
		return m.IndexParams
	}
	return nil
}

func (m *FieldParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Vector field record
type VectorFieldRecord struct {
	Value                []*VectorRowRecord `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VectorFieldRecord) Reset()         { *m = VectorFieldRecord{} }
func (m *VectorFieldRecord) String() string { return proto.CompactTextString(m) }
func (*VectorFieldRecord) ProtoMessage()    {}
func (*VectorFieldRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{35}
}

func (m *VectorFieldRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorFieldRecord.Unmarshal(m, b)
}
func (m *VectorFieldRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorFieldRecord.Marshal(b, m, deterministic)
}
func (m *VectorFieldRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorFieldRecord.Merge(m, src)
}
func (m *VectorFieldRecord) XXX_Size() int {
	return xxx_messageInfo_VectorFieldRecord.Size(m)
}
func (m *VectorFieldRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorFieldRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VectorFieldRecord proto.InternalMessageInfo

func (m *VectorFieldRecord) GetValue() []*VectorRowRecord {
	if m != nil {
		return m.Value
	}
	return nil
}

type TermQuery struct {
	FieldName            string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	IntValue             []int64         `protobuf:"varint,2,rep,packed,name=int_value,json=intValue,proto3" json:"int_value,omitempty"`
	DoubleValue          []float64       `protobuf:"fixed64,3,rep,packed,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	ValueNum             int64           `protobuf:"varint,4,opt,name=value_num,json=valueNum,proto3" json:"value_num,omitempty"`
	Boost                float32         `protobuf:"fixed32,5,opt,name=boost,proto3" json:"boost,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,6,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TermQuery) Reset()         { *m = TermQuery{} }
func (m *TermQuery) String() string { return proto.CompactTextString(m) }
func (*TermQuery) ProtoMessage()    {}
func (*TermQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{36}
}

func (m *TermQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermQuery.Unmarshal(m, b)
}
func (m *TermQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermQuery.Marshal(b, m, deterministic)
}
func (m *TermQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermQuery.Merge(m, src)
}
func (m *TermQuery) XXX_Size() int {
	return xxx_messageInfo_TermQuery.Size(m)
}
func (m *TermQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_TermQuery.DiscardUnknown(m)
}

var xxx_messageInfo_TermQuery proto.InternalMessageInfo

func (m *TermQuery) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *TermQuery) GetIntValue() []int64 {
	if m != nil {
		return m.IntValue
	}
	return nil
}

func (m *TermQuery) GetDoubleValue() []float64 {
	if m != nil {
		return m.DoubleValue
	}
	return nil
}

func (m *TermQuery) GetValueNum() int64 {
	if m != nil {
		return m.ValueNum
	}
	return 0
}

func (m *TermQuery) GetBoost() float32 {
	if m != nil {
		return m.Boost
	}
	return 0
}

func (m *TermQuery) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type CompareExpr struct {
	Operator             CompareOperator `protobuf:"varint,1,opt,name=operator,proto3,enum=milvus.grpc.CompareOperator" json:"operator,omitempty"`
	Operand              string          `protobuf:"bytes,2,opt,name=operand,proto3" json:"operand,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CompareExpr) Reset()         { *m = CompareExpr{} }
func (m *CompareExpr) String() string { return proto.CompactTextString(m) }
func (*CompareExpr) ProtoMessage()    {}
func (*CompareExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{37}
}

func (m *CompareExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompareExpr.Unmarshal(m, b)
}
func (m *CompareExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompareExpr.Marshal(b, m, deterministic)
}
func (m *CompareExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareExpr.Merge(m, src)
}
func (m *CompareExpr) XXX_Size() int {
	return xxx_messageInfo_CompareExpr.Size(m)
}
func (m *CompareExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareExpr.DiscardUnknown(m)
}

var xxx_messageInfo_CompareExpr proto.InternalMessageInfo

func (m *CompareExpr) GetOperator() CompareOperator {
	if m != nil {
		return m.Operator
	}
	return CompareOperator_LT
}

func (m *CompareExpr) GetOperand() string {
	if m != nil {
		return m.Operand
	}
	return ""
}

type RangeQuery struct {
	FieldName            string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Operand              []*CompareExpr  `protobuf:"bytes,2,rep,name=operand,proto3" json:"operand,omitempty"`
	Boost                float32         `protobuf:"fixed32,3,opt,name=boost,proto3" json:"boost,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RangeQuery) Reset()         { *m = RangeQuery{} }
func (m *RangeQuery) String() string { return proto.CompactTextString(m) }
func (*RangeQuery) ProtoMessage()    {}
func (*RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{38}
}

func (m *RangeQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeQuery.Unmarshal(m, b)
}
func (m *RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeQuery.Marshal(b, m, deterministic)
}
func (m *RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeQuery.Merge(m, src)
}
func (m *RangeQuery) XXX_Size() int {
	return xxx_messageInfo_RangeQuery.Size(m)
}
func (m *RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RangeQuery proto.InternalMessageInfo

func (m *RangeQuery) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *RangeQuery) GetOperand() []*CompareExpr {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *RangeQuery) GetBoost() float32 {
	if m != nil {
		return m.Boost
	}
	return 0
}

func (m *RangeQuery) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type VectorQuery struct {
	FieldName            string             `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	QueryBoost           float32            `protobuf:"fixed32,2,opt,name=query_boost,json=queryBoost,proto3" json:"query_boost,omitempty"`
	Records              []*VectorRowRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	Topk                 int64              `protobuf:"varint,4,opt,name=topk,proto3" json:"topk,omitempty"`
	ExtraParams          []*KeyValuePair    `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VectorQuery) Reset()         { *m = VectorQuery{} }
func (m *VectorQuery) String() string { return proto.CompactTextString(m) }
func (*VectorQuery) ProtoMessage()    {}
func (*VectorQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{39}
}

func (m *VectorQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorQuery.Unmarshal(m, b)
}
func (m *VectorQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorQuery.Marshal(b, m, deterministic)
}
func (m *VectorQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorQuery.Merge(m, src)
}
func (m *VectorQuery) XXX_Size() int {
	return xxx_messageInfo_VectorQuery.Size(m)
}
func (m *VectorQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorQuery.DiscardUnknown(m)
}

var xxx_messageInfo_VectorQuery proto.InternalMessageInfo

func (m *VectorQuery) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *VectorQuery) GetQueryBoost() float32 {
	if m != nil {
		return m.QueryBoost
	}
	return 0
}

func (m *VectorQuery) GetRecords() []*VectorRowRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *VectorQuery) GetTopk() int64 {
	if m != nil {
		return m.Topk
	}
	return 0
}

func (m *VectorQuery) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type BooleanQuery struct {
	Occur                Occur           `protobuf:"varint,1,opt,name=occur,proto3,enum=milvus.grpc.Occur" json:"occur,omitempty"`
	GeneralQuery         []*GeneralQuery `protobuf:"bytes,2,rep,name=general_query,json=generalQuery,proto3" json:"general_query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BooleanQuery) Reset()         { *m = BooleanQuery{} }
func (m *BooleanQuery) String() string { return proto.CompactTextString(m) }
func (*BooleanQuery) ProtoMessage()    {}
func (*BooleanQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{40}
}

func (m *BooleanQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BooleanQuery.Unmarshal(m, b)
}
func (m *BooleanQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BooleanQuery.Marshal(b, m, deterministic)
}
func (m *BooleanQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanQuery.Merge(m, src)
}
func (m *BooleanQuery) XXX_Size() int {
	return xxx_messageInfo_BooleanQuery.Size(m)
}
func (m *BooleanQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanQuery.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanQuery proto.InternalMessageInfo

func (m *BooleanQuery) GetOccur() Occur {
	if m != nil {
		return m.Occur
	}
	return Occur_INVALID
}

func (m *BooleanQuery) GetGeneralQuery() []*GeneralQuery {
	if m != nil {
		return m.GeneralQuery
	}
	return nil
}

type GeneralQuery struct {
	// Types that are valid to be assigned to Query:
	//	*GeneralQuery_BooleanQuery
	//	*GeneralQuery_TermQuery
	//	*GeneralQuery_RangeQuery
	//	*GeneralQuery_VectorQuery
	Query                isGeneralQuery_Query `protobuf_oneof:"query"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GeneralQuery) Reset()         { *m = GeneralQuery{} }
func (m *GeneralQuery) String() string { return proto.CompactTextString(m) }
func (*GeneralQuery) ProtoMessage()    {}
func (*GeneralQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{41}
}

func (m *GeneralQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeneralQuery.Unmarshal(m, b)
}
func (m *GeneralQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeneralQuery.Marshal(b, m, deterministic)
}
func (m *GeneralQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralQuery.Merge(m, src)
}
func (m *GeneralQuery) XXX_Size() int {
	return xxx_messageInfo_GeneralQuery.Size(m)
}
func (m *GeneralQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralQuery proto.InternalMessageInfo

type isGeneralQuery_Query interface {
	isGeneralQuery_Query()
}

type GeneralQuery_BooleanQuery struct {
	BooleanQuery *BooleanQuery `protobuf:"bytes,1,opt,name=boolean_query,json=booleanQuery,proto3,oneof"`
}

type GeneralQuery_TermQuery struct {
	TermQuery *TermQuery `protobuf:"bytes,2,opt,name=term_query,json=termQuery,proto3,oneof"`
}

type GeneralQuery_RangeQuery struct {
	RangeQuery *RangeQuery `protobuf:"bytes,3,opt,name=range_query,json=rangeQuery,proto3,oneof"`
}

type GeneralQuery_VectorQuery struct {
	VectorQuery *VectorQuery `protobuf:"bytes,4,opt,name=vector_query,json=vectorQuery,proto3,oneof"`
}

func (*GeneralQuery_BooleanQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_TermQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_RangeQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_VectorQuery) isGeneralQuery_Query() {}

func (m *GeneralQuery) GetQuery() isGeneralQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *GeneralQuery) GetBooleanQuery() *BooleanQuery {
	if x, ok := m.GetQuery().(*GeneralQuery_BooleanQuery); ok {
		return x.BooleanQuery
	}
	return nil
}

func (m *GeneralQuery) GetTermQuery() *TermQuery {
	if x, ok := m.GetQuery().(*GeneralQuery_TermQuery); ok {
		return x.TermQuery
	}
	return nil
}

func (m *GeneralQuery) GetRangeQuery() *RangeQuery {
	if x, ok := m.GetQuery().(*GeneralQuery_RangeQuery); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *GeneralQuery) GetVectorQuery() *VectorQuery {
	if x, ok := m.GetQuery().(*GeneralQuery_VectorQuery); ok {
		return x.VectorQuery
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GeneralQuery) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GeneralQuery_BooleanQuery)(nil),
		(*GeneralQuery_TermQuery)(nil),
		(*GeneralQuery_RangeQuery)(nil),
		(*GeneralQuery_VectorQuery)(nil),
	}
}

type SearchParamPB struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray    []string        `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	GeneralQuery         *GeneralQuery   `protobuf:"bytes,3,opt,name=general_query,json=generalQuery,proto3" json:"general_query,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchParamPB) Reset()         { *m = SearchParamPB{} }
func (m *SearchParamPB) String() string { return proto.CompactTextString(m) }
func (*SearchParamPB) ProtoMessage()    {}
func (*SearchParamPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{42}
}

func (m *SearchParamPB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchParamPB.Unmarshal(m, b)
}
func (m *SearchParamPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchParamPB.Marshal(b, m, deterministic)
}
func (m *SearchParamPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchParamPB.Merge(m, src)
}
func (m *SearchParamPB) XXX_Size() int {
	return xxx_messageInfo_SearchParamPB.Size(m)
}
func (m *SearchParamPB) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchParamPB.DiscardUnknown(m)
}

var xxx_messageInfo_SearchParamPB proto.InternalMessageInfo

func (m *SearchParamPB) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *SearchParamPB) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

func (m *SearchParamPB) GetGeneralQuery() *GeneralQuery {
	if m != nil {
		return m.GeneralQuery
	}
	return nil
}

func (m *SearchParamPB) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type InsertOrDeleteMsg struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	RowsData             *RowData        `protobuf:"bytes,2,opt,name=rows_data,json=rowsData,proto3" json:"rows_data,omitempty"`
	Uid                  int64           `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	PartitionTag         string          `protobuf:"bytes,4,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	Timestamp            uint64          `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SegmentId            int64           `protobuf:"varint,6,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	ChannelId            int64           `protobuf:"varint,7,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Op                   OpType          `protobuf:"varint,8,opt,name=op,proto3,enum=milvus.grpc.OpType" json:"op,omitempty"`
	ClientId             int64           `protobuf:"varint,9,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,10,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *InsertOrDeleteMsg) Reset()         { *m = InsertOrDeleteMsg{} }
func (m *InsertOrDeleteMsg) String() string { return proto.CompactTextString(m) }
func (*InsertOrDeleteMsg) ProtoMessage()    {}
func (*InsertOrDeleteMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{43}
}

func (m *InsertOrDeleteMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertOrDeleteMsg.Unmarshal(m, b)
}
func (m *InsertOrDeleteMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertOrDeleteMsg.Marshal(b, m, deterministic)
}
func (m *InsertOrDeleteMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertOrDeleteMsg.Merge(m, src)
}
func (m *InsertOrDeleteMsg) XXX_Size() int {
	return xxx_messageInfo_InsertOrDeleteMsg.Size(m)
}
func (m *InsertOrDeleteMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertOrDeleteMsg.DiscardUnknown(m)
}

var xxx_messageInfo_InsertOrDeleteMsg proto.InternalMessageInfo

func (m *InsertOrDeleteMsg) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *InsertOrDeleteMsg) GetRowsData() *RowData {
	if m != nil {
		return m.RowsData
	}
	return nil
}

func (m *InsertOrDeleteMsg) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *InsertOrDeleteMsg) GetPartitionTag() string {
	if m != nil {
		return m.PartitionTag
	}
	return ""
}

func (m *InsertOrDeleteMsg) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *InsertOrDeleteMsg) GetSegmentId() int64 {
	if m != nil {
		return m.SegmentId
	}
	return 0
}

func (m *InsertOrDeleteMsg) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *InsertOrDeleteMsg) GetOp() OpType {
	if m != nil {
		return m.Op
	}
	return OpType_INSERT
}

func (m *InsertOrDeleteMsg) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *InsertOrDeleteMsg) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type SearchMsg struct {
	CollectionName       string           `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Records              *VectorRowRecord `protobuf:"bytes,2,opt,name=records,proto3" json:"records,omitempty"`
	PartitionTag         string           `protobuf:"bytes,3,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	Uid                  int64            `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Timestamp            uint64           `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ClientId             int64            `protobuf:"varint,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ExtraParams          []*KeyValuePair  `protobuf:"bytes,7,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SearchMsg) Reset()         { *m = SearchMsg{} }
func (m *SearchMsg) String() string { return proto.CompactTextString(m) }
func (*SearchMsg) ProtoMessage()    {}
func (*SearchMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{44}
}

func (m *SearchMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchMsg.Unmarshal(m, b)
}
func (m *SearchMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchMsg.Marshal(b, m, deterministic)
}
func (m *SearchMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchMsg.Merge(m, src)
}
func (m *SearchMsg) XXX_Size() int {
	return xxx_messageInfo_SearchMsg.Size(m)
}
func (m *SearchMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SearchMsg proto.InternalMessageInfo

func (m *SearchMsg) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *SearchMsg) GetRecords() *VectorRowRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *SearchMsg) GetPartitionTag() string {
	if m != nil {
		return m.PartitionTag
	}
	return ""
}

func (m *SearchMsg) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SearchMsg) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SearchMsg) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *SearchMsg) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type TimeSyncMsg struct {
	Peer_Id              int64    `protobuf:"varint,1,opt,name=peer_Id,json=peerId,proto3" json:"peer_Id,omitempty"`
	Timestamp            uint64   `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	SyncType             SyncType `protobuf:"varint,3,opt,name=sync_type,json=syncType,proto3,enum=milvus.grpc.SyncType" json:"sync_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeSyncMsg) Reset()         { *m = TimeSyncMsg{} }
func (m *TimeSyncMsg) String() string { return proto.CompactTextString(m) }
func (*TimeSyncMsg) ProtoMessage()    {}
func (*TimeSyncMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{45}
}

func (m *TimeSyncMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeSyncMsg.Unmarshal(m, b)
}
func (m *TimeSyncMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeSyncMsg.Marshal(b, m, deterministic)
}
func (m *TimeSyncMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeSyncMsg.Merge(m, src)
}
func (m *TimeSyncMsg) XXX_Size() int {
	return xxx_messageInfo_TimeSyncMsg.Size(m)
}
func (m *TimeSyncMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeSyncMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TimeSyncMsg proto.InternalMessageInfo

func (m *TimeSyncMsg) GetPeer_Id() int64 {
	if m != nil {
		return m.Peer_Id
	}
	return 0
}

func (m *TimeSyncMsg) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TimeSyncMsg) GetSyncType() SyncType {
	if m != nil {
		return m.SyncType
	}
	return SyncType_READ
}

type Key2SegMsg struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Timestamp            uint64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SegmentId            []int64  `protobuf:"varint,3,rep,packed,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key2SegMsg) Reset()         { *m = Key2SegMsg{} }
func (m *Key2SegMsg) String() string { return proto.CompactTextString(m) }
func (*Key2SegMsg) ProtoMessage()    {}
func (*Key2SegMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0802b3a25fb57244, []int{46}
}

func (m *Key2SegMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key2SegMsg.Unmarshal(m, b)
}
func (m *Key2SegMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key2SegMsg.Marshal(b, m, deterministic)
}
func (m *Key2SegMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key2SegMsg.Merge(m, src)
}
func (m *Key2SegMsg) XXX_Size() int {
	return xxx_messageInfo_Key2SegMsg.Size(m)
}
func (m *Key2SegMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_Key2SegMsg.DiscardUnknown(m)
}

var xxx_messageInfo_Key2SegMsg proto.InternalMessageInfo

func (m *Key2SegMsg) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Key2SegMsg) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Key2SegMsg) GetSegmentId() []int64 {
	if m != nil {
		return m.SegmentId
	}
	return nil
}

func init() {
	proto.RegisterEnum("milvus.grpc.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("milvus.grpc.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("milvus.grpc.CompareOperator", CompareOperator_name, CompareOperator_value)
	proto.RegisterEnum("milvus.grpc.Occur", Occur_name, Occur_value)
	proto.RegisterEnum("milvus.grpc.OpType", OpType_name, OpType_value)
	proto.RegisterEnum("milvus.grpc.SyncType", SyncType_name, SyncType_value)
	proto.RegisterType((*Status)(nil), "milvus.grpc.Status")
	proto.RegisterType((*KeyValuePair)(nil), "milvus.grpc.KeyValuePair")
	proto.RegisterType((*CollectionName)(nil), "milvus.grpc.CollectionName")
	proto.RegisterType((*CollectionNameList)(nil), "milvus.grpc.CollectionNameList")
	proto.RegisterType((*FieldName)(nil), "milvus.grpc.FieldName")
	proto.RegisterType((*Mapping)(nil), "milvus.grpc.Mapping")
	proto.RegisterType((*MappingList)(nil), "milvus.grpc.MappingList")
	proto.RegisterType((*PartitionParam)(nil), "milvus.grpc.PartitionParam")
	proto.RegisterType((*PartitionList)(nil), "milvus.grpc.PartitionList")
	proto.RegisterType((*VectorRowRecord)(nil), "milvus.grpc.VectorRowRecord")
	proto.RegisterType((*EntityIds)(nil), "milvus.grpc.EntityIds")
	proto.RegisterType((*VectorRecord)(nil), "milvus.grpc.VectorRecord")
	proto.RegisterType((*VectorParam)(nil), "milvus.grpc.VectorParam")
	proto.RegisterType((*FieldMeta)(nil), "milvus.grpc.FieldMeta")
	proto.RegisterType((*Schema)(nil), "milvus.grpc.Schema")
	proto.RegisterType((*RowData)(nil), "milvus.grpc.RowData")
	proto.RegisterType((*InsertParam)(nil), "milvus.grpc.InsertParam")
	proto.RegisterType((*SearchParam)(nil), "milvus.grpc.SearchParam")
	proto.RegisterType((*SearchInSegmentParam)(nil), "milvus.grpc.SearchInSegmentParam")
	proto.RegisterType((*Entities)(nil), "milvus.grpc.Entities")
	proto.RegisterType((*QueryResult)(nil), "milvus.grpc.QueryResult")
	proto.RegisterType((*StringReply)(nil), "milvus.grpc.StringReply")
	proto.RegisterType((*BoolReply)(nil), "milvus.grpc.BoolReply")
	proto.RegisterType((*CollectionRowCount)(nil), "milvus.grpc.CollectionRowCount")
	proto.RegisterType((*Command)(nil), "milvus.grpc.Command")
	proto.RegisterType((*IndexParam)(nil), "milvus.grpc.IndexParam")
	proto.RegisterType((*FlushParam)(nil), "milvus.grpc.FlushParam")
	proto.RegisterType((*CompactParam)(nil), "milvus.grpc.CompactParam")
	proto.RegisterType((*DeleteByIDParam)(nil), "milvus.grpc.DeleteByIDParam")
	proto.RegisterType((*CollectionInfo)(nil), "milvus.grpc.CollectionInfo")
	proto.RegisterType((*GetEntityIDsParam)(nil), "milvus.grpc.GetEntityIDsParam")
	proto.RegisterType((*EntityIdentity)(nil), "milvus.grpc.EntityIdentity")
	proto.RegisterType((*VectorFieldParam)(nil), "milvus.grpc.VectorFieldParam")
	proto.RegisterType((*FieldType)(nil), "milvus.grpc.FieldType")
	proto.RegisterType((*FieldParam)(nil), "milvus.grpc.FieldParam")
	proto.RegisterType((*VectorFieldRecord)(nil), "milvus.grpc.VectorFieldRecord")
	proto.RegisterType((*TermQuery)(nil), "milvus.grpc.TermQuery")
	proto.RegisterType((*CompareExpr)(nil), "milvus.grpc.CompareExpr")
	proto.RegisterType((*RangeQuery)(nil), "milvus.grpc.RangeQuery")
	proto.RegisterType((*VectorQuery)(nil), "milvus.grpc.VectorQuery")
	proto.RegisterType((*BooleanQuery)(nil), "milvus.grpc.BooleanQuery")
	proto.RegisterType((*GeneralQuery)(nil), "milvus.grpc.GeneralQuery")
	proto.RegisterType((*SearchParamPB)(nil), "milvus.grpc.SearchParamPB")
	proto.RegisterType((*InsertOrDeleteMsg)(nil), "milvus.grpc.InsertOrDeleteMsg")
	proto.RegisterType((*SearchMsg)(nil), "milvus.grpc.SearchMsg")
	proto.RegisterType((*TimeSyncMsg)(nil), "milvus.grpc.TimeSyncMsg")
	proto.RegisterType((*Key2SegMsg)(nil), "milvus.grpc.Key2SegMsg")
}

func init() {
	proto.RegisterFile("pkg/master/grpc/message/message.proto", fileDescriptor_0802b3a25fb57244)
}

var fileDescriptor_0802b3a25fb57244 = []byte{
	// 2900 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x3a, 0xdd, 0x72, 0xdb, 0xc6,
	0xd5, 0x04, 0x49, 0x91, 0xc4, 0x01, 0x25, 0x41, 0x6b, 0xd9, 0x96, 0xed, 0xf8, 0xb3, 0x83, 0x6f,
	0xda, 0x3a, 0xee, 0x8c, 0xed, 0x30, 0xa9, 0xed, 0xd6, 0x49, 0x1a, 0xfe, 0x40, 0x12, 0x6a, 0x8a,
	0x94, 0x97, 0x90, 0x9d, 0x9f, 0xe9, 0xa0, 0x10, 0xb1, 0xa6, 0xd1, 0x10, 0x00, 0x0b, 0x80, 0x92,
	0xd9, 0xcb, 0xde, 0xb7, 0x33, 0xbd, 0xec, 0x4c, 0x6f, 0xda, 0x47, 0x68, 0xdf, 0xa2, 0x2f, 0x90,
	0x8b, 0xcc, 0xf4, 0xb2, 0xd3, 0xc7, 0xe8, 0xec, 0x0f, 0x48, 0x80, 0x22, 0x65, 0x31, 0x6a, 0xaf,
	0xb8, 0x38, 0xbb, 0xe7, 0xec, 0xf9, 0xdf, 0x73, 0x76, 0x09, 0x3f, 0x18, 0x7d, 0x33, 0x78, 0xe8,
	0xd9, 0x51, 0x4c, 0xc2, 0x87, 0x83, 0x70, 0xd4, 0x7f, 0xe8, 0x91, 0x28, 0xb2, 0x07, 0x24, 0xf9,
	0x7d, 0x30, 0x0a, 0x83, 0x38, 0x40, 0x8a, 0xe7, 0x0e, 0x4f, 0xc6, 0xd1, 0x03, 0xba, 0x44, 0x7b,
	0x05, 0xa5, 0x5e, 0x6c, 0xc7, 0xe3, 0x08, 0xfd, 0x04, 0x80, 0x84, 0x61, 0x10, 0x5a, 0xfd, 0xc0,
	0x21, 0x3b, 0xd2, 0x5d, 0xe9, 0xde, 0x46, 0xed, 0xda, 0x83, 0xd4, 0xda, 0x07, 0x3a, 0x9d, 0x6e,
	0x06, 0x0e, 0xc1, 0x32, 0x49, 0x86, 0xe8, 0x1a, 0x94, 0x42, 0x62, 0x47, 0x81, 0xbf, 0x93, 0xbf,
	0x2b, 0xdd, 0x93, 0xb1, 0xf8, 0xd2, 0x1e, 0x43, 0xf5, 0x39, 0x99, 0xbc, 0xb4, 0x87, 0x63, 0x72,
	0x68, 0xbb, 0x21, 0x52, 0xa1, 0xf0, 0x0d, 0x99, 0x30, 0xba, 0x32, 0xa6, 0x43, 0xb4, 0x0d, 0x6b,
	0x27, 0x74, 0x5a, 0x20, 0xf2, 0x0f, 0xed, 0xa7, 0xb0, 0xd1, 0x0c, 0x86, 0x43, 0xd2, 0x8f, 0xdd,
	0xc0, 0xef, 0xd8, 0x1e, 0x41, 0x3f, 0x82, 0xcd, 0xfe, 0x14, 0x62, 0xf9, 0xb6, 0x47, 0x04, 0x95,
	0x8d, 0x7e, 0x66, 0xa1, 0x36, 0x04, 0x94, 0x45, 0x6d, 0xbb, 0x51, 0x8c, 0x7e, 0x0c, 0xa5, 0x88,
	0x49, 0xc8, 0xb0, 0x94, 0xda, 0x95, 0x8c, 0x4c, 0x5c, 0x78, 0x2c, 0x96, 0xa0, 0x0f, 0x40, 0x9d,
	0xdb, 0x2b, 0xda, 0xc9, 0xdf, 0x2d, 0xdc, 0x93, 0xf1, 0x66, 0x76, 0xb3, 0x48, 0xeb, 0x81, 0xbc,
	0xeb, 0x92, 0xa1, 0xb3, 0x12, 0x8f, 0xe8, 0x36, 0xc0, 0x6b, 0x8a, 0xc5, 0xd7, 0x70, 0xc9, 0xe5,
	0xd7, 0x09, 0x1d, 0xed, 0x1f, 0x12, 0x94, 0x0f, 0xec, 0xd1, 0xc8, 0xf5, 0x07, 0xab, 0x31, 0xbe,
	0x80, 0x81, 0xfc, 0x42, 0x06, 0x28, 0xd5, 0xfe, 0x1b, 0xe2, 0xd9, 0x3b, 0x85, 0x45, 0x54, 0xd9,
	0x14, 0x16, 0x4b, 0xd0, 0x27, 0x50, 0x25, 0x6f, 0xe3, 0xd0, 0xb6, 0x46, 0x76, 0x68, 0x7b, 0xd1,
	0x4e, 0xf1, 0x6e, 0xe1, 0x9e, 0x52, 0xbb, 0x91, 0x41, 0x49, 0x5b, 0x19, 0x2b, 0x6c, 0xf9, 0x21,
	0x5b, 0xad, 0x45, 0xa0, 0x08, 0x59, 0x56, 0x37, 0xc4, 0x13, 0xa8, 0x7a, 0x1c, 0xd7, 0x1a, 0xba,
	0x51, 0xcc, 0x8c, 0xa0, 0xd4, 0xb6, 0x33, 0x28, 0x82, 0x38, 0x56, 0xbc, 0xd9, 0x2e, 0xda, 0x73,
	0xd8, 0x38, 0xb4, 0xc3, 0xd8, 0xa5, 0x02, 0x33, 0x3e, 0x2e, 0x6e, 0x1b, 0x15, 0x0a, 0xb1, 0x3d,
	0x10, 0x7a, 0xa3, 0x43, 0x6d, 0x08, 0xeb, 0x53, 0x62, 0xab, 0xcb, 0xf0, 0x00, 0xae, 0x8c, 0x12,
	0x6c, 0x2b, 0xb6, 0x07, 0x96, 0x1d, 0x86, 0xf6, 0x44, 0xf8, 0xd3, 0xd6, 0x74, 0xca, 0xb4, 0x07,
	0x75, 0x3a, 0xa1, 0xbd, 0x80, 0xcd, 0x97, 0xa4, 0x1f, 0x07, 0x21, 0x0e, 0x4e, 0x31, 0xe9, 0x07,
	0xa1, 0xc3, 0xdc, 0x65, 0x18, 0xd8, 0xb1, 0xe5, 0xd8, 0xb1, 0xbd, 0x23, 0xdd, 0x2d, 0xdc, 0xcb,
	0x63, 0x99, 0x41, 0x5a, 0x76, 0x6c, 0xa3, 0x3b, 0xa0, 0x1c, 0xbb, 0xbe, 0x1d, 0x4e, 0xf8, 0x3c,
	0xe5, 0xbc, 0x8a, 0x81, 0x83, 0xe8, 0x02, 0xed, 0x57, 0x20, 0xeb, 0x7e, 0xec, 0xc6, 0x13, 0xc3,
	0x89, 0x56, 0x63, 0xfe, 0x87, 0xb0, 0x49, 0x18, 0xa6, 0xe5, 0x3a, 0x29, 0xc6, 0x0b, 0x78, 0x9d,
	0x08, 0x82, 0x9c, 0xe9, 0x5d, 0xa8, 0x0a, 0xa6, 0x39, 0xc7, 0x8f, 0xa1, 0x1c, 0xb2, 0x51, 0xc4,
	0xd8, 0x55, 0x6a, 0xef, 0x65, 0x76, 0x99, 0x13, 0x10, 0x27, 0x8b, 0xb5, 0xaf, 0x41, 0xe1, 0x73,
	0xdc, 0x68, 0x08, 0x8a, 0xbf, 0xa6, 0x49, 0x85, 0x5b, 0x8a, 0x8d, 0xd1, 0x53, 0x80, 0x30, 0x38,
	0xb5, 0x38, 0x06, 0x13, 0x76, 0xde, 0x17, 0xd3, 0x9c, 0x60, 0x39, 0x4c, 0x76, 0xd1, 0x06, 0x22,
	0x56, 0x0f, 0x48, 0x6c, 0xcf, 0x85, 0xa0, 0x34, 0x17, 0x82, 0xe8, 0x03, 0x28, 0xc6, 0x93, 0x11,
	0x0f, 0x9f, 0x8d, 0xda, 0xd5, 0x0c, 0x7d, 0xaa, 0x53, 0x73, 0x32, 0x22, 0x98, 0x2d, 0xa1, 0x0e,
	0xe3, 0xb8, 0x1e, 0x0b, 0xa4, 0x02, 0xa6, 0x43, 0xad, 0x0e, 0x25, 0x1e, 0x42, 0xe8, 0x09, 0x28,
	0x7c, 0x17, 0x8f, 0xc4, 0x76, 0xa2, 0x8b, 0x6c, 0x3e, 0x9d, 0xb2, 0x84, 0x39, 0x43, 0x74, 0x18,
	0x69, 0xb7, 0xa1, 0x8c, 0x83, 0x53, 0x66, 0x5e, 0x04, 0xc5, 0xe3, 0x61, 0x70, 0xcc, 0x78, 0xac,
	0x62, 0x36, 0xd6, 0xfe, 0x92, 0x07, 0xc5, 0xf0, 0x23, 0x12, 0xc6, 0x2b, 0x7a, 0xf7, 0x2c, 0xf0,
	0xf3, 0xef, 0x0e, 0xfc, 0x0f, 0x81, 0x6a, 0x2f, 0xe2, 0x6e, 0x55, 0x58, 0x10, 0x7b, 0x82, 0x45,
	0x5c, 0xa1, 0xcb, 0x18, 0xb3, 0x0b, 0x1c, 0xa6, 0xb8, 0xc0, 0x61, 0xd0, 0xff, 0xc3, 0x7a, 0x26,
	0x2a, 0x76, 0xd6, 0x18, 0xbb, 0xd5, 0x74, 0x3c, 0x9c, 0x49, 0x3c, 0xa5, 0x95, 0x12, 0xcf, 0xbf,
	0x25, 0x50, 0x7a, 0xc4, 0x0e, 0xfb, 0x6f, 0x56, 0xd4, 0xd1, 0x33, 0xa8, 0x9e, 0x30, 0x17, 0xe2,
	0xfb, 0x8a, 0xac, 0xb3, 0xb3, 0xc0, 0xc7, 0x18, 0x61, 0xac, 0x9c, 0xa4, 0x5c, 0x96, 0x7a, 0x43,
	0x34, 0x64, 0xde, 0x20, 0x63, 0x3a, 0x3c, 0x2b, 0x6a, 0x91, 0x85, 0xfe, 0xf9, 0xa2, 0xae, 0xad,
	0x24, 0xea, 0x29, 0x6c, 0x73, 0x49, 0x0d, 0xbf, 0x47, 0x06, 0x1e, 0xf1, 0x85, 0x5b, 0x68, 0xb0,
	0xfe, 0xda, 0x1d, 0x92, 0x99, 0x2d, 0x24, 0xb6, 0xb5, 0x42, 0x81, 0x89, 0x25, 0x9e, 0x41, 0x35,
	0x62, 0xb8, 0x53, 0x69, 0xa5, 0x33, 0xd2, 0xa6, 0xd4, 0x88, 0x95, 0x68, 0xf6, 0xa1, 0xfd, 0x49,
	0x82, 0x0a, 0x4b, 0x2d, 0x2e, 0x59, 0x31, 0xb3, 0xa8, 0x50, 0x70, 0x9d, 0x48, 0x64, 0x13, 0x3a,
	0x44, 0xb7, 0x40, 0x3e, 0xb1, 0x87, 0xae, 0x63, 0x85, 0xc1, 0x29, 0xf3, 0xb6, 0x0a, 0xae, 0x30,
	0x00, 0x0e, 0x4e, 0xb3, 0xae, 0x58, 0xbc, 0x88, 0x2b, 0x6a, 0x7f, 0xcb, 0x83, 0xf2, 0x62, 0x4c,
	0xc2, 0x09, 0x26, 0xd1, 0x78, 0xb8, 0x62, 0xd6, 0xfe, 0x10, 0x2a, 0x44, 0xc8, 0x25, 0x34, 0x92,
	0xcd, 0x01, 0x89, 0xd0, 0x78, 0xba, 0x0c, 0x5d, 0x87, 0x32, 0x4d, 0x4c, 0xfe, 0x38, 0xc9, 0x05,
	0xa5, 0x30, 0x38, 0xed, 0x8c, 0x3d, 0x5a, 0x1c, 0x45, 0xfd, 0x20, 0x24, 0xfc, 0xe4, 0xcc, 0x63,
	0xf1, 0x85, 0xde, 0x03, 0xd9, 0x71, 0xa3, 0xd8, 0xf6, 0xfb, 0x84, 0x1b, 0x3c, 0x8f, 0x67, 0x80,
	0xcb, 0x39, 0x3f, 0xba, 0x01, 0x95, 0xdf, 0x50, 0xd9, 0x2d, 0xd7, 0xd9, 0x29, 0x33, 0x6e, 0xca,
	0xec, 0xdb, 0x70, 0xa8, 0x9e, 0xfb, 0x43, 0x97, 0xf8, 0x31, 0x9d, 0xab, 0xb0, 0xb9, 0x0a, 0x07,
	0x18, 0x8e, 0xf6, 0x4b, 0x50, 0x7a, 0x71, 0x48, 0xcf, 0x53, 0x32, 0x1a, 0x4e, 0x56, 0xd3, 0xd9,
	0xfb, 0x50, 0x8d, 0x18, 0xae, 0x15, 0x52, 0x64, 0x71, 0x84, 0x2a, 0xd1, 0x8c, 0x9e, 0xf6, 0x0a,
	0xe4, 0x46, 0x10, 0x0c, 0xbf, 0x07, 0xf1, 0xdb, 0x00, 0xc7, 0x41, 0x30, 0x4c, 0x91, 0xae, 0x60,
	0xf9, 0x38, 0xa1, 0xa5, 0x45, 0xe9, 0xaa, 0x0f, 0x07, 0xa7, 0xcd, 0x60, 0xec, 0xaf, 0x68, 0xf2,
	0x47, 0xb0, 0x9d, 0xca, 0x0f, 0xd4, 0x94, 0x7d, 0x4a, 0x84, 0xed, 0x55, 0xc0, 0xa8, 0x7f, 0x86,
	0xbc, 0x76, 0x0b, 0xca, 0xcd, 0xc0, 0xf3, 0x6c, 0xdf, 0xa1, 0xee, 0xdc, 0xf7, 0x9c, 0xa4, 0xb0,
	0xed, 0x7b, 0x8e, 0xf6, 0x4f, 0x09, 0xc0, 0xf0, 0x1d, 0xf2, 0x96, 0x87, 0xe2, 0xff, 0xa6, 0x8e,
	0xcb, 0x9e, 0x62, 0x85, 0xf9, 0x53, 0xec, 0x36, 0x80, 0x4b, 0x59, 0xe0, 0xd3, 0x45, 0x3e, 0xcd,
	0x20, 0x6c, 0xfa, 0x72, 0x49, 0xe7, 0x73, 0x80, 0xdd, 0xe1, 0x38, 0x12, 0xd9, 0xb5, 0x06, 0x57,
	0xe7, 0x58, 0xce, 0xa4, 0x9c, 0x2b, 0x59, 0xc6, 0x79, 0xd5, 0x70, 0x04, 0xd5, 0x66, 0xe0, 0x8d,
	0xec, 0xfe, 0xaa, 0xa7, 0xd8, 0x7b, 0x20, 0xc7, 0x6f, 0x42, 0x12, 0xbd, 0x09, 0x86, 0xbc, 0x04,
	0x90, 0xf0, 0x0c, 0xa0, 0x1d, 0xc1, 0x66, 0x8b, 0x0c, 0x49, 0x4c, 0x1a, 0x13, 0xa3, 0xb5, 0x22,
	0xe5, 0x1b, 0x50, 0x99, 0xab, 0x74, 0xca, 0xae, 0xa8, 0x71, 0xbe, 0x4a, 0xf7, 0x24, 0x86, 0xff,
	0x3a, 0x58, 0xcd, 0xa6, 0xb7, 0x40, 0xa6, 0xf5, 0x8b, 0xe5, 0xfa, 0xaf, 0x03, 0x61, 0xcd, 0x0a,
	0x05, 0x50, 0x4a, 0xda, 0xd7, 0xb0, 0xb5, 0x47, 0x62, 0x51, 0xa4, 0xb5, 0xa2, 0x15, 0x99, 0xbe,
	0x0d, 0x10, 0xf1, 0xb4, 0x4f, 0x43, 0x9a, 0xfb, 0xab, 0x2c, 0x20, 0x86, 0xa3, 0x8d, 0x61, 0x23,
	0x29, 0xff, 0xf8, 0x21, 0xfc, 0xdf, 0x50, 0x07, 0xad, 0x3a, 0x67, 0xae, 0x17, 0xb1, 0x84, 0x2d,
	0x8b, 0x12, 0x86, 0xb7, 0x46, 0x8f, 0x40, 0xe5, 0xa7, 0x24, 0xab, 0x70, 0xb8, 0x48, 0x2c, 0xe5,
	0x79, 0xc4, 0x8f, 0x5c, 0x51, 0xd5, 0x15, 0xf0, 0x0c, 0xa0, 0xfd, 0x41, 0x12, 0x15, 0x1a, 0xad,
	0xae, 0xd0, 0xc7, 0x20, 0xd3, 0x6c, 0x6f, 0xb1, 0x3a, 0x4c, 0x3a, 0xa7, 0x0e, 0xdb, 0xcf, 0xe1,
	0x8a, 0x23, 0xc6, 0xa8, 0x71, 0xe6, 0xf0, 0xa6, 0x96, 0xb9, 0xbd, 0xe0, 0xf0, 0x9e, 0xb1, 0xb5,
	0x9f, 0xcb, 0x9c, 0xe1, 0x8d, 0xb2, 0xe8, 0x49, 0xb5, 0x6f, 0x25, 0x80, 0x14, 0xf7, 0x1b, 0x90,
	0x77, 0x79, 0x8c, 0x17, 0x71, 0xde, 0x75, 0x68, 0x65, 0x96, 0x8a, 0x4d, 0x36, 0x9e, 0x16, 0x8e,
	0x85, 0x77, 0x17, 0x8e, 0x9f, 0x40, 0x95, 0x47, 0xe7, 0x85, 0xfb, 0x2a, 0x77, 0x9a, 0x4f, 0xa2,
	0x4b, 0x06, 0xef, 0x1e, 0x6c, 0xa5, 0xb4, 0x20, 0xaa, 0xf6, 0x5a, 0xd2, 0x8b, 0x5f, 0xa4, 0x66,
	0x17, 0x2a, 0xfa, 0x4e, 0x02, 0xd9, 0x24, 0xa1, 0xc7, 0x4e, 0xda, 0x77, 0x55, 0xd5, 0xb7, 0x40,
	0x76, 0xfd, 0xd8, 0x4a, 0x1a, 0x7e, 0xea, 0x4f, 0x15, 0xd7, 0x8f, 0x19, 0x8f, 0xf4, 0xf8, 0x70,
	0x82, 0xf1, 0xf1, 0x90, 0x88, 0x79, 0xea, 0x51, 0x12, 0x56, 0x38, 0x8c, 0x2f, 0xe1, 0x25, 0xc2,
	0x98, 0xb0, 0x43, 0xb6, 0xc8, 0x8f, 0x2e, 0x06, 0xa0, 0xc7, 0xec, 0x36, 0xac, 0x1d, 0x07, 0x41,
	0x14, 0xb3, 0x52, 0x32, 0x8f, 0xf9, 0xc7, 0x25, 0x6b, 0x48, 0x1b, 0x14, 0x96, 0xa1, 0x42, 0xa2,
	0xbf, 0x1d, 0x85, 0xe8, 0x29, 0x54, 0x82, 0x11, 0x09, 0xed, 0x38, 0x08, 0x85, 0x47, 0x66, 0x75,
	0x24, 0xd6, 0x76, 0xc5, 0x1a, 0x3c, 0x5d, 0x8d, 0x76, 0xa0, 0xcc, 0xc6, 0xbe, 0x23, 0xbc, 0x25,
	0xf9, 0xd4, 0xfe, 0x2e, 0x01, 0x60, 0xdb, 0x1f, 0x90, 0x0b, 0x69, 0xb0, 0x96, 0xa6, 0x73, 0xb6,
	0x2c, 0x4d, 0x31, 0x3b, 0xdd, 0x61, 0xa6, 0x98, 0xc2, 0x79, 0x8a, 0x59, 0xad, 0xab, 0xff, 0x56,
	0x4a, 0x3a, 0xb5, 0x0b, 0xb1, 0x7d, 0x07, 0x14, 0x5e, 0x8e, 0x70, 0x46, 0xf2, 0x8c, 0x11, 0x60,
	0xa0, 0x06, 0xe3, 0x26, 0xd5, 0x30, 0x16, 0x56, 0x68, 0x18, 0x69, 0x08, 0xc6, 0xc1, 0xe8, 0x1b,
	0xe1, 0x0c, 0x6c, 0x7c, 0xc9, 0xc8, 0x78, 0x0b, 0x55, 0x5a, 0xa2, 0x10, 0xdb, 0xe7, 0x92, 0xdd,
	0x83, 0xb5, 0xa0, 0xdf, 0x1f, 0x27, 0x06, 0x47, 0x19, 0x32, 0x5d, 0x3a, 0x83, 0xf9, 0x02, 0xf4,
	0x19, 0xac, 0x0f, 0x88, 0x4f, 0x42, 0x7b, 0x68, 0x31, 0xc9, 0x84, 0x85, 0xb2, 0x1b, 0xef, 0xf1,
	0x15, 0xbc, 0x30, 0xad, 0x0e, 0x52, 0x5f, 0xda, 0xef, 0xf3, 0x50, 0x4d, 0x4f, 0xa3, 0xcf, 0x61,
	0xfd, 0x98, 0xb3, 0x22, 0x08, 0x4a, 0x0b, 0xba, 0xdd, 0x34, 0xb3, 0xfb, 0x39, 0x5c, 0x3d, 0x4e,
	0x33, 0xff, 0x04, 0x20, 0x26, 0xa1, 0x37, 0xe5, 0x47, 0x3a, 0xd3, 0x7e, 0x4e, 0x63, 0x77, 0x3f,
	0x87, 0xe5, 0x78, 0x1a, 0xc8, 0x3f, 0x03, 0x25, 0xa4, 0x4e, 0x29, 0x30, 0xf9, 0x2d, 0xd1, 0xf5,
	0x6c, 0xc5, 0x3d, 0x75, 0xda, 0xfd, 0x1c, 0x86, 0x70, 0xe6, 0xc2, 0x9f, 0x4e, 0x53, 0x30, 0x47,
	0x2e, 0x2e, 0xe8, 0x28, 0x52, 0xbe, 0x33, 0xcb, 0xbe, 0xec, 0x93, 0x66, 0x5f, 0x86, 0xa7, 0xfd,
	0x4b, 0x82, 0xf5, 0x54, 0xe7, 0x71, 0xd8, 0xb8, 0xf8, 0xb9, 0xb5, 0xe2, 0xa5, 0xcb, 0x59, 0xd3,
	0x15, 0x16, 0x68, 0x7a, 0xb9, 0xe9, 0x2e, 0x19, 0x4c, 0xbf, 0x2b, 0xc0, 0x16, 0xef, 0xe6, 0xbb,
	0x21, 0xaf, 0x5c, 0x0e, 0xa2, 0xc1, 0xc5, 0x85, 0xcd, 0xf4, 0x46, 0xdc, 0xc6, 0xef, 0x6a, 0xd3,
	0x55, 0x28, 0x8c, 0x5d, 0x27, 0xb9, 0xb3, 0x18, 0xbb, 0xce, 0xa2, 0x2e, 0xf5, 0x6c, 0x43, 0x4e,
	0xeb, 0x2e, 0xd7, 0x23, 0x51, 0x6c, 0x7b, 0x23, 0x96, 0x66, 0x8b, 0x78, 0x06, 0x98, 0x2b, 0x43,
	0x4a, 0x73, 0x65, 0x08, 0x9d, 0xee, 0xbf, 0xb1, 0x7d, 0x9f, 0x0c, 0x67, 0x4d, 0x89, 0x2c, 0x20,
	0x06, 0x65, 0x20, 0x1f, 0x8c, 0x58, 0x3f, 0xb2, 0x31, 0x57, 0x48, 0x75, 0x47, 0xec, 0xd0, 0xcc,
	0x07, 0xa3, 0x6c, 0xef, 0x22, 0x67, 0x7b, 0x97, 0x33, 0x46, 0x80, 0x95, 0x8c, 0xf0, 0xe7, 0x3c,
	0xc8, 0xdc, 0xdb, 0x56, 0x52, 0x7e, 0x2a, 0x71, 0x71, 0xd5, 0x5f, 0x30, 0x71, 0x9d, 0xd1, 0x77,
	0x61, 0x81, 0xbe, 0x85, 0x99, 0x8a, 0x33, 0x33, 0x9d, 0x6f, 0x81, 0x8c, 0x7a, 0x4a, 0xef, 0x50,
	0x4f, 0x79, 0xc5, 0xb4, 0xa8, 0x98, 0xae, 0x47, 0x7a, 0x13, 0xbf, 0x4f, 0xf5, 0x73, 0x1d, 0xca,
	0x23, 0x42, 0x42, 0xcb, 0x70, 0x44, 0x19, 0x57, 0xa2, 0x9f, 0x06, 0x63, 0xd0, 0x9c, 0x32, 0x98,
	0xe7, 0x0c, 0x4e, 0x01, 0xa8, 0x06, 0x72, 0x34, 0xf1, 0xfb, 0xd6, 0xd2, 0x12, 0x89, 0xd2, 0x67,
	0xd6, 0xae, 0x44, 0x62, 0xa4, 0x7d, 0x0d, 0xf0, 0x9c, 0x4c, 0x6a, 0x3d, 0x32, 0xa0, 0x1b, 0x0b,
	0x95, 0x48, 0x4b, 0x54, 0x92, 0x3f, 0xdf, 0x29, 0x0b, 0xac, 0xe6, 0x98, 0x39, 0xe5, 0xfd, 0xbf,
	0x16, 0x41, 0x9e, 0xbe, 0x68, 0x20, 0x05, 0xca, 0xbd, 0xa3, 0x66, 0x53, 0xef, 0xf5, 0xd4, 0x1c,
	0xda, 0x06, 0xf5, 0xa8, 0xa3, 0x7f, 0x71, 0xa8, 0x37, 0x4d, 0xbd, 0x65, 0xe9, 0x18, 0x77, 0xb1,
	0x2a, 0x21, 0x04, 0x1b, 0xcd, 0x6e, 0xa7, 0xa3, 0x37, 0x4d, 0x6b, 0xb7, 0x6e, 0xb4, 0xf5, 0x96,
	0x9a, 0x47, 0x57, 0x61, 0xeb, 0x50, 0xc7, 0x07, 0x46, 0xaf, 0x67, 0x74, 0x3b, 0x56, 0x4b, 0xef,
	0x18, 0x7a, 0x4b, 0x2d, 0xa0, 0x1b, 0x70, 0xb5, 0xd9, 0x6d, 0xb7, 0xf5, 0xa6, 0x49, 0xc1, 0x9d,
	0xae, 0x69, 0xe9, 0x5f, 0x18, 0x3d, 0xb3, 0xa7, 0x16, 0x29, 0x6d, 0xa3, 0xdd, 0xd6, 0xf7, 0xea,
	0x6d, 0xab, 0x8e, 0xf7, 0x8e, 0x0e, 0xf4, 0x8e, 0xa9, 0xae, 0x51, 0x3a, 0x09, 0xb4, 0x65, 0x1c,
	0xe8, 0x1d, 0x4a, 0x4e, 0x2d, 0xa3, 0x6b, 0x80, 0x12, 0xb0, 0xd1, 0x69, 0xe9, 0x5f, 0x58, 0xe6,
	0x97, 0x87, 0xba, 0x5a, 0x41, 0xb7, 0xe0, 0x7a, 0x02, 0x4f, 0xef, 0x53, 0x3f, 0xd0, 0x55, 0x19,
	0xa9, 0x50, 0x4d, 0x26, 0xcd, 0xee, 0xe1, 0x73, 0x15, 0xd2, 0xd4, 0x71, 0xf7, 0x15, 0xd6, 0x9b,
	0x5d, 0xdc, 0x52, 0x95, 0x34, 0xf8, 0xa5, 0xde, 0x34, 0xbb, 0xd8, 0x32, 0x5a, 0x6a, 0x95, 0x32,
	0x9f, 0x80, 0x7b, 0x7a, 0x1d, 0x37, 0xf7, 0x2d, 0xac, 0xf7, 0x8e, 0xda, 0xa6, 0xba, 0x4e, 0x55,
	0xb0, 0x6b, 0xb4, 0x75, 0x26, 0xd1, 0x6e, 0xf7, 0xa8, 0xd3, 0x52, 0x37, 0xd0, 0x26, 0x28, 0x07,
	0xba, 0x59, 0x4f, 0x74, 0xb2, 0x49, 0xf7, 0x6f, 0xd6, 0x9b, 0xfb, 0x7a, 0x02, 0x51, 0xd1, 0x0e,
	0x6c, 0x37, 0xeb, 0x1d, 0x8a, 0xd4, 0xc4, 0x7a, 0xdd, 0xd4, 0xad, 0xdd, 0x6e, 0xbb, 0xa5, 0x63,
	0x75, 0x8b, 0x0a, 0x38, 0x37, 0x63, 0xb4, 0x75, 0x15, 0xa5, 0x30, 0x5a, 0x7a, 0x5b, 0x9f, 0x61,
	0x5c, 0x49, 0x61, 0x24, 0x33, 0x14, 0x63, 0x9b, 0x0a, 0xd3, 0x38, 0x32, 0xda, 0x2d, 0xa1, 0x28,
	0x6e, 0xb4, 0xab, 0x68, 0x0b, 0xd6, 0x13, 0x61, 0x3a, 0x6d, 0xa3, 0x67, 0xaa, 0xd7, 0xd0, 0x75,
	0xb8, 0x92, 0x80, 0x0e, 0x74, 0x13, 0x1b, 0x4d, 0xae, 0xd5, 0xeb, 0x74, 0x6d, 0xf7, 0xc8, 0xb4,
	0xba, 0xbb, 0xd6, 0x81, 0x7e, 0xd0, 0xc5, 0x5f, 0xaa, 0x3b, 0xf7, 0xff, 0x28, 0x41, 0x25, 0xa9,
	0xdd, 0x51, 0x05, 0x8a, 0x9d, 0x6e, 0x47, 0x57, 0x73, 0x74, 0xd4, 0xe8, 0x76, 0xdb, 0xaa, 0x44,
	0x47, 0x46, 0xc7, 0x7c, 0xaa, 0xe6, 0x91, 0x0c, 0x6b, 0x46, 0xc7, 0xfc, 0xf0, 0xb1, 0x5a, 0x10,
	0xc3, 0x8f, 0x6a, 0x6a, 0x51, 0x0c, 0x1f, 0x7f, 0xac, 0xae, 0xd1, 0xe1, 0x6e, 0xbb, 0x5b, 0x37,
	0x55, 0x40, 0x00, 0xa5, 0x56, 0xf7, 0xa8, 0xd1, 0xd6, 0x55, 0x85, 0x8e, 0x7b, 0x26, 0x36, 0x3a,
	0x7b, 0xea, 0x36, 0xe5, 0x40, 0x58, 0xa2, 0x61, 0x74, 0xea, 0xf8, 0x4b, 0xd5, 0xa1, 0xda, 0x14,
	0x20, 0x8e, 0x4c, 0xee, 0x37, 0x61, 0x73, 0xae, 0xda, 0x44, 0x25, 0xc8, 0xb7, 0x4d, 0x35, 0x87,
	0xca, 0x50, 0x68, 0x9b, 0xba, 0x2a, 0x51, 0x80, 0xfe, 0x42, 0xcd, 0xd3, 0xdf, 0x3d, 0x53, 0x2d,
	0xd0, 0x89, 0x3d, 0x53, 0x57, 0x8b, 0x14, 0xd0, 0xd1, 0xd5, 0xb5, 0xfb, 0x4f, 0x61, 0x8d, 0x55,
	0x30, 0xd4, 0xf1, 0x8d, 0xce, 0xcb, 0x7a, 0xdb, 0x68, 0x71, 0xb9, 0x0e, 0x8e, 0x7a, 0xa6, 0x2a,
	0x31, 0xae, 0xf6, 0xbb, 0x47, 0x6d, 0xea, 0xe4, 0x55, 0xa8, 0x50, 0x28, 0xb5, 0xba, 0x5a, 0xb8,
	0x7f, 0x17, 0x4a, 0x3c, 0x2d, 0xd3, 0x35, 0x46, 0xa7, 0xa7, 0x63, 0xba, 0x33, 0x95, 0x88, 0xd9,
	0x43, 0x95, 0xee, 0xdf, 0x81, 0x4a, 0x12, 0xcc, 0x94, 0x22, 0xd6, 0xeb, 0x94, 0xb6, 0x0c, 0x6b,
	0xaf, 0xb0, 0x41, 0x17, 0xd4, 0xbe, 0x5b, 0x87, 0xf5, 0x03, 0x16, 0xfa, 0x3d, 0x12, 0x9e, 0xb8,
	0x7d, 0x82, 0x7e, 0x0e, 0x6a, 0x33, 0x24, 0x76, 0x4c, 0x66, 0x7d, 0x36, 0x5a, 0xf8, 0xd8, 0x73,
	0x73, 0x51, 0xa7, 0xad, 0xe5, 0xd0, 0x2e, 0xac, 0xef, 0xdb, 0x51, 0x0a, 0xfb, 0xd6, 0x5c, 0x75,
	0x9c, 0x4e, 0xdd, 0x37, 0xaf, 0x9d, 0xa9, 0xa3, 0xf8, 0x5d, 0x52, 0x0e, 0x19, 0x80, 0x5a, 0x24,
	0xea, 0x87, 0xee, 0x31, 0xb9, 0x28, 0xb1, 0x85, 0x7c, 0x6a, 0x39, 0xf4, 0x82, 0xda, 0x69, 0xec,
	0xc7, 0x17, 0xa5, 0x73, 0x67, 0xc9, 0xe4, 0xf4, 0xd2, 0x29, 0x87, 0x7e, 0x01, 0x9b, 0xbd, 0x37,
	0xf4, 0x33, 0x99, 0x8b, 0xe6, 0xb4, 0x24, 0x2e, 0xa5, 0x96, 0xd2, 0x4a, 0x5e, 0x45, 0xb5, 0x1c,
	0x3a, 0x04, 0x94, 0xa5, 0xc5, 0x2e, 0x36, 0xce, 0xe5, 0x70, 0xd9, 0x24, 0xbb, 0xc8, 0xc8, 0xa1,
	0x16, 0x6c, 0xb4, 0xc2, 0x60, 0x74, 0x51, 0x79, 0x97, 0x58, 0xf2, 0x53, 0x50, 0xb8, 0x2b, 0xb0,
	0x2b, 0x34, 0x94, 0xad, 0x3c, 0x67, 0xd7, 0x6a, 0xcb, 0xd0, 0x9b, 0xb0, 0x9e, 0x18, 0xf0, 0x1d,
	0x04, 0x96, 0x4d, 0x68, 0x39, 0xf4, 0x0c, 0x64, 0x2a, 0xc9, 0xf7, 0xe3, 0x40, 0x87, 0x4d, 0x2e,
	0xc0, 0xf4, 0xe9, 0x70, 0x4e, 0x0f, 0xd9, 0xf7, 0xc9, 0xe5, 0x64, 0xaa, 0xfb, 0x76, 0x74, 0x41,
	0x1a, 0xcb, 0x1d, 0xfa, 0x39, 0x6c, 0x50, 0x33, 0x4f, 0xd7, 0x47, 0xe7, 0x1b, 0xe5, 0xe6, 0xe2,
	0x5d, 0x84, 0xcf, 0x50, 0xe5, 0x86, 0xc1, 0xe8, 0x72, 0x82, 0x7d, 0x02, 0x25, 0x5e, 0xf2, 0xa2,
	0x9d, 0x39, 0xcd, 0x4e, 0x5f, 0xb5, 0xe6, 0xe4, 0x99, 0x3e, 0x61, 0x32, 0xb5, 0xac, 0x4f, 0xef,
	0xcb, 0x1a, 0x13, 0xa3, 0x35, 0xc7, 0x42, 0xf6, 0xba, 0xeb, 0xe6, 0xe2, 0xab, 0x7b, 0x2d, 0x87,
	0xf6, 0x69, 0xc3, 0x35, 0xbb, 0x76, 0x43, 0xff, 0x37, 0x57, 0xef, 0xcf, 0xdd, 0xc8, 0x9d, 0xc3,
	0xd0, 0x67, 0x50, 0xe2, 0xc5, 0x23, 0x5a, 0xfa, 0x72, 0x72, 0x33, 0x3b, 0x93, 0x7a, 0x9a, 0x60,
	0x71, 0xb8, 0x39, 0xf7, 0x82, 0x83, 0xde, 0x5f, 0x40, 0x28, 0xfb, 0xbe, 0x73, 0x2e, 0xc5, 0x27,
	0x50, 0x68, 0x7a, 0xce, 0x92, 0xcc, 0x30, 0xc7, 0x64, 0xea, 0x86, 0x3e, 0x87, 0xea, 0x00, 0xb3,
	0xeb, 0x53, 0x94, 0x2d, 0x67, 0xe7, 0xee, 0x55, 0x97, 0x19, 0x77, 0x0f, 0xb6, 0x0e, 0x43, 0x32,
	0x0c, 0x6c, 0xe7, 0x92, 0x69, 0xe0, 0x09, 0xac, 0xb1, 0x3b, 0xe6, 0xb9, 0xf0, 0x9b, 0xdd, 0x3b,
	0x2f, 0x43, 0x7c, 0xc6, 0xae, 0xe6, 0x47, 0x76, 0x3f, 0x46, 0x37, 0xce, 0xde, 0x90, 0x88, 0x0b,
	0xe7, 0x65, 0xc8, 0x0d, 0xa8, 0x08, 0xbb, 0x35, 0xd0, 0xcd, 0x65, 0xe6, 0x3c, 0x6c, 0x9c, 0xa7,
	0xfe, 0x46, 0xed, 0xab, 0x47, 0x03, 0x37, 0x7e, 0x33, 0x3e, 0x7e, 0xd0, 0x0f, 0xbc, 0x87, 0xfd,
	0xdf, 0x46, 0x8f, 0x1e, 0x3d, 0x79, 0x18, 0x8d, 0x4f, 0x86, 0xae, 0xf7, 0x70, 0xc9, 0x3f, 0x74,
	0x8e, 0x4b, 0xec, 0xaf, 0x39, 0x1f, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x56, 0x8b, 0xe9,
	0xc3, 0x23, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MilvusServiceClient is the client API for MilvusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MilvusServiceClient interface {
	//*
	// @brief This method is used to create collection
	//
	// @param CollectionSchema, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(ctx context.Context, in *Mapping, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to test collection existence.
	//
	// @param CollectionName, collection name is going to be tested.
	//
	// @return BoolReply
	HasCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Mapping, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionRowCount
	CountCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error)
	//*
	// @brief This method is used to list all collections.
	//
	// @param Command, dummy parameter.
	//
	// @return CollectionNameList
	ShowCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CollectionNameList, error)
	//*
	// @brief This method is used to get collection detail information.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionInfo
	ShowCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error)
	//*
	// @brief This method is used to delete collection.
	//
	// @param CollectionName, collection name is going to be deleted.
	//
	// @return Status
	DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to build index by collection in sync mode.
	//
	// @param IndexParam, index paramters.
	//
	// @return Status
	CreateIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to describe index
	//
	// @param IndexParam, target index.
	//
	// @return IndexParam
	DescribeIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*IndexParam, error)
	//*
	// @brief This method is used to drop index
	//
	// @param IndexParam, target field. if the IndexParam.field_name is empty, will drop all index of the collection
	//
	// @return Status
	DropIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to create partition
	//
	// @param PartitionParam, partition parameters.
	//
	// @return Status
	CreatePartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to test partition existence.
	//
	// @param PartitionParam, target partition.
	//
	// @return BoolReply
	HasPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*BoolReply, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param CollectionName, target collection name.
	//
	// @return PartitionList
	ShowPartitions(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*PartitionList, error)
	//*
	// @brief This method is used to drop partition
	//
	// @param PartitionParam, target partition.
	//
	// @return Status
	DropPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to add vector array to collection.
	//
	// @param InsertParam, insert parameters.
	//
	// @return VectorIds
	Insert(ctx context.Context, in *InsertParam, opts ...grpc.CallOption) (*EntityIds, error)
	//*
	// @brief This method is used to get entities data by id array.
	//
	// @param EntitiesIdentity, target entity id array.
	//
	// @return EntitiesData
	GetEntityByID(ctx context.Context, in *EntityIdentity, opts ...grpc.CallOption) (*Entities, error)
	//*
	// @brief This method is used to get vector ids from a segment
	//
	// @param GetVectorIDsParam, target collection and segment
	//
	// @return VectorIds
	GetEntityIDs(ctx context.Context, in *GetEntityIDsParam, opts ...grpc.CallOption) (*EntityIds, error)
	//*
	// @brief This method is used to query vector in collection.
	//
	// @param SearchParam, search parameters.
	//
	// @return KQueryResult
	Search(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*QueryResult, error)
	//*
	// @brief This method is used to query vector in specified files.
	//
	// @param SearchInSegmentParam, target segments to search.
	//
	// @return TopKQueryResult
	SearchInSegment(ctx context.Context, in *SearchInSegmentParam, opts ...grpc.CallOption) (*QueryResult, error)
	//*
	// @brief This method is used to give the server status.
	//
	// @param Command, command string
	//
	// @return StringReply
	Cmd(ctx context.Context, in *Command, opts ...grpc.CallOption) (*StringReply, error)
	//*
	// @brief This method is used to delete vector by id
	//
	// @param DeleteByIDParam, delete parameters.
	//
	// @return status
	DeleteByID(ctx context.Context, in *DeleteByIDParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to preload collection
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	PreloadCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to flush buffer into storage.
	//
	// @param FlushParam, flush parameters
	//
	// @return Status
	Flush(ctx context.Context, in *FlushParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to compact collection
	//
	// @param CompactParam, compact parameters
	//
	// @return Status
	Compact(ctx context.Context, in *CompactParam, opts ...grpc.CallOption) (*Status, error)
	SearchPB(ctx context.Context, in *SearchParamPB, opts ...grpc.CallOption) (*QueryResult, error)
}

type milvusServiceClient struct {
	cc *grpc.ClientConn
}

func NewMilvusServiceClient(cc *grpc.ClientConn) MilvusServiceClient {
	return &milvusServiceClient{cc}
}

func (c *milvusServiceClient) CreateCollection(ctx context.Context, in *Mapping, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HasCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Mapping, error) {
	out := new(Mapping)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CountCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error) {
	out := new(CollectionRowCount)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CountCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CollectionNameList, error) {
	out := new(CollectionNameList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error) {
	out := new(CollectionInfo)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*IndexParam, error) {
	out := new(IndexParam)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreatePartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreatePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HasPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowPartitions(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*PartitionList, error) {
	out := new(PartitionList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Insert(ctx context.Context, in *InsertParam, opts ...grpc.CallOption) (*EntityIds, error) {
	out := new(EntityIds)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetEntityByID(ctx context.Context, in *EntityIdentity, opts ...grpc.CallOption) (*Entities, error) {
	out := new(Entities)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetEntityByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetEntityIDs(ctx context.Context, in *GetEntityIDsParam, opts ...grpc.CallOption) (*EntityIds, error) {
	out := new(EntityIds)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetEntityIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Search(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SearchInSegment(ctx context.Context, in *SearchInSegmentParam, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/SearchInSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Cmd(ctx context.Context, in *Command, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Cmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DeleteByID(ctx context.Context, in *DeleteByIDParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) PreloadCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/PreloadCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Flush(ctx context.Context, in *FlushParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Compact(ctx context.Context, in *CompactParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Compact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SearchPB(ctx context.Context, in *SearchParamPB, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/SearchPB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilvusServiceServer is the server API for MilvusService service.
type MilvusServiceServer interface {
	//*
	// @brief This method is used to create collection
	//
	// @param CollectionSchema, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(context.Context, *Mapping) (*Status, error)
	//*
	// @brief This method is used to test collection existence.
	//
	// @param CollectionName, collection name is going to be tested.
	//
	// @return BoolReply
	HasCollection(context.Context, *CollectionName) (*BoolReply, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(context.Context, *CollectionName) (*Mapping, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionRowCount
	CountCollection(context.Context, *CollectionName) (*CollectionRowCount, error)
	//*
	// @brief This method is used to list all collections.
	//
	// @param Command, dummy parameter.
	//
	// @return CollectionNameList
	ShowCollections(context.Context, *Command) (*CollectionNameList, error)
	//*
	// @brief This method is used to get collection detail information.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionInfo
	ShowCollectionInfo(context.Context, *CollectionName) (*CollectionInfo, error)
	//*
	// @brief This method is used to delete collection.
	//
	// @param CollectionName, collection name is going to be deleted.
	//
	// @return Status
	DropCollection(context.Context, *CollectionName) (*Status, error)
	//*
	// @brief This method is used to build index by collection in sync mode.
	//
	// @param IndexParam, index paramters.
	//
	// @return Status
	CreateIndex(context.Context, *IndexParam) (*Status, error)
	//*
	// @brief This method is used to describe index
	//
	// @param IndexParam, target index.
	//
	// @return IndexParam
	DescribeIndex(context.Context, *IndexParam) (*IndexParam, error)
	//*
	// @brief This method is used to drop index
	//
	// @param IndexParam, target field. if the IndexParam.field_name is empty, will drop all index of the collection
	//
	// @return Status
	DropIndex(context.Context, *IndexParam) (*Status, error)
	//*
	// @brief This method is used to create partition
	//
	// @param PartitionParam, partition parameters.
	//
	// @return Status
	CreatePartition(context.Context, *PartitionParam) (*Status, error)
	//*
	// @brief This method is used to test partition existence.
	//
	// @param PartitionParam, target partition.
	//
	// @return BoolReply
	HasPartition(context.Context, *PartitionParam) (*BoolReply, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param CollectionName, target collection name.
	//
	// @return PartitionList
	ShowPartitions(context.Context, *CollectionName) (*PartitionList, error)
	//*
	// @brief This method is used to drop partition
	//
	// @param PartitionParam, target partition.
	//
	// @return Status
	DropPartition(context.Context, *PartitionParam) (*Status, error)
	//*
	// @brief This method is used to add vector array to collection.
	//
	// @param InsertParam, insert parameters.
	//
	// @return VectorIds
	Insert(context.Context, *InsertParam) (*EntityIds, error)
	//*
	// @brief This method is used to get entities data by id array.
	//
	// @param EntitiesIdentity, target entity id array.
	//
	// @return EntitiesData
	GetEntityByID(context.Context, *EntityIdentity) (*Entities, error)
	//*
	// @brief This method is used to get vector ids from a segment
	//
	// @param GetVectorIDsParam, target collection and segment
	//
	// @return VectorIds
	GetEntityIDs(context.Context, *GetEntityIDsParam) (*EntityIds, error)
	//*
	// @brief This method is used to query vector in collection.
	//
	// @param SearchParam, search parameters.
	//
	// @return KQueryResult
	Search(context.Context, *SearchParam) (*QueryResult, error)
	//*
	// @brief This method is used to query vector in specified files.
	//
	// @param SearchInSegmentParam, target segments to search.
	//
	// @return TopKQueryResult
	SearchInSegment(context.Context, *SearchInSegmentParam) (*QueryResult, error)
	//*
	// @brief This method is used to give the server status.
	//
	// @param Command, command string
	//
	// @return StringReply
	Cmd(context.Context, *Command) (*StringReply, error)
	//*
	// @brief This method is used to delete vector by id
	//
	// @param DeleteByIDParam, delete parameters.
	//
	// @return status
	DeleteByID(context.Context, *DeleteByIDParam) (*Status, error)
	//*
	// @brief This method is used to preload collection
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	PreloadCollection(context.Context, *CollectionName) (*Status, error)
	//*
	// @brief This method is used to flush buffer into storage.
	//
	// @param FlushParam, flush parameters
	//
	// @return Status
	Flush(context.Context, *FlushParam) (*Status, error)
	//*
	// @brief This method is used to compact collection
	//
	// @param CompactParam, compact parameters
	//
	// @return Status
	Compact(context.Context, *CompactParam) (*Status, error)
	SearchPB(context.Context, *SearchParamPB) (*QueryResult, error)
}

// UnimplementedMilvusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMilvusServiceServer struct {
}

func (*UnimplementedMilvusServiceServer) CreateCollection(ctx context.Context, req *Mapping) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) HasCollection(ctx context.Context, req *CollectionName) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeCollection(ctx context.Context, req *CollectionName) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) CountCollection(ctx context.Context, req *CollectionName) (*CollectionRowCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowCollections(ctx context.Context, req *Command) (*CollectionNameList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowCollectionInfo(ctx context.Context, req *CollectionName) (*CollectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollectionInfo not implemented")
}
func (*UnimplementedMilvusServiceServer) DropCollection(ctx context.Context, req *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) CreateIndex(ctx context.Context, req *IndexParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeIndex(ctx context.Context, req *IndexParam) (*IndexParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) DropIndex(ctx context.Context, req *IndexParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) CreatePartition(ctx context.Context, req *PartitionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (*UnimplementedMilvusServiceServer) HasPartition(ctx context.Context, req *PartitionParam) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPartition not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowPartitions(ctx context.Context, req *CollectionName) (*PartitionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (*UnimplementedMilvusServiceServer) DropPartition(ctx context.Context, req *PartitionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPartition not implemented")
}
func (*UnimplementedMilvusServiceServer) Insert(ctx context.Context, req *InsertParam) (*EntityIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedMilvusServiceServer) GetEntityByID(ctx context.Context, req *EntityIdentity) (*Entities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityByID not implemented")
}
func (*UnimplementedMilvusServiceServer) GetEntityIDs(ctx context.Context, req *GetEntityIDsParam) (*EntityIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityIDs not implemented")
}
func (*UnimplementedMilvusServiceServer) Search(ctx context.Context, req *SearchParam) (*QueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedMilvusServiceServer) SearchInSegment(ctx context.Context, req *SearchInSegmentParam) (*QueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInSegment not implemented")
}
func (*UnimplementedMilvusServiceServer) Cmd(ctx context.Context, req *Command) (*StringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cmd not implemented")
}
func (*UnimplementedMilvusServiceServer) DeleteByID(ctx context.Context, req *DeleteByIDParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (*UnimplementedMilvusServiceServer) PreloadCollection(ctx context.Context, req *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreloadCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) Flush(ctx context.Context, req *FlushParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (*UnimplementedMilvusServiceServer) Compact(ctx context.Context, req *CompactParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compact not implemented")
}
func (*UnimplementedMilvusServiceServer) SearchPB(ctx context.Context, req *SearchParamPB) (*QueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPB not implemented")
}

func RegisterMilvusServiceServer(s *grpc.Server, srv MilvusServiceServer) {
	s.RegisterService(&_MilvusService_serviceDesc, srv)
}

func _MilvusService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mapping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateCollection(ctx, req.(*Mapping))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HasCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CountCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CountCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CountCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CountCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowCollections(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowCollectionInfo(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateIndex(ctx, req.(*IndexParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, req.(*IndexParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropIndex(ctx, req.(*IndexParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreatePartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HasPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasPartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropPartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Insert(ctx, req.(*InsertParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetEntityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetEntityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetEntityByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetEntityByID(ctx, req.(*EntityIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetEntityIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityIDsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetEntityIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetEntityIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetEntityIDs(ctx, req.(*GetEntityIDsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Search(ctx, req.(*SearchParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SearchInSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInSegmentParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SearchInSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/SearchInSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SearchInSegment(ctx, req.(*SearchInSegmentParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Cmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Cmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Cmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Cmd(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DeleteByID(ctx, req.(*DeleteByIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_PreloadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).PreloadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/PreloadCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).PreloadCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Flush(ctx, req.(*FlushParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Compact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompactParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Compact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Compact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Compact(ctx, req.(*CompactParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SearchPB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParamPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SearchPB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/SearchPB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SearchPB(ctx, req.(*SearchParamPB))
	}
	return interceptor(ctx, in, info, handler)
}

var _MilvusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.grpc.MilvusService",
	HandlerType: (*MilvusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _MilvusService_CreateCollection_Handler,
		},
		{
			MethodName: "HasCollection",
			Handler:    _MilvusService_HasCollection_Handler,
		},
		{
			MethodName: "DescribeCollection",
			Handler:    _MilvusService_DescribeCollection_Handler,
		},
		{
			MethodName: "CountCollection",
			Handler:    _MilvusService_CountCollection_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _MilvusService_ShowCollections_Handler,
		},
		{
			MethodName: "ShowCollectionInfo",
			Handler:    _MilvusService_ShowCollectionInfo_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _MilvusService_DropCollection_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _MilvusService_CreateIndex_Handler,
		},
		{
			MethodName: "DescribeIndex",
			Handler:    _MilvusService_DescribeIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _MilvusService_DropIndex_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _MilvusService_CreatePartition_Handler,
		},
		{
			MethodName: "HasPartition",
			Handler:    _MilvusService_HasPartition_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _MilvusService_ShowPartitions_Handler,
		},
		{
			MethodName: "DropPartition",
			Handler:    _MilvusService_DropPartition_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _MilvusService_Insert_Handler,
		},
		{
			MethodName: "GetEntityByID",
			Handler:    _MilvusService_GetEntityByID_Handler,
		},
		{
			MethodName: "GetEntityIDs",
			Handler:    _MilvusService_GetEntityIDs_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _MilvusService_Search_Handler,
		},
		{
			MethodName: "SearchInSegment",
			Handler:    _MilvusService_SearchInSegment_Handler,
		},
		{
			MethodName: "Cmd",
			Handler:    _MilvusService_Cmd_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _MilvusService_DeleteByID_Handler,
		},
		{
			MethodName: "PreloadCollection",
			Handler:    _MilvusService_PreloadCollection_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _MilvusService_Flush_Handler,
		},
		{
			MethodName: "Compact",
			Handler:    _MilvusService_Compact_Handler,
		},
		{
			MethodName: "SearchPB",
			Handler:    _MilvusService_SearchPB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/master/grpc/message/message.proto",
}
