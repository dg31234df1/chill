syntax = "proto3";

package milvus.proto.query;

option go_package = "github.com/zilliztech/milvus-distributed/internal/proto/querypb";

import "common.proto";
import "milvus.proto";
import "internal.proto";
import "data_service.proto";
import "schema.proto";

message RegisterNodeRequest {
  common.MsgBase base = 1;
  common.Address address = 2;
}

message RegisterNodeResponse {
  common.Status status = 1;
  internal.InitParams init_params = 2;
}

message ShowCollectionRequest {
  common.MsgBase base = 1;
  int64 dbID = 2;
}

message ShowCollectionResponse {
  common.Status status = 1;
  repeated int64 collectionIDs = 2;
}

message LoadCollectionRequest {
  common.MsgBase base = 1;
  int64 dbID = 2;
  int64 collectionID = 3;
  schema.CollectionSchema schema = 4;
}

message ReleaseCollectionRequest {
  common.MsgBase base = 1;
  int64 dbID = 2;
  int64 collectionID = 3;
}

message ShowPartitionRequest {
  common.MsgBase base = 1;
  int64 dbID = 2;
  int64 collectionID = 3;
}

message ShowPartitionResponse  {
  common.Status status = 1;
  repeated int64 partitionIDs = 2;
}

enum PartitionState {
  NotExist = 0;
  NotPresent = 1;
  OnDisk = 2;
  PartialInMemory = 3;
  InMemory = 4;
  PartialInGPU = 5;
  InGPU = 6;
}

message PartitionStates {
  int64 partitionID = 1;
  PartitionState state = 2;
}

message PartitionStatesRequest {
  common.MsgBase base = 1;
  int64 dbID = 2;
  int64 collectionID = 3;
  repeated int64  partitionIDs = 4;
}

message PartitionStatesResponse {
  common.Status status = 1;
  repeated PartitionStates partition_descriptions = 2;
}

message LoadPartitionRequest {
  common.MsgBase base = 1;
  int64 dbID = 2;
  int64 collectionID = 3;
  repeated int64 partitionIDs = 4;
  schema.CollectionSchema schema = 5;
}

message ReleasePartitionRequest {
  common.MsgBase base = 1;
  int64 dbID = 2;
  int64 collectionID = 3;
  repeated int64 partitionIDs = 4;
}

message CreateQueryChannelResponse {
  common.Status status = 1;
  string request_channel = 2;
  string result_channel = 3;
}

message AddQueryChannelsRequest {
  common.MsgBase base = 1;
  string request_channelID = 2;
  string result_channelID = 3;
}

message RemoveQueryChannelsRequest {
  common.Status status = 1;
  common.MsgBase base = 2;
  string request_channelID = 3;
  string result_channelID = 4;
}

message WatchDmChannelsRequest  {
  common.MsgBase base = 1;
  repeated string channelIDs = 2;
}

message LoadSegmentRequest {
  common.MsgBase base = 1;
  int64 dbID = 2;
  int64 collectionID = 3;
  int64 partitionID = 4;
  repeated int64 segmentIDs = 5;
  repeated int64 fieldIDs = 6;
  repeated data.SegmentStateInfo segment_states = 7;
  schema.CollectionSchema schema = 8;
}

message ReleaseSegmentRequest {
  common.MsgBase base = 1;
  int64 dbID = 2;
  int64 collectionID = 3;
  repeated int64 partitionIDs = 4;
  repeated int64 segmentIDs = 5;
  repeated int64 fieldIDs = 6;
}

message ComponentStatesResponse {
  common.Status status = 1;
  internal.ComponentStates states = 2;
}

message SegmentInfo {
  int64 segmentID = 1;
  int64 collectionID = 2;
  int64 partitionID = 3;
  int64 mem_size = 4;
  int64 num_rows = 5;
  string index_name = 6;
  int64 indexID = 7;
}

message SegmentInfoRequest {
  common.MsgBase base = 1;
  repeated int64 segmentIDs = 2;
}

message SegmentInfoResponse {
  common.Status status = 1;
  repeated SegmentInfo infos = 2;
}

service QueryService {
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse) {}

  rpc ShowCollections(ShowCollectionRequest) returns (ShowCollectionResponse) {}
  rpc ShowPartitions(ShowPartitionRequest) returns (ShowPartitionResponse) {}

  rpc LoadPartitions(LoadPartitionRequest) returns (common.Status) {}
  rpc ReleasePartitions(ReleasePartitionRequest) returns (common.Status) {}
  rpc LoadCollection(LoadCollectionRequest) returns (common.Status) {}
  rpc ReleaseCollection(ReleaseCollectionRequest) returns (common.Status) {}

  rpc CreateQueryChannel(common.Empty) returns (CreateQueryChannelResponse) {}
  rpc GetTimeTickChannel(common.Empty) returns (milvus.StringResponse) {}
  rpc GetStatisticsChannel(common.Empty) returns (milvus.StringResponse) {}
  rpc GetPartitionStates(PartitionStatesRequest) returns (PartitionStatesResponse) {}
  rpc GetComponentStates(common.Empty) returns (internal.ComponentStates) {}
  rpc GetSegmentInfo(SegmentInfoRequest) returns (SegmentInfoResponse) {}
}

service QueryNode {
  rpc GetTimeTickChannel(common.Empty) returns (milvus.StringResponse) {}
  rpc GetStatsChannel(common.Empty) returns (milvus.StringResponse) {}
  rpc GetComponentStates(common.Empty) returns (ComponentStatesResponse) {}

  rpc AddQueryChannel(AddQueryChannelsRequest) returns (common.Status) {}
  rpc RemoveQueryChannel(RemoveQueryChannelsRequest) returns (common.Status) {}
  rpc WatchDmChannels(WatchDmChannelsRequest) returns (common.Status) {}
  rpc LoadSegments(LoadSegmentRequest) returns (common.Status) {}
  rpc ReleaseSegments(ReleaseSegmentRequest) returns (common.Status) {}
  rpc GetSegmentInfo(SegmentInfoRequest) returns (SegmentInfoResponse) {}
}
