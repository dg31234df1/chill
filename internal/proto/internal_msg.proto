syntax = "proto3";
package milvus.proto.internal;
option go_package="github.com/zilliztech/milvus-distributed/internal/proto/internalpb";

import "common.proto";
import "service_msg.proto";


enum MsgType {
    kNone = 0;
    /* Definition Requests: collection */
    kCreateCollection = 100;
    kDropCollection = 101;
    kHasCollection = 102;
    kDescribeCollection = 103;
    kShowCollections = 104;

    /* Definition Requests: partition */
    kCreatePartition = 200;
    kDropPartition = 201;
    kHasPartition = 202;
    kDescribePartition = 203;
    kShowPartitions = 204;

    /* Manipulation Requests */
    kInsert = 400;
    kDelete = 401;

    /* Query */
    kSearch = 500;
    kSearchResult = 501;

    /* System Control */
    kTimeTick = 1200;
}

enum PeerRole {

    Master = 0;

    Reader = 1;

    Writer = 2;

    Proxy = 3;

}

message IdRequest {
    int64 peer_id = 1;
    PeerRole role = 2;
    uint32 count = 3;
}

message IdResponse {
    common.Status status = 1;
    int64 id = 2;
    uint32 count = 3;
}

message TsoRequest {
    int64 peer_id = 1;	
    PeerRole role = 2;
    uint32 count = 3;
}

message TsoResponse {
    common.Status status = 1;
    uint64 timestamp = 2;
    uint32 count = 3;
}


message CreateCollectionRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    uint64 timestamp = 3;
    int64 proxy_id = 4;
    common.Blob schema = 5;
}


message DropCollectionRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    uint64 timestamp = 3;
    int64 proxy_id = 4;
    service.CollectionName collection_name = 5;
}


message HasCollectionRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    uint64 timestamp = 3;
    int64 proxy_id = 4;
    service.CollectionName collection_name = 5;
}


message DescribeCollectionRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    uint64 timestamp = 3;
    int64 proxy_id = 4;
    service.CollectionName collection_name = 5;
}


message ShowCollectionRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    uint64 timestamp = 3;
    int64 proxy_id = 4;
}


message CreatePartitionRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    uint64 timestamp = 3;
    int64 proxy_id = 4;
    service.PartitionName partition_name = 5;
}


message DropPartitionRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    uint64 timestamp = 3;
    int64 proxy_id = 4;
    service.PartitionName partition_name = 5;
}


message HasPartitionRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    uint64 timestamp = 3;
    int64 proxy_id = 4;
    service.PartitionName partition_name = 5;
}


message DescribePartitionRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    uint64 timestamp = 3;
    int64 proxy_id = 4;
    service.PartitionName partition_name = 5;
}


message ShowPartitionRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    uint64 timestamp = 3;
    int64 proxy_id = 4;
    service.CollectionName collection_name = 5;
}


message InsertRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    string collection_name = 3;
    string partition_tag = 4;
    int64 segment_id = 5;
    int64 channel_id = 6;
    int64 proxy_id = 7;
    repeated uint64 timestamps = 8;
    repeated int64 row_ids = 9;
    repeated common.Blob row_data = 10;
}


message DeleteRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    string collection_name = 3;
    int64 channel_id = 4;
    int64 proxy_id = 5;
    repeated uint64 timestamps = 6;
    repeated int64 primary_keys = 7;
}


message SearchRequest {
    MsgType msg_type = 1;
    int64 req_id = 2;
    int64 proxy_id = 3;
    uint64 timestamp = 4;
    int64 result_channel_id = 5;
    common.Blob query = 6;

}

message SearchResult {
    MsgType msg_type = 1;
    common.Status status = 2;
    int64 req_id = 3;
    int64 proxy_id = 4;
    int64 query_node_id = 5;
    uint64 timestamp = 6;
    int64 result_channel_id = 7;
    repeated service.Hits hits = 8;
}

message TimeTickMsg {
    MsgType msg_type = 1;
    int64 peer_id = 2;
    uint64 timestamp = 3;
}


message Key2Seg {
    int64 row_id = 1;
    int64 primary_key = 2;
    uint64 timestamp = 3;
    bool is_valid = 4;
    repeated int64 segment_ids = 5;
}


message Key2SegMsg {
    int64 req_id = 1;
    repeated Key2Seg key2seg = 2;
}


message SegmentStatistics {
  int64 segment_id = 1;
  int64 memory_size = 2;
  int64 num_rows = 3;
}