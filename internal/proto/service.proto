import "google/protobuf/empty.proto";


/**
 * @brief Collection name
 */
message CollectionName {
    string collection_name = 1;
}


/**
 * @brief Partition name
 */
message PartitionName {
    string collection_name = 1;
    string tag = 2;
}


/**
 * @brief Row batch for Insert call
 */
message RowBatch {
    string collection_name = 1;
    string partition_tag = 2;
    repeated Blob row_data = 3;
    repeated uint64 row_id = 4;
}


/**
 * @brief Placeholder value in DSL
 */
message PlaceholderValue {
    string tag = 1;
    Blob value = 2;
}


/**
 * @brief Query for Search call
 */
message Query {
    string collection_name = 1;
    repeated string partition_tags = 2;
    string dsl = 3;
    repeated PlaceholderValue placeholders = 4;
}


/**
 * @brief String response
 */
message StringResponse {
    Status status = 1;
    string value = 2;
}


/**
 * @brief Bool response
 */
message BoolResponse {
    Status status = 1;
    bool value = 2;
}


/**
 * @brief String list response
 */
message StringListResponse {
    Status status = 1;
    repeated string values = 2;
}


/**
 * @brief Integer list response
 */
message IntegerListResponse {
    Status status = 1;
    repeated int64 values = 2;
}


/**
 * @brief Range response, [begin, end)
 */
message IntegerRangeResponse {
    Status status = 1;
    repeated int64 begin = 2;
    repeated int64 end = 2;
}


/**
 * @brief Response of DescribeCollection 
 */
message CollectionDescription {
    Status status = 1;
    CollectionSchema schema = 2;
    repeated KeyValuePair statistics = 3;
}


/**
 * @brief Response of DescribePartition
 */
message PartitionDescription {
    Status status = 1;
    PartitionName name = 2;
    repeated KeyValuePair statistics = 3;
}


/**
 * @brief Scores of a query. 
 *        The default value of tag is "root". 
 *        It corresponds to the final score of each hit.
 */
message Score {
    string tag = 1;
    repeated float values = 2;
}


/**
 * @brief Entities hit by query
 */
message Hits {
    Status status = 1;
    repeated int64 ids = 2;
    repeated Blob row_data = 4;
    repeated Score scores = 5;
}


/**
 * @brief Query result
 */
message QueryResult {
    Status status = 1;
    repeated Hits hits = 2;
}


service MilvusService {
    /**
     * @brief This method is used to create collection
     *
     * @param CollectionSchema, use to provide collection information to be created.
     *
     * @return Status
     */
    rpc CreateCollection(CollectionSchema) returns (Status){}
    
    /**
     * @brief This method is used to delete collection.
     *
     * @param CollectionName, collection name is going to be deleted.
     *
     * @return Status
     */
    rpc DropCollection(CollectionName) returns (Status) {}

    /**
     * @brief This method is used to test collection existence.
     *
     * @param CollectionName, collection name is going to be tested.
     *
     * @return BoolResponse
     */
    rpc HasCollection(CollectionName) returns (BoolResponse) {}

    /**
     * @brief This method is used to get collection schema.
     *
     * @param CollectionName, target collection name.
     *
     * @return CollectionSchema
     */
    rpc DescribeCollection(CollectionName) returns (CollectionDescription) {}

    /**
     * @brief This method is used to list all collections.
     *
     * @return CollectionNameList
     */
    rpc ShowCollections(google.protobuf.Empty) returns (StringListResponse) {}

    /**
     * @brief This method is used to create partition
     *
     * @return Status
     */
    rpc CreatePartition(PartitionName) returns (Status) {}

    /**
     * @brief This method is used to drop partition
     *
     * @return Status
     */
    rpc DropPartition(PartitionName) returns (Status) {}

    /**
     * @brief This method is used to test partition existence.
     *
     * @return BoolResponse
     */
    rpc HasPartition(PartitionName) returns (BoolResponse) {}

    /**
     * @brief This method is used to get basic partition infomation.
     *
     * @return PartitionDescription
     */
    rpc DescribePartition(PartitionName) returns (PartitionDescription) {}

    /**
     * @brief This method is used to show partition information
     *
     * @param CollectionName, target collection name.
     *
     * @return StringListResponse
     */
    rpc ShowPartitions(CollectionName) returns (StringListResponse) {}

    /**
     * @brief This method is used to add vector array to collection.
     *
     * @param RowBatch, insert rows.
     *
     * @return IntegerRangeResponse contains id of the inserted rows.
     */
    rpc Insert(RowBatch) returns (IntegerRangeResponse) {}

    /**
     * @brief This method is used to query vector in collection.
     *
     * @param Query.
     *
     * @return QueryResult
     */
    rpc Search(Query) returns (QueryResult) {}
}