syntax = "proto3";

package milvus.proto.index;

option go_package = "github.com/zilliztech/milvus-distributed/internal/proto/indexpb";

import "common.proto";
import "internal.proto";


message RegisterNodeRequest {
  common.MsgBase base = 1;
  common.Address address = 2;
}

message RegisterNodeResponse {
  common.Status status = 1;
  internal.InitParams init_params = 2;
}

message IndexStatesRequest {
  repeated int64 indexIDs = 1;
}

message IndexInfo {
  common.IndexState state = 1;
  int64 indexID = 2;
  string Reason = 3;
}

message IndexStatesResponse {
  common.Status status = 1;
  repeated IndexInfo states = 2;
}

message BuildIndexRequest {
  repeated string data_paths = 1;
  repeated common.KeyValuePair type_params = 2;
  repeated common.KeyValuePair index_params = 3;
}

message BuildIndexResponse {
  common.Status status = 1;
  int64 indexID = 2;
}

message BuildIndexCmd {
  int64 indexID = 1;
  BuildIndexRequest req = 2;
}

message BuildIndexNotification {
  common.Status status = 1;
  int64 indexID = 2;
  repeated string index_file_paths = 3;
  int64 nodeID = 4;
}

message IndexFilePathsRequest {
  repeated int64 indexIDs = 1;
}

message IndexFilePathInfo {
  common.Status status = 1;
  int64 indexID = 2;
  repeated string index_file_paths = 3;
}

message IndexFilePathsResponse {
  common.Status status = 1;
  repeated IndexFilePathInfo file_paths = 2;
}

message IndexMeta {
  common.IndexState state = 1;
  int64   indexID = 2;
  string fail_reason = 3;
  BuildIndexRequest req = 4;
  repeated string index_file_paths = 5;
}

/****************IndexService************************/
service IndexService {
  /**
   * @brief This method is used to create collection
   *
   * @param CollectionSchema, use to provide collection information to be created.
   *
   * @return Status
   */
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse) {}
  rpc BuildIndex(BuildIndexRequest) returns (BuildIndexResponse){}
  rpc GetIndexStates(IndexStatesRequest) returns (IndexStatesResponse) {}
  rpc GetIndexFilePaths(IndexFilePathsRequest) returns (IndexFilePathsResponse){}
  rpc NotifyBuildIndex(BuildIndexNotification) returns (common.Status) {}
}


service IndexNode {
  /**
   * @brief This method is used to create collection
   *
   * @param CollectionSchema, use to provide collection information to be created.
   *
   * @return Status
   */
  rpc BuildIndex(BuildIndexCmd) returns (common.Status){}

}
