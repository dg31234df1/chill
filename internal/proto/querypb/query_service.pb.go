// Code generated by protoc-gen-go. DO NOT EDIT.
// source: query_service.proto

package querypb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	commonpb "github.com/zilliztech/milvus-distributed/internal/proto/commonpb"
	datapb "github.com/zilliztech/milvus-distributed/internal/proto/datapb"
	internalpb2 "github.com/zilliztech/milvus-distributed/internal/proto/internalpb2"
	milvuspb "github.com/zilliztech/milvus-distributed/internal/proto/milvuspb"
	schemapb "github.com/zilliztech/milvus-distributed/internal/proto/schemapb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PartitionState int32

const (
	PartitionState_NotExist        PartitionState = 0
	PartitionState_NotPresent      PartitionState = 1
	PartitionState_OnDisk          PartitionState = 2
	PartitionState_PartialInMemory PartitionState = 3
	PartitionState_InMemory        PartitionState = 4
	PartitionState_PartialInGPU    PartitionState = 5
	PartitionState_InGPU           PartitionState = 6
)

var PartitionState_name = map[int32]string{
	0: "NotExist",
	1: "NotPresent",
	2: "OnDisk",
	3: "PartialInMemory",
	4: "InMemory",
	5: "PartialInGPU",
	6: "InGPU",
}

var PartitionState_value = map[string]int32{
	"NotExist":        0,
	"NotPresent":      1,
	"OnDisk":          2,
	"PartialInMemory": 3,
	"InMemory":        4,
	"PartialInGPU":    5,
	"InGPU":           6,
}

func (x PartitionState) String() string {
	return proto.EnumName(PartitionState_name, int32(x))
}

func (PartitionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{0}
}

type RegisterNodeRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Address              *commonpb.Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RegisterNodeRequest) Reset()         { *m = RegisterNodeRequest{} }
func (m *RegisterNodeRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterNodeRequest) ProtoMessage()    {}
func (*RegisterNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{0}
}

func (m *RegisterNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterNodeRequest.Unmarshal(m, b)
}
func (m *RegisterNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterNodeRequest.Marshal(b, m, deterministic)
}
func (m *RegisterNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterNodeRequest.Merge(m, src)
}
func (m *RegisterNodeRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterNodeRequest.Size(m)
}
func (m *RegisterNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterNodeRequest proto.InternalMessageInfo

func (m *RegisterNodeRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *RegisterNodeRequest) GetAddress() *commonpb.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type RegisterNodeResponse struct {
	Status               *commonpb.Status        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InitParams           *internalpb2.InitParams `protobuf:"bytes,2,opt,name=init_params,json=initParams,proto3" json:"init_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RegisterNodeResponse) Reset()         { *m = RegisterNodeResponse{} }
func (m *RegisterNodeResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterNodeResponse) ProtoMessage()    {}
func (*RegisterNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{1}
}

func (m *RegisterNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterNodeResponse.Unmarshal(m, b)
}
func (m *RegisterNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterNodeResponse.Marshal(b, m, deterministic)
}
func (m *RegisterNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterNodeResponse.Merge(m, src)
}
func (m *RegisterNodeResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterNodeResponse.Size(m)
}
func (m *RegisterNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterNodeResponse proto.InternalMessageInfo

func (m *RegisterNodeResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RegisterNodeResponse) GetInitParams() *internalpb2.InitParams {
	if m != nil {
		return m.InitParams
	}
	return nil
}

type ShowCollectionRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ShowCollectionRequest) Reset()         { *m = ShowCollectionRequest{} }
func (m *ShowCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*ShowCollectionRequest) ProtoMessage()    {}
func (*ShowCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{2}
}

func (m *ShowCollectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShowCollectionRequest.Unmarshal(m, b)
}
func (m *ShowCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShowCollectionRequest.Marshal(b, m, deterministic)
}
func (m *ShowCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowCollectionRequest.Merge(m, src)
}
func (m *ShowCollectionRequest) XXX_Size() int {
	return xxx_messageInfo_ShowCollectionRequest.Size(m)
}
func (m *ShowCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShowCollectionRequest proto.InternalMessageInfo

func (m *ShowCollectionRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ShowCollectionRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

type ShowCollectionResponse struct {
	Status               *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionIDs        []int64          `protobuf:"varint,2,rep,packed,name=collectionIDs,proto3" json:"collectionIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ShowCollectionResponse) Reset()         { *m = ShowCollectionResponse{} }
func (m *ShowCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*ShowCollectionResponse) ProtoMessage()    {}
func (*ShowCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{3}
}

func (m *ShowCollectionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShowCollectionResponse.Unmarshal(m, b)
}
func (m *ShowCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShowCollectionResponse.Marshal(b, m, deterministic)
}
func (m *ShowCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowCollectionResponse.Merge(m, src)
}
func (m *ShowCollectionResponse) XXX_Size() int {
	return xxx_messageInfo_ShowCollectionResponse.Size(m)
}
func (m *ShowCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShowCollectionResponse proto.InternalMessageInfo

func (m *ShowCollectionResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ShowCollectionResponse) GetCollectionIDs() []int64 {
	if m != nil {
		return m.CollectionIDs
	}
	return nil
}

type LoadCollectionRequest struct {
	Base                 *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64                      `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LoadCollectionRequest) Reset()         { *m = LoadCollectionRequest{} }
func (m *LoadCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*LoadCollectionRequest) ProtoMessage()    {}
func (*LoadCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{4}
}

func (m *LoadCollectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadCollectionRequest.Unmarshal(m, b)
}
func (m *LoadCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadCollectionRequest.Marshal(b, m, deterministic)
}
func (m *LoadCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadCollectionRequest.Merge(m, src)
}
func (m *LoadCollectionRequest) XXX_Size() int {
	return xxx_messageInfo_LoadCollectionRequest.Size(m)
}
func (m *LoadCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadCollectionRequest proto.InternalMessageInfo

func (m *LoadCollectionRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *LoadCollectionRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *LoadCollectionRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *LoadCollectionRequest) GetSchema() *schemapb.CollectionSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type ReleaseCollectionRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReleaseCollectionRequest) Reset()         { *m = ReleaseCollectionRequest{} }
func (m *ReleaseCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseCollectionRequest) ProtoMessage()    {}
func (*ReleaseCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{5}
}

func (m *ReleaseCollectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseCollectionRequest.Unmarshal(m, b)
}
func (m *ReleaseCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseCollectionRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseCollectionRequest.Merge(m, src)
}
func (m *ReleaseCollectionRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseCollectionRequest.Size(m)
}
func (m *ReleaseCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseCollectionRequest proto.InternalMessageInfo

func (m *ReleaseCollectionRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ReleaseCollectionRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *ReleaseCollectionRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

type ShowPartitionRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ShowPartitionRequest) Reset()         { *m = ShowPartitionRequest{} }
func (m *ShowPartitionRequest) String() string { return proto.CompactTextString(m) }
func (*ShowPartitionRequest) ProtoMessage()    {}
func (*ShowPartitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{6}
}

func (m *ShowPartitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShowPartitionRequest.Unmarshal(m, b)
}
func (m *ShowPartitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShowPartitionRequest.Marshal(b, m, deterministic)
}
func (m *ShowPartitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowPartitionRequest.Merge(m, src)
}
func (m *ShowPartitionRequest) XXX_Size() int {
	return xxx_messageInfo_ShowPartitionRequest.Size(m)
}
func (m *ShowPartitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowPartitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShowPartitionRequest proto.InternalMessageInfo

func (m *ShowPartitionRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ShowPartitionRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *ShowPartitionRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

type ShowPartitionResponse struct {
	Status               *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionIDs         []int64          `protobuf:"varint,2,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ShowPartitionResponse) Reset()         { *m = ShowPartitionResponse{} }
func (m *ShowPartitionResponse) String() string { return proto.CompactTextString(m) }
func (*ShowPartitionResponse) ProtoMessage()    {}
func (*ShowPartitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{7}
}

func (m *ShowPartitionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShowPartitionResponse.Unmarshal(m, b)
}
func (m *ShowPartitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShowPartitionResponse.Marshal(b, m, deterministic)
}
func (m *ShowPartitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowPartitionResponse.Merge(m, src)
}
func (m *ShowPartitionResponse) XXX_Size() int {
	return xxx_messageInfo_ShowPartitionResponse.Size(m)
}
func (m *ShowPartitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowPartitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShowPartitionResponse proto.InternalMessageInfo

func (m *ShowPartitionResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ShowPartitionResponse) GetPartitionIDs() []int64 {
	if m != nil {
		return m.PartitionIDs
	}
	return nil
}

type PartitionStates struct {
	PartitionID          int64          `protobuf:"varint,1,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	State                PartitionState `protobuf:"varint,2,opt,name=state,proto3,enum=milvus.proto.query.PartitionState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PartitionStates) Reset()         { *m = PartitionStates{} }
func (m *PartitionStates) String() string { return proto.CompactTextString(m) }
func (*PartitionStates) ProtoMessage()    {}
func (*PartitionStates) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{8}
}

func (m *PartitionStates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionStates.Unmarshal(m, b)
}
func (m *PartitionStates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionStates.Marshal(b, m, deterministic)
}
func (m *PartitionStates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionStates.Merge(m, src)
}
func (m *PartitionStates) XXX_Size() int {
	return xxx_messageInfo_PartitionStates.Size(m)
}
func (m *PartitionStates) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionStates.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionStates proto.InternalMessageInfo

func (m *PartitionStates) GetPartitionID() int64 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *PartitionStates) GetState() PartitionState {
	if m != nil {
		return m.State
	}
	return PartitionState_NotExist
}

type PartitionStatesRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64           `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PartitionStatesRequest) Reset()         { *m = PartitionStatesRequest{} }
func (m *PartitionStatesRequest) String() string { return proto.CompactTextString(m) }
func (*PartitionStatesRequest) ProtoMessage()    {}
func (*PartitionStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{9}
}

func (m *PartitionStatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionStatesRequest.Unmarshal(m, b)
}
func (m *PartitionStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionStatesRequest.Marshal(b, m, deterministic)
}
func (m *PartitionStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionStatesRequest.Merge(m, src)
}
func (m *PartitionStatesRequest) XXX_Size() int {
	return xxx_messageInfo_PartitionStatesRequest.Size(m)
}
func (m *PartitionStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionStatesRequest proto.InternalMessageInfo

func (m *PartitionStatesRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *PartitionStatesRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *PartitionStatesRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *PartitionStatesRequest) GetPartitionIDs() []int64 {
	if m != nil {
		return m.PartitionIDs
	}
	return nil
}

type PartitionStatesResponse struct {
	Status                *commonpb.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionDescriptions []*PartitionStates `protobuf:"bytes,2,rep,name=partition_descriptions,json=partitionDescriptions,proto3" json:"partition_descriptions,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}           `json:"-"`
	XXX_unrecognized      []byte             `json:"-"`
	XXX_sizecache         int32              `json:"-"`
}

func (m *PartitionStatesResponse) Reset()         { *m = PartitionStatesResponse{} }
func (m *PartitionStatesResponse) String() string { return proto.CompactTextString(m) }
func (*PartitionStatesResponse) ProtoMessage()    {}
func (*PartitionStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{10}
}

func (m *PartitionStatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionStatesResponse.Unmarshal(m, b)
}
func (m *PartitionStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionStatesResponse.Marshal(b, m, deterministic)
}
func (m *PartitionStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionStatesResponse.Merge(m, src)
}
func (m *PartitionStatesResponse) XXX_Size() int {
	return xxx_messageInfo_PartitionStatesResponse.Size(m)
}
func (m *PartitionStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionStatesResponse proto.InternalMessageInfo

func (m *PartitionStatesResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PartitionStatesResponse) GetPartitionDescriptions() []*PartitionStates {
	if m != nil {
		return m.PartitionDescriptions
	}
	return nil
}

type LoadPartitionRequest struct {
	Base                 *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64                      `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64                    `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LoadPartitionRequest) Reset()         { *m = LoadPartitionRequest{} }
func (m *LoadPartitionRequest) String() string { return proto.CompactTextString(m) }
func (*LoadPartitionRequest) ProtoMessage()    {}
func (*LoadPartitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{11}
}

func (m *LoadPartitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadPartitionRequest.Unmarshal(m, b)
}
func (m *LoadPartitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadPartitionRequest.Marshal(b, m, deterministic)
}
func (m *LoadPartitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadPartitionRequest.Merge(m, src)
}
func (m *LoadPartitionRequest) XXX_Size() int {
	return xxx_messageInfo_LoadPartitionRequest.Size(m)
}
func (m *LoadPartitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadPartitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadPartitionRequest proto.InternalMessageInfo

func (m *LoadPartitionRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *LoadPartitionRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *LoadPartitionRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *LoadPartitionRequest) GetPartitionIDs() []int64 {
	if m != nil {
		return m.PartitionIDs
	}
	return nil
}

func (m *LoadPartitionRequest) GetSchema() *schemapb.CollectionSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type ReleasePartitionRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64           `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReleasePartitionRequest) Reset()         { *m = ReleasePartitionRequest{} }
func (m *ReleasePartitionRequest) String() string { return proto.CompactTextString(m) }
func (*ReleasePartitionRequest) ProtoMessage()    {}
func (*ReleasePartitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{12}
}

func (m *ReleasePartitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleasePartitionRequest.Unmarshal(m, b)
}
func (m *ReleasePartitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleasePartitionRequest.Marshal(b, m, deterministic)
}
func (m *ReleasePartitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleasePartitionRequest.Merge(m, src)
}
func (m *ReleasePartitionRequest) XXX_Size() int {
	return xxx_messageInfo_ReleasePartitionRequest.Size(m)
}
func (m *ReleasePartitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleasePartitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleasePartitionRequest proto.InternalMessageInfo

func (m *ReleasePartitionRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ReleasePartitionRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *ReleasePartitionRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *ReleasePartitionRequest) GetPartitionIDs() []int64 {
	if m != nil {
		return m.PartitionIDs
	}
	return nil
}

type CreateQueryChannelResponse struct {
	Status               *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RequestChannel       string           `protobuf:"bytes,2,opt,name=request_channel,json=requestChannel,proto3" json:"request_channel,omitempty"`
	ResultChannel        string           `protobuf:"bytes,3,opt,name=result_channel,json=resultChannel,proto3" json:"result_channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateQueryChannelResponse) Reset()         { *m = CreateQueryChannelResponse{} }
func (m *CreateQueryChannelResponse) String() string { return proto.CompactTextString(m) }
func (*CreateQueryChannelResponse) ProtoMessage()    {}
func (*CreateQueryChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{13}
}

func (m *CreateQueryChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateQueryChannelResponse.Unmarshal(m, b)
}
func (m *CreateQueryChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateQueryChannelResponse.Marshal(b, m, deterministic)
}
func (m *CreateQueryChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateQueryChannelResponse.Merge(m, src)
}
func (m *CreateQueryChannelResponse) XXX_Size() int {
	return xxx_messageInfo_CreateQueryChannelResponse.Size(m)
}
func (m *CreateQueryChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateQueryChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateQueryChannelResponse proto.InternalMessageInfo

func (m *CreateQueryChannelResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CreateQueryChannelResponse) GetRequestChannel() string {
	if m != nil {
		return m.RequestChannel
	}
	return ""
}

func (m *CreateQueryChannelResponse) GetResultChannel() string {
	if m != nil {
		return m.ResultChannel
	}
	return ""
}

type AddQueryChannelsRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	RequestChannelID     string            `protobuf:"bytes,2,opt,name=request_channelID,json=requestChannelID,proto3" json:"request_channelID,omitempty"`
	ResultChannelID      string            `protobuf:"bytes,3,opt,name=result_channelID,json=resultChannelID,proto3" json:"result_channelID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddQueryChannelsRequest) Reset()         { *m = AddQueryChannelsRequest{} }
func (m *AddQueryChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*AddQueryChannelsRequest) ProtoMessage()    {}
func (*AddQueryChannelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{14}
}

func (m *AddQueryChannelsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddQueryChannelsRequest.Unmarshal(m, b)
}
func (m *AddQueryChannelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddQueryChannelsRequest.Marshal(b, m, deterministic)
}
func (m *AddQueryChannelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddQueryChannelsRequest.Merge(m, src)
}
func (m *AddQueryChannelsRequest) XXX_Size() int {
	return xxx_messageInfo_AddQueryChannelsRequest.Size(m)
}
func (m *AddQueryChannelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddQueryChannelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddQueryChannelsRequest proto.InternalMessageInfo

func (m *AddQueryChannelsRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AddQueryChannelsRequest) GetRequestChannelID() string {
	if m != nil {
		return m.RequestChannelID
	}
	return ""
}

func (m *AddQueryChannelsRequest) GetResultChannelID() string {
	if m != nil {
		return m.ResultChannelID
	}
	return ""
}

type RemoveQueryChannelsRequest struct {
	Status               *commonpb.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Base                 *commonpb.MsgBase `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	RequestChannelID     string            `protobuf:"bytes,3,opt,name=request_channelID,json=requestChannelID,proto3" json:"request_channelID,omitempty"`
	ResultChannelID      string            `protobuf:"bytes,4,opt,name=result_channelID,json=resultChannelID,proto3" json:"result_channelID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RemoveQueryChannelsRequest) Reset()         { *m = RemoveQueryChannelsRequest{} }
func (m *RemoveQueryChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveQueryChannelsRequest) ProtoMessage()    {}
func (*RemoveQueryChannelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{15}
}

func (m *RemoveQueryChannelsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveQueryChannelsRequest.Unmarshal(m, b)
}
func (m *RemoveQueryChannelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveQueryChannelsRequest.Marshal(b, m, deterministic)
}
func (m *RemoveQueryChannelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveQueryChannelsRequest.Merge(m, src)
}
func (m *RemoveQueryChannelsRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveQueryChannelsRequest.Size(m)
}
func (m *RemoveQueryChannelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveQueryChannelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveQueryChannelsRequest proto.InternalMessageInfo

func (m *RemoveQueryChannelsRequest) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RemoveQueryChannelsRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *RemoveQueryChannelsRequest) GetRequestChannelID() string {
	if m != nil {
		return m.RequestChannelID
	}
	return ""
}

func (m *RemoveQueryChannelsRequest) GetResultChannelID() string {
	if m != nil {
		return m.ResultChannelID
	}
	return ""
}

type WatchDmChannelsRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ChannelIDs           []string          `protobuf:"bytes,2,rep,name=channelIDs,proto3" json:"channelIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WatchDmChannelsRequest) Reset()         { *m = WatchDmChannelsRequest{} }
func (m *WatchDmChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchDmChannelsRequest) ProtoMessage()    {}
func (*WatchDmChannelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{16}
}

func (m *WatchDmChannelsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchDmChannelsRequest.Unmarshal(m, b)
}
func (m *WatchDmChannelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchDmChannelsRequest.Marshal(b, m, deterministic)
}
func (m *WatchDmChannelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchDmChannelsRequest.Merge(m, src)
}
func (m *WatchDmChannelsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchDmChannelsRequest.Size(m)
}
func (m *WatchDmChannelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchDmChannelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchDmChannelsRequest proto.InternalMessageInfo

func (m *WatchDmChannelsRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *WatchDmChannelsRequest) GetChannelIDs() []string {
	if m != nil {
		return m.ChannelIDs
	}
	return nil
}

type LoadSegmentRequest struct {
	Base                 *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64                      `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID          int64                      `protobuf:"varint,4,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	SegmentIDs           []int64                    `protobuf:"varint,5,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	FieldIDs             []int64                    `protobuf:"varint,6,rep,packed,name=fieldIDs,proto3" json:"fieldIDs,omitempty"`
	SegmentStates        []*datapb.SegmentStateInfo `protobuf:"bytes,7,rep,name=segment_states,json=segmentStates,proto3" json:"segment_states,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,8,opt,name=schema,proto3" json:"schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LoadSegmentRequest) Reset()         { *m = LoadSegmentRequest{} }
func (m *LoadSegmentRequest) String() string { return proto.CompactTextString(m) }
func (*LoadSegmentRequest) ProtoMessage()    {}
func (*LoadSegmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{17}
}

func (m *LoadSegmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadSegmentRequest.Unmarshal(m, b)
}
func (m *LoadSegmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadSegmentRequest.Marshal(b, m, deterministic)
}
func (m *LoadSegmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadSegmentRequest.Merge(m, src)
}
func (m *LoadSegmentRequest) XXX_Size() int {
	return xxx_messageInfo_LoadSegmentRequest.Size(m)
}
func (m *LoadSegmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadSegmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadSegmentRequest proto.InternalMessageInfo

func (m *LoadSegmentRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *LoadSegmentRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *LoadSegmentRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *LoadSegmentRequest) GetPartitionID() int64 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *LoadSegmentRequest) GetSegmentIDs() []int64 {
	if m != nil {
		return m.SegmentIDs
	}
	return nil
}

func (m *LoadSegmentRequest) GetFieldIDs() []int64 {
	if m != nil {
		return m.FieldIDs
	}
	return nil
}

func (m *LoadSegmentRequest) GetSegmentStates() []*datapb.SegmentStateInfo {
	if m != nil {
		return m.SegmentStates
	}
	return nil
}

func (m *LoadSegmentRequest) GetSchema() *schemapb.CollectionSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type ReleaseSegmentRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64           `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	SegmentIDs           []int64           `protobuf:"varint,5,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	FieldIDs             []int64           `protobuf:"varint,6,rep,packed,name=fieldIDs,proto3" json:"fieldIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReleaseSegmentRequest) Reset()         { *m = ReleaseSegmentRequest{} }
func (m *ReleaseSegmentRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseSegmentRequest) ProtoMessage()    {}
func (*ReleaseSegmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{18}
}

func (m *ReleaseSegmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseSegmentRequest.Unmarshal(m, b)
}
func (m *ReleaseSegmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseSegmentRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseSegmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseSegmentRequest.Merge(m, src)
}
func (m *ReleaseSegmentRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseSegmentRequest.Size(m)
}
func (m *ReleaseSegmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseSegmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseSegmentRequest proto.InternalMessageInfo

func (m *ReleaseSegmentRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ReleaseSegmentRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *ReleaseSegmentRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *ReleaseSegmentRequest) GetPartitionIDs() []int64 {
	if m != nil {
		return m.PartitionIDs
	}
	return nil
}

func (m *ReleaseSegmentRequest) GetSegmentIDs() []int64 {
	if m != nil {
		return m.SegmentIDs
	}
	return nil
}

func (m *ReleaseSegmentRequest) GetFieldIDs() []int64 {
	if m != nil {
		return m.FieldIDs
	}
	return nil
}

type SegmentInfo struct {
	SegmentID            int64    `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	CollectionID         int64    `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID          int64    `protobuf:"varint,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	MemSize              int64    `protobuf:"varint,4,opt,name=mem_size,json=memSize,proto3" json:"mem_size,omitempty"`
	NumRows              int64    `protobuf:"varint,5,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	IndexName            string   `protobuf:"bytes,6,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	IndexID              int64    `protobuf:"varint,7,opt,name=indexID,proto3" json:"indexID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentInfo) Reset()         { *m = SegmentInfo{} }
func (m *SegmentInfo) String() string { return proto.CompactTextString(m) }
func (*SegmentInfo) ProtoMessage()    {}
func (*SegmentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{19}
}

func (m *SegmentInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentInfo.Unmarshal(m, b)
}
func (m *SegmentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentInfo.Marshal(b, m, deterministic)
}
func (m *SegmentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentInfo.Merge(m, src)
}
func (m *SegmentInfo) XXX_Size() int {
	return xxx_messageInfo_SegmentInfo.Size(m)
}
func (m *SegmentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentInfo proto.InternalMessageInfo

func (m *SegmentInfo) GetSegmentID() int64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *SegmentInfo) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *SegmentInfo) GetPartitionID() int64 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *SegmentInfo) GetMemSize() int64 {
	if m != nil {
		return m.MemSize
	}
	return 0
}

func (m *SegmentInfo) GetNumRows() int64 {
	if m != nil {
		return m.NumRows
	}
	return 0
}

func (m *SegmentInfo) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *SegmentInfo) GetIndexID() int64 {
	if m != nil {
		return m.IndexID
	}
	return 0
}

type SegmentInfoRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentIDs           []int64           `protobuf:"varint,2,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SegmentInfoRequest) Reset()         { *m = SegmentInfoRequest{} }
func (m *SegmentInfoRequest) String() string { return proto.CompactTextString(m) }
func (*SegmentInfoRequest) ProtoMessage()    {}
func (*SegmentInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{20}
}

func (m *SegmentInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentInfoRequest.Unmarshal(m, b)
}
func (m *SegmentInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentInfoRequest.Marshal(b, m, deterministic)
}
func (m *SegmentInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentInfoRequest.Merge(m, src)
}
func (m *SegmentInfoRequest) XXX_Size() int {
	return xxx_messageInfo_SegmentInfoRequest.Size(m)
}
func (m *SegmentInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentInfoRequest proto.InternalMessageInfo

func (m *SegmentInfoRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *SegmentInfoRequest) GetSegmentIDs() []int64 {
	if m != nil {
		return m.SegmentIDs
	}
	return nil
}

type SegmentInfoResponse struct {
	Status               *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Infos                []*SegmentInfo   `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SegmentInfoResponse) Reset()         { *m = SegmentInfoResponse{} }
func (m *SegmentInfoResponse) String() string { return proto.CompactTextString(m) }
func (*SegmentInfoResponse) ProtoMessage()    {}
func (*SegmentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{21}
}

func (m *SegmentInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentInfoResponse.Unmarshal(m, b)
}
func (m *SegmentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentInfoResponse.Marshal(b, m, deterministic)
}
func (m *SegmentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentInfoResponse.Merge(m, src)
}
func (m *SegmentInfoResponse) XXX_Size() int {
	return xxx_messageInfo_SegmentInfoResponse.Size(m)
}
func (m *SegmentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentInfoResponse proto.InternalMessageInfo

func (m *SegmentInfoResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SegmentInfoResponse) GetInfos() []*SegmentInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func init() {
	proto.RegisterEnum("milvus.proto.query.PartitionState", PartitionState_name, PartitionState_value)
	proto.RegisterType((*RegisterNodeRequest)(nil), "milvus.proto.query.RegisterNodeRequest")
	proto.RegisterType((*RegisterNodeResponse)(nil), "milvus.proto.query.RegisterNodeResponse")
	proto.RegisterType((*ShowCollectionRequest)(nil), "milvus.proto.query.ShowCollectionRequest")
	proto.RegisterType((*ShowCollectionResponse)(nil), "milvus.proto.query.ShowCollectionResponse")
	proto.RegisterType((*LoadCollectionRequest)(nil), "milvus.proto.query.LoadCollectionRequest")
	proto.RegisterType((*ReleaseCollectionRequest)(nil), "milvus.proto.query.ReleaseCollectionRequest")
	proto.RegisterType((*ShowPartitionRequest)(nil), "milvus.proto.query.ShowPartitionRequest")
	proto.RegisterType((*ShowPartitionResponse)(nil), "milvus.proto.query.ShowPartitionResponse")
	proto.RegisterType((*PartitionStates)(nil), "milvus.proto.query.PartitionStates")
	proto.RegisterType((*PartitionStatesRequest)(nil), "milvus.proto.query.PartitionStatesRequest")
	proto.RegisterType((*PartitionStatesResponse)(nil), "milvus.proto.query.PartitionStatesResponse")
	proto.RegisterType((*LoadPartitionRequest)(nil), "milvus.proto.query.LoadPartitionRequest")
	proto.RegisterType((*ReleasePartitionRequest)(nil), "milvus.proto.query.ReleasePartitionRequest")
	proto.RegisterType((*CreateQueryChannelResponse)(nil), "milvus.proto.query.CreateQueryChannelResponse")
	proto.RegisterType((*AddQueryChannelsRequest)(nil), "milvus.proto.query.AddQueryChannelsRequest")
	proto.RegisterType((*RemoveQueryChannelsRequest)(nil), "milvus.proto.query.RemoveQueryChannelsRequest")
	proto.RegisterType((*WatchDmChannelsRequest)(nil), "milvus.proto.query.WatchDmChannelsRequest")
	proto.RegisterType((*LoadSegmentRequest)(nil), "milvus.proto.query.LoadSegmentRequest")
	proto.RegisterType((*ReleaseSegmentRequest)(nil), "milvus.proto.query.ReleaseSegmentRequest")
	proto.RegisterType((*SegmentInfo)(nil), "milvus.proto.query.SegmentInfo")
	proto.RegisterType((*SegmentInfoRequest)(nil), "milvus.proto.query.SegmentInfoRequest")
	proto.RegisterType((*SegmentInfoResponse)(nil), "milvus.proto.query.SegmentInfoResponse")
}

func init() { proto.RegisterFile("query_service.proto", fileDescriptor_5fcb6756dc1afb8d) }

var fileDescriptor_5fcb6756dc1afb8d = []byte{
	// 1353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdf, 0x6f, 0x1b, 0xc5,
	0x13, 0xcf, 0xf9, 0x67, 0x3c, 0x71, 0x6d, 0x77, 0xf3, 0xa3, 0xfe, 0xde, 0xb7, 0x94, 0xb2, 0xd0,
	0x36, 0x6d, 0xc1, 0x41, 0xa9, 0x40, 0xbc, 0x20, 0xd4, 0xc6, 0x55, 0x65, 0x44, 0x43, 0x38, 0xb7,
	0xaa, 0x08, 0x54, 0xe6, 0x7c, 0xb7, 0xb1, 0xb7, 0xf5, 0xdd, 0xb9, 0xb7, 0xeb, 0xa4, 0xc9, 0x0b,
	0x20, 0xf1, 0x88, 0xc4, 0x0b, 0xff, 0x00, 0x42, 0x02, 0x89, 0xbf, 0x82, 0xff, 0x83, 0x17, 0x10,
	0x0f, 0xfc, 0x1b, 0xe8, 0xf6, 0xd6, 0xe7, 0xbb, 0xf3, 0x39, 0x76, 0xe3, 0xa6, 0xe1, 0xcd, 0x3b,
	0x37, 0x3b, 0x9f, 0xcf, 0xcc, 0xce, 0xce, 0xce, 0x18, 0x96, 0x9f, 0x0d, 0x88, 0x7b, 0xd8, 0x62,
	0xc4, 0xdd, 0xa7, 0x06, 0xa9, 0xf5, 0x5d, 0x87, 0x3b, 0x08, 0x59, 0xb4, 0xb7, 0x3f, 0x60, 0xfe,
	0xaa, 0x26, 0x34, 0xd4, 0xa2, 0xe1, 0x58, 0x96, 0x63, 0xfb, 0x32, 0xb5, 0x18, 0xd6, 0x50, 0x4b,
	0xd4, 0xe6, 0xc4, 0xb5, 0xf5, 0x9e, 0x5c, 0x23, 0x53, 0xe7, 0x7a, 0xd4, 0xa6, 0x5a, 0x64, 0x46,
	0x97, 0x58, 0xba, 0xbf, 0xc2, 0x5f, 0xc3, 0xb2, 0x46, 0x3a, 0x94, 0x71, 0xe2, 0x6e, 0x3b, 0x26,
	0xd1, 0xc8, 0xb3, 0x01, 0x61, 0x1c, 0xbd, 0x0b, 0x99, 0xb6, 0xce, 0x48, 0x55, 0xb9, 0xac, 0xac,
	0x2f, 0x6d, 0x5e, 0xac, 0x45, 0x78, 0x48, 0x02, 0xf7, 0x59, 0xe7, 0x8e, 0xce, 0x88, 0x26, 0x34,
	0xd1, 0xfb, 0x90, 0xd7, 0x4d, 0xd3, 0x25, 0x8c, 0x55, 0x53, 0xc7, 0x6c, 0xba, 0xed, 0xeb, 0x68,
	0x43, 0x65, 0xfc, 0x83, 0x02, 0x2b, 0x51, 0x06, 0xac, 0xef, 0xd8, 0x8c, 0xa0, 0x5b, 0x90, 0x63,
	0x5c, 0xe7, 0x03, 0x26, 0x49, 0xfc, 0x3f, 0xd1, 0x5e, 0x53, 0xa8, 0x68, 0x52, 0x15, 0xdd, 0x81,
	0x25, 0x6a, 0x53, 0xde, 0xea, 0xeb, 0xae, 0x6e, 0x0d, 0x99, 0xbc, 0x11, 0xdd, 0x19, 0xc4, 0xa8,
	0x61, 0x53, 0xbe, 0x23, 0x14, 0x35, 0xa0, 0xc1, 0x6f, 0xfc, 0x18, 0x56, 0x9b, 0x5d, 0xe7, 0x60,
	0xcb, 0xe9, 0xf5, 0x88, 0xc1, 0xa9, 0x63, 0x9f, 0x3c, 0x28, 0x08, 0x32, 0x66, 0xbb, 0x51, 0x17,
	0x3c, 0xd2, 0x9a, 0xf8, 0x8d, 0x19, 0xac, 0xc5, 0xcd, 0xcf, 0xe3, 0xf1, 0x5b, 0x70, 0xce, 0x08,
	0x4c, 0x35, 0xea, 0x9e, 0xcf, 0xe9, 0xf5, 0xb4, 0x16, 0x15, 0xe2, 0xdf, 0x15, 0x58, 0xfd, 0xc4,
	0xd1, 0xcd, 0x53, 0x72, 0x0a, 0x61, 0x28, 0x86, 0x01, 0xab, 0x69, 0xf1, 0x2d, 0x22, 0x43, 0x1f,
	0x42, 0xce, 0x4f, 0xbd, 0x6a, 0x46, 0x60, 0x5d, 0x89, 0x62, 0xc9, 0xb4, 0x1c, 0x31, 0x6c, 0x0a,
	0x81, 0x26, 0x37, 0xe1, 0xef, 0x14, 0xa8, 0x6a, 0xa4, 0x47, 0x74, 0x46, 0xce, 0xd0, 0x0b, 0xfc,
	0x8d, 0x02, 0x2b, 0xde, 0xf9, 0xed, 0xe8, 0x2e, 0xa7, 0x67, 0x43, 0xa1, 0xef, 0x27, 0x68, 0x88,
	0xc1, 0x3c, 0x09, 0x84, 0xa1, 0xd8, 0x1f, 0x5a, 0x1a, 0xe5, 0x4f, 0x44, 0x86, 0x2d, 0x28, 0x07,
	0x68, 0xde, 0x76, 0xc2, 0xd0, 0x65, 0x58, 0x0a, 0xa9, 0x08, 0xc0, 0xb4, 0x16, 0x16, 0xa1, 0x0f,
	0x20, 0xeb, 0x41, 0x10, 0xe1, 0x5f, 0x69, 0x13, 0xd7, 0xc6, 0x8b, 0x59, 0x2d, 0x6a, 0x55, 0xf3,
	0x37, 0xe0, 0x5f, 0x14, 0x58, 0x8b, 0xe1, 0xbd, 0xfa, 0x74, 0x8d, 0xc7, 0x25, 0x93, 0x10, 0x97,
	0xdf, 0x14, 0xb8, 0x30, 0x46, 0x74, 0x9e, 0xc3, 0xd8, 0x85, 0xb5, 0x00, 0xa0, 0x65, 0x12, 0x66,
	0xb8, 0xb4, 0xef, 0xfd, 0xf6, 0x8f, 0x65, 0x69, 0xf3, 0xcd, 0xe9, 0x41, 0x64, 0xda, 0x6a, 0x60,
	0xa2, 0x1e, 0xb2, 0x80, 0xff, 0x56, 0x60, 0xc5, 0xab, 0x01, 0x67, 0x97, 0xb9, 0xb3, 0xc4, 0x34,
	0x54, 0x26, 0xb2, 0x27, 0x29, 0x13, 0xbf, 0x2a, 0x70, 0x41, 0x96, 0x89, 0xff, 0xb6, 0xa3, 0xf8,
	0x27, 0x05, 0xd4, 0x2d, 0x97, 0xe8, 0x9c, 0x7c, 0xe6, 0x1d, 0xe3, 0x56, 0x57, 0xb7, 0x6d, 0xd2,
	0x9b, 0x2f, 0x7f, 0xae, 0x41, 0xd9, 0xf5, 0x9d, 0x6d, 0x19, 0xbe, 0x3d, 0x41, 0xbd, 0xa0, 0x95,
	0xa4, 0x58, 0xa2, 0xa0, 0x2b, 0x50, 0x72, 0x09, 0x1b, 0xf4, 0x46, 0x7a, 0x69, 0xa1, 0x77, 0xce,
	0x97, 0x4a, 0x35, 0xfc, 0xb3, 0x02, 0x17, 0x6e, 0x9b, 0x66, 0x98, 0xe0, 0x1c, 0x57, 0xf1, 0x26,
	0x9c, 0x8f, 0xb1, 0x93, 0xa1, 0x2d, 0x68, 0x95, 0x28, 0xbf, 0x46, 0x1d, 0x5d, 0x87, 0x4a, 0x94,
	0xa1, 0x0c, 0x75, 0x41, 0x2b, 0x47, 0x38, 0x36, 0xea, 0xf8, 0x0f, 0x05, 0x54, 0x8d, 0x58, 0xce,
	0x3e, 0x49, 0x24, 0x7a, 0xa2, 0x48, 0x0e, 0xbd, 0x4b, 0xcd, 0xe7, 0x5d, 0xfa, 0x05, 0xbc, 0xcb,
	0x24, 0x7b, 0xf7, 0x04, 0xd6, 0x1e, 0xe9, 0xdc, 0xe8, 0xd6, 0xad, 0xf9, 0x4f, 0xe0, 0x12, 0x40,
	0x80, 0xe7, 0xd7, 0x94, 0x82, 0x16, 0x92, 0xe0, 0x7f, 0x52, 0x80, 0xbc, 0x1a, 0xd1, 0x24, 0x1d,
	0x8b, 0xd8, 0xfc, 0xd5, 0x5f, 0x9c, 0xd8, 0xb3, 0x92, 0x19, 0x7f, 0x56, 0x2e, 0x01, 0x30, 0x9f,
	0x9d, 0xe7, 0x42, 0x56, 0x5c, 0xac, 0x90, 0x04, 0xa9, 0xb0, 0xb8, 0x47, 0x49, 0xcf, 0xf4, 0xbe,
	0xe6, 0xc4, 0xd7, 0x60, 0x8d, 0x3e, 0x86, 0x92, 0xd4, 0x6c, 0x89, 0x97, 0x86, 0x55, 0xf3, 0x49,
	0x65, 0xd5, 0xeb, 0x9a, 0x6b, 0x32, 0x04, 0xa2, 0xa6, 0x36, 0xec, 0x3d, 0x47, 0x3b, 0xc7, 0x42,
	0x92, 0x70, 0x9d, 0x5a, 0x3c, 0x49, 0x9d, 0xfa, 0x4b, 0x81, 0x55, 0x59, 0xa7, 0xce, 0x2c, 0xd8,
	0xb3, 0x94, 0xe3, 0x39, 0xc2, 0x8d, 0xff, 0x54, 0x60, 0x49, 0x3a, 0xe7, 0x45, 0x10, 0x5d, 0x84,
	0x42, 0xb0, 0x53, 0x76, 0x0c, 0x23, 0xc1, 0x18, 0xe3, 0xd4, 0xf4, 0xf4, 0x48, 0x8f, 0xa7, 0xc7,
	0xff, 0x60, 0xd1, 0x22, 0x56, 0x8b, 0xd1, 0x23, 0x22, 0xb3, 0x27, 0x6f, 0x11, 0xab, 0x49, 0x8f,
	0x88, 0xf7, 0xc9, 0x1e, 0x58, 0x2d, 0xd7, 0x39, 0x60, 0xe2, 0x6d, 0x49, 0x6b, 0x79, 0x7b, 0x60,
	0x69, 0xce, 0x01, 0x43, 0xaf, 0x01, 0x50, 0xdb, 0x24, 0xcf, 0x5b, 0xb6, 0x6e, 0x91, 0x6a, 0x4e,
	0x5c, 0xc4, 0x82, 0x90, 0x6c, 0xeb, 0x16, 0x41, 0x55, 0xc8, 0x8b, 0x45, 0xa3, 0x5e, 0xcd, 0xfb,
	0x1b, 0xe5, 0x12, 0xef, 0x01, 0x0a, 0x79, 0x38, 0xd7, 0xc5, 0x0c, 0x85, 0x39, 0x15, 0x0f, 0x33,
	0xfe, 0x56, 0x81, 0xe5, 0x08, 0xd0, 0x3c, 0xaf, 0xc4, 0x7b, 0x90, 0xa5, 0xf6, 0x9e, 0x33, 0x6c,
	0x2a, 0x5e, 0x4f, 0x6a, 0x2a, 0xc2, 0x60, 0xbe, 0xf6, 0x8d, 0x23, 0x28, 0x45, 0x5b, 0x0d, 0x54,
	0x84, 0xc5, 0x6d, 0x87, 0xdf, 0x7d, 0x4e, 0x19, 0xaf, 0x2c, 0xa0, 0x12, 0xc0, 0xb6, 0xc3, 0x77,
	0x5c, 0xc2, 0x88, 0xcd, 0x2b, 0x0a, 0x02, 0xc8, 0x7d, 0x6a, 0xd7, 0x29, 0x7b, 0x5a, 0x49, 0xa1,
	0x65, 0xd9, 0x41, 0xea, 0xbd, 0x86, 0x7d, 0x9f, 0x58, 0x8e, 0x7b, 0x58, 0x49, 0x7b, 0xdb, 0x83,
	0x55, 0x06, 0x55, 0xa0, 0x18, 0xa8, 0xdc, 0xdb, 0x79, 0x58, 0xc9, 0xa2, 0x02, 0x64, 0xfd, 0x9f,
	0xb9, 0xcd, 0xef, 0x01, 0x8a, 0xa2, 0xb8, 0x37, 0xfd, 0x61, 0x16, 0x19, 0x50, 0x0c, 0x8f, 0x8d,
	0xe8, 0x5a, 0x92, 0x13, 0x09, 0xa3, 0xad, 0xba, 0x3e, 0x5d, 0xd1, 0x8f, 0x2d, 0x5e, 0x40, 0x4f,
	0xa0, 0x1c, 0x9d, 0xd5, 0x18, 0xba, 0x9e, 0x18, 0xac, 0xa4, 0x79, 0x51, 0xbd, 0x31, 0x8b, 0x6a,
	0x80, 0xd5, 0x81, 0x52, 0xa4, 0xab, 0x67, 0x68, 0x7d, 0xd2, 0xfe, 0x78, 0x63, 0xa3, 0x5e, 0x9f,
	0x41, 0x33, 0x00, 0xfa, 0x1c, 0x4a, 0x91, 0x36, 0x70, 0x02, 0x50, 0x52, 0xab, 0xa8, 0x1e, 0x97,
	0x5e, 0x78, 0x01, 0xb5, 0xe0, 0x7c, 0xbc, 0xf7, 0x62, 0xe8, 0x66, 0x72, 0xc0, 0x13, 0x5b, 0xb4,
	0x69, 0x00, 0xbb, 0x3e, 0xf7, 0x51, 0x00, 0x93, 0xcf, 0x23, 0x71, 0xd4, 0x9d, 0x66, 0xfb, 0xab,
	0x80, 0x7c, 0xc8, 0xfc, 0xdb, 0xc7, 0x90, 0x7f, 0x61, 0x84, 0x36, 0xa0, 0xf1, 0x86, 0x0f, 0xa9,
	0x89, 0x9b, 0xee, 0x5a, 0x7d, 0x7e, 0xa8, 0xd6, 0x92, 0xe0, 0x27, 0x37, 0x8d, 0x78, 0x01, 0x3d,
	0x02, 0x74, 0x8f, 0xf0, 0x07, 0xd4, 0x22, 0x0f, 0xa8, 0xf1, 0x74, 0x16, 0x8c, 0xd8, 0xe3, 0x27,
	0x17, 0x4d, 0xee, 0x52, 0xbb, 0x13, 0x49, 0x9b, 0x95, 0x7b, 0x44, 0x3c, 0x7e, 0x94, 0x71, 0x6a,
	0xb0, 0x97, 0x68, 0xda, 0x11, 0x9c, 0xe3, 0x13, 0xe6, 0x8d, 0x59, 0x66, 0x1d, 0x19, 0xf8, 0x9b,
	0x33, 0xe9, 0x06, 0x80, 0xbb, 0x02, 0x70, 0xcb, 0xb1, 0xfa, 0x8e, 0x3d, 0x7a, 0xd1, 0x8f, 0xf3,
	0xe4, 0xea, 0x84, 0xff, 0x90, 0x62, 0x36, 0xf0, 0x02, 0x32, 0xa0, 0xe4, 0xc5, 0x29, 0xf4, 0xec,
	0x5d, 0x9d, 0x56, 0x5f, 0xa5, 0x13, 0xd7, 0xa6, 0xea, 0x0d, 0x1d, 0xd8, 0xfc, 0x71, 0x11, 0x0a,
	0x22, 0x01, 0x44, 0xed, 0x3b, 0xb5, 0x33, 0x7f, 0x00, 0x65, 0x79, 0xe6, 0x2f, 0xf3, 0xb8, 0x4f,
	0x33, 0xfa, 0x8f, 0xa1, 0x1c, 0x9b, 0x57, 0x92, 0xeb, 0xcf, 0x84, 0xa1, 0x66, 0xda, 0x0d, 0x36,
	0x00, 0x8d, 0x0f, 0x1a, 0xa8, 0x96, 0x5c, 0x24, 0x26, 0x0d, 0x24, 0xd3, 0x40, 0xbe, 0x84, 0x72,
	0xac, 0xe1, 0x4f, 0xbe, 0x0b, 0xc9, 0x53, 0xc1, 0x34, 0xeb, 0x0f, 0xa1, 0x18, 0xea, 0xf0, 0x59,
	0x72, 0x76, 0x8e, 0xcf, 0x00, 0x67, 0x5f, 0x3d, 0x4f, 0xfd, 0x71, 0xf9, 0x02, 0xca, 0xd1, 0x8e,
	0x7c, 0xc2, 0x6b, 0x9f, 0xd8, 0xb6, 0x4f, 0xcf, 0x9c, 0xd3, 0x2f, 0x0b, 0x77, 0x6e, 0xef, 0x7e,
	0xd4, 0xa1, 0xbc, 0x3b, 0x68, 0x7b, 0xf0, 0x1b, 0x47, 0xb4, 0xd7, 0xa3, 0x47, 0x9c, 0x18, 0xdd,
	0x0d, 0xdf, 0xc2, 0x3b, 0x26, 0x65, 0xdc, 0xa5, 0xed, 0x01, 0x27, 0xe6, 0xc6, 0xf0, 0x12, 0x6d,
	0x08, 0xb3, 0x1b, 0xc2, 0x6c, 0xbf, 0xdd, 0xce, 0x89, 0xe5, 0xad, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x8d, 0x29, 0x97, 0x83, 0x90, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	ShowCollections(ctx context.Context, in *ShowCollectionRequest, opts ...grpc.CallOption) (*ShowCollectionResponse, error)
	ShowPartitions(ctx context.Context, in *ShowPartitionRequest, opts ...grpc.CallOption) (*ShowPartitionResponse, error)
	LoadPartitions(ctx context.Context, in *LoadPartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleasePartitions(ctx context.Context, in *ReleasePartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	CreateQueryChannel(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*CreateQueryChannelResponse, error)
	GetTimeTickChannel(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetPartitionStates(ctx context.Context, in *PartitionStatesRequest, opts ...grpc.CallOption) (*PartitionStatesResponse, error)
	GetComponentStates(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*internalpb2.ComponentStates, error)
	GetSegmentInfo(ctx context.Context, in *SegmentInfoRequest, opts ...grpc.CallOption) (*SegmentInfoResponse, error)
}

type queryServiceClient struct {
	cc *grpc.ClientConn
}

func NewQueryServiceClient(cc *grpc.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ShowCollections(ctx context.Context, in *ShowCollectionRequest, opts ...grpc.CallOption) (*ShowCollectionResponse, error) {
	out := new(ShowCollectionResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/ShowCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ShowPartitions(ctx context.Context, in *ShowPartitionRequest, opts ...grpc.CallOption) (*ShowPartitionResponse, error) {
	out := new(ShowPartitionResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/ShowPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) LoadPartitions(ctx context.Context, in *LoadPartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/LoadPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ReleasePartitions(ctx context.Context, in *ReleasePartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/ReleasePartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/LoadCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/ReleaseCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CreateQueryChannel(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*CreateQueryChannelResponse, error) {
	out := new(CreateQueryChannelResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/CreateQueryChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTimeTickChannel(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/GetTimeTickChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStatisticsChannel(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/GetStatisticsChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPartitionStates(ctx context.Context, in *PartitionStatesRequest, opts ...grpc.CallOption) (*PartitionStatesResponse, error) {
	out := new(PartitionStatesResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/GetPartitionStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetComponentStates(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*internalpb2.ComponentStates, error) {
	out := new(internalpb2.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetSegmentInfo(ctx context.Context, in *SegmentInfoRequest, opts ...grpc.CallOption) (*SegmentInfoResponse, error) {
	out := new(SegmentInfoResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/GetSegmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	ShowCollections(context.Context, *ShowCollectionRequest) (*ShowCollectionResponse, error)
	ShowPartitions(context.Context, *ShowPartitionRequest) (*ShowPartitionResponse, error)
	LoadPartitions(context.Context, *LoadPartitionRequest) (*commonpb.Status, error)
	ReleasePartitions(context.Context, *ReleasePartitionRequest) (*commonpb.Status, error)
	LoadCollection(context.Context, *LoadCollectionRequest) (*commonpb.Status, error)
	ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error)
	CreateQueryChannel(context.Context, *commonpb.Empty) (*CreateQueryChannelResponse, error)
	GetTimeTickChannel(context.Context, *commonpb.Empty) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(context.Context, *commonpb.Empty) (*milvuspb.StringResponse, error)
	GetPartitionStates(context.Context, *PartitionStatesRequest) (*PartitionStatesResponse, error)
	GetComponentStates(context.Context, *commonpb.Empty) (*internalpb2.ComponentStates, error)
	GetSegmentInfo(context.Context, *SegmentInfoRequest) (*SegmentInfoResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) RegisterNode(ctx context.Context, req *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (*UnimplementedQueryServiceServer) ShowCollections(ctx context.Context, req *ShowCollectionRequest) (*ShowCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (*UnimplementedQueryServiceServer) ShowPartitions(ctx context.Context, req *ShowPartitionRequest) (*ShowPartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (*UnimplementedQueryServiceServer) LoadPartitions(ctx context.Context, req *LoadPartitionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPartitions not implemented")
}
func (*UnimplementedQueryServiceServer) ReleasePartitions(ctx context.Context, req *ReleasePartitionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePartitions not implemented")
}
func (*UnimplementedQueryServiceServer) LoadCollection(ctx context.Context, req *LoadCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCollection not implemented")
}
func (*UnimplementedQueryServiceServer) ReleaseCollection(ctx context.Context, req *ReleaseCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (*UnimplementedQueryServiceServer) CreateQueryChannel(ctx context.Context, req *commonpb.Empty) (*CreateQueryChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueryChannel not implemented")
}
func (*UnimplementedQueryServiceServer) GetTimeTickChannel(ctx context.Context, req *commonpb.Empty) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTickChannel not implemented")
}
func (*UnimplementedQueryServiceServer) GetStatisticsChannel(ctx context.Context, req *commonpb.Empty) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (*UnimplementedQueryServiceServer) GetPartitionStates(ctx context.Context, req *PartitionStatesRequest) (*PartitionStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionStates not implemented")
}
func (*UnimplementedQueryServiceServer) GetComponentStates(ctx context.Context, req *commonpb.Empty) (*internalpb2.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (*UnimplementedQueryServiceServer) GetSegmentInfo(ctx context.Context, req *SegmentInfoRequest) (*SegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentInfo not implemented")
}

func RegisterQueryServiceServer(s *grpc.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/ShowCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ShowCollections(ctx, req.(*ShowCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/ShowPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ShowPartitions(ctx, req.(*ShowPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_LoadPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).LoadPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/LoadPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).LoadPartitions(ctx, req.(*LoadPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ReleasePartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ReleasePartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/ReleasePartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ReleasePartitions(ctx, req.(*ReleasePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_LoadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).LoadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/LoadCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).LoadCollection(ctx, req.(*LoadCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/ReleaseCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ReleaseCollection(ctx, req.(*ReleaseCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CreateQueryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CreateQueryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/CreateQueryChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CreateQueryChannel(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTimeTickChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTimeTickChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/GetTimeTickChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTimeTickChannel(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/GetStatisticsChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStatisticsChannel(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPartitionStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPartitionStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/GetPartitionStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPartitionStates(ctx, req.(*PartitionStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetComponentStates(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/GetSegmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetSegmentInfo(ctx, req.(*SegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.query.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _QueryService_RegisterNode_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _QueryService_ShowCollections_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _QueryService_ShowPartitions_Handler,
		},
		{
			MethodName: "LoadPartitions",
			Handler:    _QueryService_LoadPartitions_Handler,
		},
		{
			MethodName: "ReleasePartitions",
			Handler:    _QueryService_ReleasePartitions_Handler,
		},
		{
			MethodName: "LoadCollection",
			Handler:    _QueryService_LoadCollection_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _QueryService_ReleaseCollection_Handler,
		},
		{
			MethodName: "CreateQueryChannel",
			Handler:    _QueryService_CreateQueryChannel_Handler,
		},
		{
			MethodName: "GetTimeTickChannel",
			Handler:    _QueryService_GetTimeTickChannel_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _QueryService_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "GetPartitionStates",
			Handler:    _QueryService_GetPartitionStates_Handler,
		},
		{
			MethodName: "GetComponentStates",
			Handler:    _QueryService_GetComponentStates_Handler,
		},
		{
			MethodName: "GetSegmentInfo",
			Handler:    _QueryService_GetSegmentInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query_service.proto",
}

// QueryNodeClient is the client API for QueryNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryNodeClient interface {
	GetTimeTickChannel(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetStatsChannel(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetComponentStates(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*internalpb2.ComponentStates, error)
	AddQueryChannel(ctx context.Context, in *AddQueryChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	RemoveQueryChannel(ctx context.Context, in *RemoveQueryChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	WatchDmChannels(ctx context.Context, in *WatchDmChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	LoadSegments(ctx context.Context, in *LoadSegmentRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleasePartitions(ctx context.Context, in *ReleasePartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseSegments(ctx context.Context, in *ReleaseSegmentRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetSegmentInfo(ctx context.Context, in *SegmentInfoRequest, opts ...grpc.CallOption) (*SegmentInfoResponse, error)
}

type queryNodeClient struct {
	cc *grpc.ClientConn
}

func NewQueryNodeClient(cc *grpc.ClientConn) QueryNodeClient {
	return &queryNodeClient{cc}
}

func (c *queryNodeClient) GetTimeTickChannel(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetTimeTickChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetStatsChannel(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetStatsChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetComponentStates(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*internalpb2.ComponentStates, error) {
	out := new(internalpb2.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) AddQueryChannel(ctx context.Context, in *AddQueryChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/AddQueryChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) RemoveQueryChannel(ctx context.Context, in *RemoveQueryChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/RemoveQueryChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) WatchDmChannels(ctx context.Context, in *WatchDmChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/WatchDmChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) LoadSegments(ctx context.Context, in *LoadSegmentRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/LoadSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/ReleaseCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleasePartitions(ctx context.Context, in *ReleasePartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/ReleasePartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleaseSegments(ctx context.Context, in *ReleaseSegmentRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/ReleaseSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetSegmentInfo(ctx context.Context, in *SegmentInfoRequest, opts ...grpc.CallOption) (*SegmentInfoResponse, error) {
	out := new(SegmentInfoResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetSegmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryNodeServer is the server API for QueryNode service.
type QueryNodeServer interface {
	GetTimeTickChannel(context.Context, *commonpb.Empty) (*milvuspb.StringResponse, error)
	GetStatsChannel(context.Context, *commonpb.Empty) (*milvuspb.StringResponse, error)
	GetComponentStates(context.Context, *commonpb.Empty) (*internalpb2.ComponentStates, error)
	AddQueryChannel(context.Context, *AddQueryChannelsRequest) (*commonpb.Status, error)
	RemoveQueryChannel(context.Context, *RemoveQueryChannelsRequest) (*commonpb.Status, error)
	WatchDmChannels(context.Context, *WatchDmChannelsRequest) (*commonpb.Status, error)
	LoadSegments(context.Context, *LoadSegmentRequest) (*commonpb.Status, error)
	ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error)
	ReleasePartitions(context.Context, *ReleasePartitionRequest) (*commonpb.Status, error)
	ReleaseSegments(context.Context, *ReleaseSegmentRequest) (*commonpb.Status, error)
	GetSegmentInfo(context.Context, *SegmentInfoRequest) (*SegmentInfoResponse, error)
}

// UnimplementedQueryNodeServer can be embedded to have forward compatible implementations.
type UnimplementedQueryNodeServer struct {
}

func (*UnimplementedQueryNodeServer) GetTimeTickChannel(ctx context.Context, req *commonpb.Empty) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTickChannel not implemented")
}
func (*UnimplementedQueryNodeServer) GetStatsChannel(ctx context.Context, req *commonpb.Empty) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsChannel not implemented")
}
func (*UnimplementedQueryNodeServer) GetComponentStates(ctx context.Context, req *commonpb.Empty) (*internalpb2.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (*UnimplementedQueryNodeServer) AddQueryChannel(ctx context.Context, req *AddQueryChannelsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQueryChannel not implemented")
}
func (*UnimplementedQueryNodeServer) RemoveQueryChannel(ctx context.Context, req *RemoveQueryChannelsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQueryChannel not implemented")
}
func (*UnimplementedQueryNodeServer) WatchDmChannels(ctx context.Context, req *WatchDmChannelsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDmChannels not implemented")
}
func (*UnimplementedQueryNodeServer) LoadSegments(ctx context.Context, req *LoadSegmentRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSegments not implemented")
}
func (*UnimplementedQueryNodeServer) ReleaseCollection(ctx context.Context, req *ReleaseCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (*UnimplementedQueryNodeServer) ReleasePartitions(ctx context.Context, req *ReleasePartitionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePartitions not implemented")
}
func (*UnimplementedQueryNodeServer) ReleaseSegments(ctx context.Context, req *ReleaseSegmentRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSegments not implemented")
}
func (*UnimplementedQueryNodeServer) GetSegmentInfo(ctx context.Context, req *SegmentInfoRequest) (*SegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentInfo not implemented")
}

func RegisterQueryNodeServer(s *grpc.Server, srv QueryNodeServer) {
	s.RegisterService(&_QueryNode_serviceDesc, srv)
}

func _QueryNode_GetTimeTickChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetTimeTickChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetTimeTickChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetTimeTickChannel(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetStatsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetStatsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetStatsChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetStatsChannel(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetComponentStates(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_AddQueryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQueryChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).AddQueryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/AddQueryChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).AddQueryChannel(ctx, req.(*AddQueryChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_RemoveQueryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQueryChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).RemoveQueryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/RemoveQueryChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).RemoveQueryChannel(ctx, req.(*RemoveQueryChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_WatchDmChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchDmChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).WatchDmChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/WatchDmChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).WatchDmChannels(ctx, req.(*WatchDmChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_LoadSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).LoadSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/LoadSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).LoadSegments(ctx, req.(*LoadSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/ReleaseCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleaseCollection(ctx, req.(*ReleaseCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleasePartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleasePartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/ReleasePartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleasePartitions(ctx, req.(*ReleasePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleaseSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleaseSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/ReleaseSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleaseSegments(ctx, req.(*ReleaseSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetSegmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetSegmentInfo(ctx, req.(*SegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.query.QueryNode",
	HandlerType: (*QueryNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimeTickChannel",
			Handler:    _QueryNode_GetTimeTickChannel_Handler,
		},
		{
			MethodName: "GetStatsChannel",
			Handler:    _QueryNode_GetStatsChannel_Handler,
		},
		{
			MethodName: "GetComponentStates",
			Handler:    _QueryNode_GetComponentStates_Handler,
		},
		{
			MethodName: "AddQueryChannel",
			Handler:    _QueryNode_AddQueryChannel_Handler,
		},
		{
			MethodName: "RemoveQueryChannel",
			Handler:    _QueryNode_RemoveQueryChannel_Handler,
		},
		{
			MethodName: "WatchDmChannels",
			Handler:    _QueryNode_WatchDmChannels_Handler,
		},
		{
			MethodName: "LoadSegments",
			Handler:    _QueryNode_LoadSegments_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _QueryNode_ReleaseCollection_Handler,
		},
		{
			MethodName: "ReleasePartitions",
			Handler:    _QueryNode_ReleasePartitions_Handler,
		},
		{
			MethodName: "ReleaseSegments",
			Handler:    _QueryNode_ReleaseSegments_Handler,
		},
		{
			MethodName: "GetSegmentInfo",
			Handler:    _QueryNode_GetSegmentInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query_service.proto",
}
