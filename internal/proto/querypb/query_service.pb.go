// Code generated by protoc-gen-go. DO NOT EDIT.
// source: query_service.proto

package querypb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	commonpb "github.com/milvus-io/milvus/internal/proto/commonpb"
	datapb "github.com/milvus-io/milvus/internal/proto/datapb"
	internalpb "github.com/milvus-io/milvus/internal/proto/internalpb"
	milvuspb "github.com/milvus-io/milvus/internal/proto/milvuspb"
	schemapb "github.com/milvus-io/milvus/internal/proto/schemapb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PartitionState int32

const (
	PartitionState_NotExist        PartitionState = 0
	PartitionState_NotPresent      PartitionState = 1
	PartitionState_OnDisk          PartitionState = 2
	PartitionState_PartialInMemory PartitionState = 3
	PartitionState_InMemory        PartitionState = 4
	PartitionState_PartialInGPU    PartitionState = 5
	PartitionState_InGPU           PartitionState = 6
)

var PartitionState_name = map[int32]string{
	0: "NotExist",
	1: "NotPresent",
	2: "OnDisk",
	3: "PartialInMemory",
	4: "InMemory",
	5: "PartialInGPU",
	6: "InGPU",
}

var PartitionState_value = map[string]int32{
	"NotExist":        0,
	"NotPresent":      1,
	"OnDisk":          2,
	"PartialInMemory": 3,
	"InMemory":        4,
	"PartialInGPU":    5,
	"InGPU":           6,
}

func (x PartitionState) String() string {
	return proto.EnumName(PartitionState_name, int32(x))
}

func (PartitionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{0}
}

type TriggerCondition int32

const (
	TriggerCondition_handoff     TriggerCondition = 0
	TriggerCondition_loadBalance TriggerCondition = 1
	TriggerCondition_grpcRequest TriggerCondition = 2
	TriggerCondition_nodeDown    TriggerCondition = 3
)

var TriggerCondition_name = map[int32]string{
	0: "handoff",
	1: "loadBalance",
	2: "grpcRequest",
	3: "nodeDown",
}

var TriggerCondition_value = map[string]int32{
	"handoff":     0,
	"loadBalance": 1,
	"grpcRequest": 2,
	"nodeDown":    3,
}

func (x TriggerCondition) String() string {
	return proto.EnumName(TriggerCondition_name, int32(x))
}

func (TriggerCondition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{1}
}

//----------------etcd-----------------
type SegmentState int32

const (
	SegmentState_None    SegmentState = 0
	SegmentState_Growing SegmentState = 1
	SegmentState_Frozen  SegmentState = 2
	SegmentState_sealing SegmentState = 3
	SegmentState_sealed  SegmentState = 4
)

var SegmentState_name = map[int32]string{
	0: "None",
	1: "Growing",
	2: "Frozen",
	3: "sealing",
	4: "sealed",
}

var SegmentState_value = map[string]int32{
	"None":    0,
	"Growing": 1,
	"Frozen":  2,
	"sealing": 3,
	"sealed":  4,
}

func (x SegmentState) String() string {
	return proto.EnumName(SegmentState_name, int32(x))
}

func (SegmentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{2}
}

//--------------------query service proto------------------
type RegisterNodeRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Address              *commonpb.Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RegisterNodeRequest) Reset()         { *m = RegisterNodeRequest{} }
func (m *RegisterNodeRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterNodeRequest) ProtoMessage()    {}
func (*RegisterNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{0}
}

func (m *RegisterNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterNodeRequest.Unmarshal(m, b)
}
func (m *RegisterNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterNodeRequest.Marshal(b, m, deterministic)
}
func (m *RegisterNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterNodeRequest.Merge(m, src)
}
func (m *RegisterNodeRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterNodeRequest.Size(m)
}
func (m *RegisterNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterNodeRequest proto.InternalMessageInfo

func (m *RegisterNodeRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *RegisterNodeRequest) GetAddress() *commonpb.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type RegisterNodeResponse struct {
	Status               *commonpb.Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InitParams           *internalpb.InitParams `protobuf:"bytes,2,opt,name=init_params,json=initParams,proto3" json:"init_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RegisterNodeResponse) Reset()         { *m = RegisterNodeResponse{} }
func (m *RegisterNodeResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterNodeResponse) ProtoMessage()    {}
func (*RegisterNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{1}
}

func (m *RegisterNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterNodeResponse.Unmarshal(m, b)
}
func (m *RegisterNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterNodeResponse.Marshal(b, m, deterministic)
}
func (m *RegisterNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterNodeResponse.Merge(m, src)
}
func (m *RegisterNodeResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterNodeResponse.Size(m)
}
func (m *RegisterNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterNodeResponse proto.InternalMessageInfo

func (m *RegisterNodeResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RegisterNodeResponse) GetInitParams() *internalpb.InitParams {
	if m != nil {
		return m.InitParams
	}
	return nil
}

type ShowCollectionsRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ShowCollectionsRequest) Reset()         { *m = ShowCollectionsRequest{} }
func (m *ShowCollectionsRequest) String() string { return proto.CompactTextString(m) }
func (*ShowCollectionsRequest) ProtoMessage()    {}
func (*ShowCollectionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{2}
}

func (m *ShowCollectionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShowCollectionsRequest.Unmarshal(m, b)
}
func (m *ShowCollectionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShowCollectionsRequest.Marshal(b, m, deterministic)
}
func (m *ShowCollectionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowCollectionsRequest.Merge(m, src)
}
func (m *ShowCollectionsRequest) XXX_Size() int {
	return xxx_messageInfo_ShowCollectionsRequest.Size(m)
}
func (m *ShowCollectionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowCollectionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShowCollectionsRequest proto.InternalMessageInfo

func (m *ShowCollectionsRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ShowCollectionsRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

type ShowCollectionsResponse struct {
	Status               *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionIDs        []int64          `protobuf:"varint,2,rep,packed,name=collectionIDs,proto3" json:"collectionIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ShowCollectionsResponse) Reset()         { *m = ShowCollectionsResponse{} }
func (m *ShowCollectionsResponse) String() string { return proto.CompactTextString(m) }
func (*ShowCollectionsResponse) ProtoMessage()    {}
func (*ShowCollectionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{3}
}

func (m *ShowCollectionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShowCollectionsResponse.Unmarshal(m, b)
}
func (m *ShowCollectionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShowCollectionsResponse.Marshal(b, m, deterministic)
}
func (m *ShowCollectionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowCollectionsResponse.Merge(m, src)
}
func (m *ShowCollectionsResponse) XXX_Size() int {
	return xxx_messageInfo_ShowCollectionsResponse.Size(m)
}
func (m *ShowCollectionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowCollectionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShowCollectionsResponse proto.InternalMessageInfo

func (m *ShowCollectionsResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ShowCollectionsResponse) GetCollectionIDs() []int64 {
	if m != nil {
		return m.CollectionIDs
	}
	return nil
}

type ShowPartitionsRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ShowPartitionsRequest) Reset()         { *m = ShowPartitionsRequest{} }
func (m *ShowPartitionsRequest) String() string { return proto.CompactTextString(m) }
func (*ShowPartitionsRequest) ProtoMessage()    {}
func (*ShowPartitionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{4}
}

func (m *ShowPartitionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShowPartitionsRequest.Unmarshal(m, b)
}
func (m *ShowPartitionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShowPartitionsRequest.Marshal(b, m, deterministic)
}
func (m *ShowPartitionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowPartitionsRequest.Merge(m, src)
}
func (m *ShowPartitionsRequest) XXX_Size() int {
	return xxx_messageInfo_ShowPartitionsRequest.Size(m)
}
func (m *ShowPartitionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowPartitionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShowPartitionsRequest proto.InternalMessageInfo

func (m *ShowPartitionsRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ShowPartitionsRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *ShowPartitionsRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

type ShowPartitionsResponse struct {
	Status               *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionIDs         []int64          `protobuf:"varint,2,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ShowPartitionsResponse) Reset()         { *m = ShowPartitionsResponse{} }
func (m *ShowPartitionsResponse) String() string { return proto.CompactTextString(m) }
func (*ShowPartitionsResponse) ProtoMessage()    {}
func (*ShowPartitionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{5}
}

func (m *ShowPartitionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShowPartitionsResponse.Unmarshal(m, b)
}
func (m *ShowPartitionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShowPartitionsResponse.Marshal(b, m, deterministic)
}
func (m *ShowPartitionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowPartitionsResponse.Merge(m, src)
}
func (m *ShowPartitionsResponse) XXX_Size() int {
	return xxx_messageInfo_ShowPartitionsResponse.Size(m)
}
func (m *ShowPartitionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowPartitionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShowPartitionsResponse proto.InternalMessageInfo

func (m *ShowPartitionsResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ShowPartitionsResponse) GetPartitionIDs() []int64 {
	if m != nil {
		return m.PartitionIDs
	}
	return nil
}

type LoadCollectionRequest struct {
	Base                 *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64                      `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LoadCollectionRequest) Reset()         { *m = LoadCollectionRequest{} }
func (m *LoadCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*LoadCollectionRequest) ProtoMessage()    {}
func (*LoadCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{6}
}

func (m *LoadCollectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadCollectionRequest.Unmarshal(m, b)
}
func (m *LoadCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadCollectionRequest.Marshal(b, m, deterministic)
}
func (m *LoadCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadCollectionRequest.Merge(m, src)
}
func (m *LoadCollectionRequest) XXX_Size() int {
	return xxx_messageInfo_LoadCollectionRequest.Size(m)
}
func (m *LoadCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadCollectionRequest proto.InternalMessageInfo

func (m *LoadCollectionRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *LoadCollectionRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *LoadCollectionRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *LoadCollectionRequest) GetSchema() *schemapb.CollectionSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type ReleaseCollectionRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	NodeID               int64             `protobuf:"varint,4,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReleaseCollectionRequest) Reset()         { *m = ReleaseCollectionRequest{} }
func (m *ReleaseCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseCollectionRequest) ProtoMessage()    {}
func (*ReleaseCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{7}
}

func (m *ReleaseCollectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseCollectionRequest.Unmarshal(m, b)
}
func (m *ReleaseCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseCollectionRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseCollectionRequest.Merge(m, src)
}
func (m *ReleaseCollectionRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseCollectionRequest.Size(m)
}
func (m *ReleaseCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseCollectionRequest proto.InternalMessageInfo

func (m *ReleaseCollectionRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ReleaseCollectionRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *ReleaseCollectionRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *ReleaseCollectionRequest) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type LoadPartitionsRequest struct {
	Base                 *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64                      `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64                    `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LoadPartitionsRequest) Reset()         { *m = LoadPartitionsRequest{} }
func (m *LoadPartitionsRequest) String() string { return proto.CompactTextString(m) }
func (*LoadPartitionsRequest) ProtoMessage()    {}
func (*LoadPartitionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{8}
}

func (m *LoadPartitionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadPartitionsRequest.Unmarshal(m, b)
}
func (m *LoadPartitionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadPartitionsRequest.Marshal(b, m, deterministic)
}
func (m *LoadPartitionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadPartitionsRequest.Merge(m, src)
}
func (m *LoadPartitionsRequest) XXX_Size() int {
	return xxx_messageInfo_LoadPartitionsRequest.Size(m)
}
func (m *LoadPartitionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadPartitionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadPartitionsRequest proto.InternalMessageInfo

func (m *LoadPartitionsRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *LoadPartitionsRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *LoadPartitionsRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *LoadPartitionsRequest) GetPartitionIDs() []int64 {
	if m != nil {
		return m.PartitionIDs
	}
	return nil
}

func (m *LoadPartitionsRequest) GetSchema() *schemapb.CollectionSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type ReleasePartitionsRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64           `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	NodeID               int64             `protobuf:"varint,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReleasePartitionsRequest) Reset()         { *m = ReleasePartitionsRequest{} }
func (m *ReleasePartitionsRequest) String() string { return proto.CompactTextString(m) }
func (*ReleasePartitionsRequest) ProtoMessage()    {}
func (*ReleasePartitionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{9}
}

func (m *ReleasePartitionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleasePartitionsRequest.Unmarshal(m, b)
}
func (m *ReleasePartitionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleasePartitionsRequest.Marshal(b, m, deterministic)
}
func (m *ReleasePartitionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleasePartitionsRequest.Merge(m, src)
}
func (m *ReleasePartitionsRequest) XXX_Size() int {
	return xxx_messageInfo_ReleasePartitionsRequest.Size(m)
}
func (m *ReleasePartitionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleasePartitionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleasePartitionsRequest proto.InternalMessageInfo

func (m *ReleasePartitionsRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ReleasePartitionsRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *ReleasePartitionsRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *ReleasePartitionsRequest) GetPartitionIDs() []int64 {
	if m != nil {
		return m.PartitionIDs
	}
	return nil
}

func (m *ReleasePartitionsRequest) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type CreateQueryChannelRequest struct {
	CollectionID         int64    `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	ProxyID              int64    `protobuf:"varint,2,opt,name=proxyID,proto3" json:"proxyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateQueryChannelRequest) Reset()         { *m = CreateQueryChannelRequest{} }
func (m *CreateQueryChannelRequest) String() string { return proto.CompactTextString(m) }
func (*CreateQueryChannelRequest) ProtoMessage()    {}
func (*CreateQueryChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{10}
}

func (m *CreateQueryChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateQueryChannelRequest.Unmarshal(m, b)
}
func (m *CreateQueryChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateQueryChannelRequest.Marshal(b, m, deterministic)
}
func (m *CreateQueryChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateQueryChannelRequest.Merge(m, src)
}
func (m *CreateQueryChannelRequest) XXX_Size() int {
	return xxx_messageInfo_CreateQueryChannelRequest.Size(m)
}
func (m *CreateQueryChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateQueryChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateQueryChannelRequest proto.InternalMessageInfo

func (m *CreateQueryChannelRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *CreateQueryChannelRequest) GetProxyID() int64 {
	if m != nil {
		return m.ProxyID
	}
	return 0
}

type CreateQueryChannelResponse struct {
	Status               *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RequestChannel       string           `protobuf:"bytes,2,opt,name=request_channel,json=requestChannel,proto3" json:"request_channel,omitempty"`
	ResultChannel        string           `protobuf:"bytes,3,opt,name=result_channel,json=resultChannel,proto3" json:"result_channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateQueryChannelResponse) Reset()         { *m = CreateQueryChannelResponse{} }
func (m *CreateQueryChannelResponse) String() string { return proto.CompactTextString(m) }
func (*CreateQueryChannelResponse) ProtoMessage()    {}
func (*CreateQueryChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{11}
}

func (m *CreateQueryChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateQueryChannelResponse.Unmarshal(m, b)
}
func (m *CreateQueryChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateQueryChannelResponse.Marshal(b, m, deterministic)
}
func (m *CreateQueryChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateQueryChannelResponse.Merge(m, src)
}
func (m *CreateQueryChannelResponse) XXX_Size() int {
	return xxx_messageInfo_CreateQueryChannelResponse.Size(m)
}
func (m *CreateQueryChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateQueryChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateQueryChannelResponse proto.InternalMessageInfo

func (m *CreateQueryChannelResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CreateQueryChannelResponse) GetRequestChannel() string {
	if m != nil {
		return m.RequestChannel
	}
	return ""
}

func (m *CreateQueryChannelResponse) GetResultChannel() string {
	if m != nil {
		return m.ResultChannel
	}
	return ""
}

type GetPartitionStatesRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64           `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetPartitionStatesRequest) Reset()         { *m = GetPartitionStatesRequest{} }
func (m *GetPartitionStatesRequest) String() string { return proto.CompactTextString(m) }
func (*GetPartitionStatesRequest) ProtoMessage()    {}
func (*GetPartitionStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{12}
}

func (m *GetPartitionStatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPartitionStatesRequest.Unmarshal(m, b)
}
func (m *GetPartitionStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPartitionStatesRequest.Marshal(b, m, deterministic)
}
func (m *GetPartitionStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartitionStatesRequest.Merge(m, src)
}
func (m *GetPartitionStatesRequest) XXX_Size() int {
	return xxx_messageInfo_GetPartitionStatesRequest.Size(m)
}
func (m *GetPartitionStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartitionStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartitionStatesRequest proto.InternalMessageInfo

func (m *GetPartitionStatesRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetPartitionStatesRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *GetPartitionStatesRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *GetPartitionStatesRequest) GetPartitionIDs() []int64 {
	if m != nil {
		return m.PartitionIDs
	}
	return nil
}

type PartitionStates struct {
	PartitionID          int64          `protobuf:"varint,1,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	State                PartitionState `protobuf:"varint,2,opt,name=state,proto3,enum=milvus.proto.query.PartitionState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PartitionStates) Reset()         { *m = PartitionStates{} }
func (m *PartitionStates) String() string { return proto.CompactTextString(m) }
func (*PartitionStates) ProtoMessage()    {}
func (*PartitionStates) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{13}
}

func (m *PartitionStates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionStates.Unmarshal(m, b)
}
func (m *PartitionStates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionStates.Marshal(b, m, deterministic)
}
func (m *PartitionStates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionStates.Merge(m, src)
}
func (m *PartitionStates) XXX_Size() int {
	return xxx_messageInfo_PartitionStates.Size(m)
}
func (m *PartitionStates) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionStates.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionStates proto.InternalMessageInfo

func (m *PartitionStates) GetPartitionID() int64 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *PartitionStates) GetState() PartitionState {
	if m != nil {
		return m.State
	}
	return PartitionState_NotExist
}

type GetPartitionStatesResponse struct {
	Status                *commonpb.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionDescriptions []*PartitionStates `protobuf:"bytes,2,rep,name=partition_descriptions,json=partitionDescriptions,proto3" json:"partition_descriptions,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}           `json:"-"`
	XXX_unrecognized      []byte             `json:"-"`
	XXX_sizecache         int32              `json:"-"`
}

func (m *GetPartitionStatesResponse) Reset()         { *m = GetPartitionStatesResponse{} }
func (m *GetPartitionStatesResponse) String() string { return proto.CompactTextString(m) }
func (*GetPartitionStatesResponse) ProtoMessage()    {}
func (*GetPartitionStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{14}
}

func (m *GetPartitionStatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPartitionStatesResponse.Unmarshal(m, b)
}
func (m *GetPartitionStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPartitionStatesResponse.Marshal(b, m, deterministic)
}
func (m *GetPartitionStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartitionStatesResponse.Merge(m, src)
}
func (m *GetPartitionStatesResponse) XXX_Size() int {
	return xxx_messageInfo_GetPartitionStatesResponse.Size(m)
}
func (m *GetPartitionStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartitionStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartitionStatesResponse proto.InternalMessageInfo

func (m *GetPartitionStatesResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetPartitionStatesResponse) GetPartitionDescriptions() []*PartitionStates {
	if m != nil {
		return m.PartitionDescriptions
	}
	return nil
}

type GetSegmentInfoRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentIDs           []int64           `protobuf:"varint,2,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetSegmentInfoRequest) Reset()         { *m = GetSegmentInfoRequest{} }
func (m *GetSegmentInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetSegmentInfoRequest) ProtoMessage()    {}
func (*GetSegmentInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{15}
}

func (m *GetSegmentInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSegmentInfoRequest.Unmarshal(m, b)
}
func (m *GetSegmentInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSegmentInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetSegmentInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSegmentInfoRequest.Merge(m, src)
}
func (m *GetSegmentInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetSegmentInfoRequest.Size(m)
}
func (m *GetSegmentInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSegmentInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSegmentInfoRequest proto.InternalMessageInfo

func (m *GetSegmentInfoRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetSegmentInfoRequest) GetSegmentIDs() []int64 {
	if m != nil {
		return m.SegmentIDs
	}
	return nil
}

type SegmentInfo struct {
	SegmentID            int64        `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	CollectionID         int64        `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID          int64        `protobuf:"varint,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	NodeID               int64        `protobuf:"varint,4,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	MemSize              int64        `protobuf:"varint,5,opt,name=mem_size,json=memSize,proto3" json:"mem_size,omitempty"`
	NumRows              int64        `protobuf:"varint,6,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	IndexName            string       `protobuf:"bytes,7,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	IndexID              int64        `protobuf:"varint,8,opt,name=indexID,proto3" json:"indexID,omitempty"`
	ChannelID            string       `protobuf:"bytes,9,opt,name=channelID,proto3" json:"channelID,omitempty"`
	SegmentState         SegmentState `protobuf:"varint,10,opt,name=segment_state,json=segmentState,proto3,enum=milvus.proto.query.SegmentState" json:"segment_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SegmentInfo) Reset()         { *m = SegmentInfo{} }
func (m *SegmentInfo) String() string { return proto.CompactTextString(m) }
func (*SegmentInfo) ProtoMessage()    {}
func (*SegmentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{16}
}

func (m *SegmentInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentInfo.Unmarshal(m, b)
}
func (m *SegmentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentInfo.Marshal(b, m, deterministic)
}
func (m *SegmentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentInfo.Merge(m, src)
}
func (m *SegmentInfo) XXX_Size() int {
	return xxx_messageInfo_SegmentInfo.Size(m)
}
func (m *SegmentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentInfo proto.InternalMessageInfo

func (m *SegmentInfo) GetSegmentID() int64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *SegmentInfo) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *SegmentInfo) GetPartitionID() int64 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *SegmentInfo) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *SegmentInfo) GetMemSize() int64 {
	if m != nil {
		return m.MemSize
	}
	return 0
}

func (m *SegmentInfo) GetNumRows() int64 {
	if m != nil {
		return m.NumRows
	}
	return 0
}

func (m *SegmentInfo) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *SegmentInfo) GetIndexID() int64 {
	if m != nil {
		return m.IndexID
	}
	return 0
}

func (m *SegmentInfo) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *SegmentInfo) GetSegmentState() SegmentState {
	if m != nil {
		return m.SegmentState
	}
	return SegmentState_None
}

type GetSegmentInfoResponse struct {
	Status               *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Infos                []*SegmentInfo   `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetSegmentInfoResponse) Reset()         { *m = GetSegmentInfoResponse{} }
func (m *GetSegmentInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetSegmentInfoResponse) ProtoMessage()    {}
func (*GetSegmentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{17}
}

func (m *GetSegmentInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSegmentInfoResponse.Unmarshal(m, b)
}
func (m *GetSegmentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSegmentInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetSegmentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSegmentInfoResponse.Merge(m, src)
}
func (m *GetSegmentInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetSegmentInfoResponse.Size(m)
}
func (m *GetSegmentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSegmentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSegmentInfoResponse proto.InternalMessageInfo

func (m *GetSegmentInfoResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetSegmentInfoResponse) GetInfos() []*SegmentInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

//-----------------query node proto----------------
type AddQueryChannelRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int64             `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	RequestChannelID     string            `protobuf:"bytes,4,opt,name=request_channelID,json=requestChannelID,proto3" json:"request_channelID,omitempty"`
	ResultChannelID      string            `protobuf:"bytes,5,opt,name=result_channelID,json=resultChannelID,proto3" json:"result_channelID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddQueryChannelRequest) Reset()         { *m = AddQueryChannelRequest{} }
func (m *AddQueryChannelRequest) String() string { return proto.CompactTextString(m) }
func (*AddQueryChannelRequest) ProtoMessage()    {}
func (*AddQueryChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{18}
}

func (m *AddQueryChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddQueryChannelRequest.Unmarshal(m, b)
}
func (m *AddQueryChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddQueryChannelRequest.Marshal(b, m, deterministic)
}
func (m *AddQueryChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddQueryChannelRequest.Merge(m, src)
}
func (m *AddQueryChannelRequest) XXX_Size() int {
	return xxx_messageInfo_AddQueryChannelRequest.Size(m)
}
func (m *AddQueryChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddQueryChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddQueryChannelRequest proto.InternalMessageInfo

func (m *AddQueryChannelRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AddQueryChannelRequest) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *AddQueryChannelRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *AddQueryChannelRequest) GetRequestChannelID() string {
	if m != nil {
		return m.RequestChannelID
	}
	return ""
}

func (m *AddQueryChannelRequest) GetResultChannelID() string {
	if m != nil {
		return m.ResultChannelID
	}
	return ""
}

type RemoveQueryChannelRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int64             `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	RequestChannelID     string            `protobuf:"bytes,4,opt,name=request_channelID,json=requestChannelID,proto3" json:"request_channelID,omitempty"`
	ResultChannelID      string            `protobuf:"bytes,5,opt,name=result_channelID,json=resultChannelID,proto3" json:"result_channelID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RemoveQueryChannelRequest) Reset()         { *m = RemoveQueryChannelRequest{} }
func (m *RemoveQueryChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveQueryChannelRequest) ProtoMessage()    {}
func (*RemoveQueryChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{19}
}

func (m *RemoveQueryChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveQueryChannelRequest.Unmarshal(m, b)
}
func (m *RemoveQueryChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveQueryChannelRequest.Marshal(b, m, deterministic)
}
func (m *RemoveQueryChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveQueryChannelRequest.Merge(m, src)
}
func (m *RemoveQueryChannelRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveQueryChannelRequest.Size(m)
}
func (m *RemoveQueryChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveQueryChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveQueryChannelRequest proto.InternalMessageInfo

func (m *RemoveQueryChannelRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *RemoveQueryChannelRequest) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *RemoveQueryChannelRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *RemoveQueryChannelRequest) GetRequestChannelID() string {
	if m != nil {
		return m.RequestChannelID
	}
	return ""
}

func (m *RemoveQueryChannelRequest) GetResultChannelID() string {
	if m != nil {
		return m.ResultChannelID
	}
	return ""
}

type WatchDmChannelsRequest struct {
	Base                 *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int64                      `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CollectionID         int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID          int64                      `protobuf:"varint,4,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	Infos                []*datapb.VchannelInfo     `protobuf:"bytes,5,rep,name=infos,proto3" json:"infos,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,6,opt,name=schema,proto3" json:"schema,omitempty"`
	ExcludeInfos         []*datapb.SegmentInfo      `protobuf:"bytes,7,rep,name=exclude_infos,json=excludeInfos,proto3" json:"exclude_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *WatchDmChannelsRequest) Reset()         { *m = WatchDmChannelsRequest{} }
func (m *WatchDmChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchDmChannelsRequest) ProtoMessage()    {}
func (*WatchDmChannelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{20}
}

func (m *WatchDmChannelsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchDmChannelsRequest.Unmarshal(m, b)
}
func (m *WatchDmChannelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchDmChannelsRequest.Marshal(b, m, deterministic)
}
func (m *WatchDmChannelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchDmChannelsRequest.Merge(m, src)
}
func (m *WatchDmChannelsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchDmChannelsRequest.Size(m)
}
func (m *WatchDmChannelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchDmChannelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchDmChannelsRequest proto.InternalMessageInfo

func (m *WatchDmChannelsRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *WatchDmChannelsRequest) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *WatchDmChannelsRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *WatchDmChannelsRequest) GetPartitionID() int64 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *WatchDmChannelsRequest) GetInfos() []*datapb.VchannelInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *WatchDmChannelsRequest) GetSchema() *schemapb.CollectionSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *WatchDmChannelsRequest) GetExcludeInfos() []*datapb.SegmentInfo {
	if m != nil {
		return m.ExcludeInfos
	}
	return nil
}

//used for handoff task
type SegmentLoadInfo struct {
	SegmentID            int64                 `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	PartitionID          int64                 `protobuf:"varint,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	CollectionID         int64                 `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	DbID                 int64                 `protobuf:"varint,4,opt,name=dbID,proto3" json:"dbID,omitempty"`
	FlushTime            int64                 `protobuf:"varint,5,opt,name=flush_time,json=flushTime,proto3" json:"flush_time,omitempty"`
	BinlogPaths          []*datapb.FieldBinlog `protobuf:"bytes,6,rep,name=binlog_paths,json=binlogPaths,proto3" json:"binlog_paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SegmentLoadInfo) Reset()         { *m = SegmentLoadInfo{} }
func (m *SegmentLoadInfo) String() string { return proto.CompactTextString(m) }
func (*SegmentLoadInfo) ProtoMessage()    {}
func (*SegmentLoadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{21}
}

func (m *SegmentLoadInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentLoadInfo.Unmarshal(m, b)
}
func (m *SegmentLoadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentLoadInfo.Marshal(b, m, deterministic)
}
func (m *SegmentLoadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentLoadInfo.Merge(m, src)
}
func (m *SegmentLoadInfo) XXX_Size() int {
	return xxx_messageInfo_SegmentLoadInfo.Size(m)
}
func (m *SegmentLoadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentLoadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentLoadInfo proto.InternalMessageInfo

func (m *SegmentLoadInfo) GetSegmentID() int64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *SegmentLoadInfo) GetPartitionID() int64 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *SegmentLoadInfo) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *SegmentLoadInfo) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *SegmentLoadInfo) GetFlushTime() int64 {
	if m != nil {
		return m.FlushTime
	}
	return 0
}

func (m *SegmentLoadInfo) GetBinlogPaths() []*datapb.FieldBinlog {
	if m != nil {
		return m.BinlogPaths
	}
	return nil
}

type LoadSegmentsRequest struct {
	Base                 *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int64                      `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Infos                []*SegmentLoadInfo         `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	LoadCondition        TriggerCondition           `protobuf:"varint,5,opt,name=load_condition,json=loadCondition,proto3,enum=milvus.proto.query.TriggerCondition" json:"load_condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LoadSegmentsRequest) Reset()         { *m = LoadSegmentsRequest{} }
func (m *LoadSegmentsRequest) String() string { return proto.CompactTextString(m) }
func (*LoadSegmentsRequest) ProtoMessage()    {}
func (*LoadSegmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{22}
}

func (m *LoadSegmentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadSegmentsRequest.Unmarshal(m, b)
}
func (m *LoadSegmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadSegmentsRequest.Marshal(b, m, deterministic)
}
func (m *LoadSegmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadSegmentsRequest.Merge(m, src)
}
func (m *LoadSegmentsRequest) XXX_Size() int {
	return xxx_messageInfo_LoadSegmentsRequest.Size(m)
}
func (m *LoadSegmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadSegmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadSegmentsRequest proto.InternalMessageInfo

func (m *LoadSegmentsRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *LoadSegmentsRequest) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *LoadSegmentsRequest) GetInfos() []*SegmentLoadInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *LoadSegmentsRequest) GetSchema() *schemapb.CollectionSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *LoadSegmentsRequest) GetLoadCondition() TriggerCondition {
	if m != nil {
		return m.LoadCondition
	}
	return TriggerCondition_handoff
}

type ReleaseSegmentsRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int64             `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DbID                 int64             `protobuf:"varint,3,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64             `protobuf:"varint,4,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64           `protobuf:"varint,5,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	SegmentIDs           []int64           `protobuf:"varint,6,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReleaseSegmentsRequest) Reset()         { *m = ReleaseSegmentsRequest{} }
func (m *ReleaseSegmentsRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseSegmentsRequest) ProtoMessage()    {}
func (*ReleaseSegmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{23}
}

func (m *ReleaseSegmentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseSegmentsRequest.Unmarshal(m, b)
}
func (m *ReleaseSegmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseSegmentsRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseSegmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseSegmentsRequest.Merge(m, src)
}
func (m *ReleaseSegmentsRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseSegmentsRequest.Size(m)
}
func (m *ReleaseSegmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseSegmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseSegmentsRequest proto.InternalMessageInfo

func (m *ReleaseSegmentsRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ReleaseSegmentsRequest) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *ReleaseSegmentsRequest) GetDbID() int64 {
	if m != nil {
		return m.DbID
	}
	return 0
}

func (m *ReleaseSegmentsRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *ReleaseSegmentsRequest) GetPartitionIDs() []int64 {
	if m != nil {
		return m.PartitionIDs
	}
	return nil
}

func (m *ReleaseSegmentsRequest) GetSegmentIDs() []int64 {
	if m != nil {
		return m.SegmentIDs
	}
	return nil
}

type DmChannelInfo struct {
	NodeIDLoaded         int64    `protobuf:"varint,1,opt,name=nodeID_loaded,json=nodeIDLoaded,proto3" json:"nodeID_loaded,omitempty"`
	ChannelIDs           []string `protobuf:"bytes,2,rep,name=channelIDs,proto3" json:"channelIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DmChannelInfo) Reset()         { *m = DmChannelInfo{} }
func (m *DmChannelInfo) String() string { return proto.CompactTextString(m) }
func (*DmChannelInfo) ProtoMessage()    {}
func (*DmChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{24}
}

func (m *DmChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DmChannelInfo.Unmarshal(m, b)
}
func (m *DmChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DmChannelInfo.Marshal(b, m, deterministic)
}
func (m *DmChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DmChannelInfo.Merge(m, src)
}
func (m *DmChannelInfo) XXX_Size() int {
	return xxx_messageInfo_DmChannelInfo.Size(m)
}
func (m *DmChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DmChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DmChannelInfo proto.InternalMessageInfo

func (m *DmChannelInfo) GetNodeIDLoaded() int64 {
	if m != nil {
		return m.NodeIDLoaded
	}
	return 0
}

func (m *DmChannelInfo) GetChannelIDs() []string {
	if m != nil {
		return m.ChannelIDs
	}
	return nil
}

type QueryChannelInfo struct {
	CollectionID         int64    `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	QueryChannelID       string   `protobuf:"bytes,2,opt,name=query_channelID,json=queryChannelID,proto3" json:"query_channelID,omitempty"`
	QueryResultChannelID string   `protobuf:"bytes,3,opt,name=query_result_channelID,json=queryResultChannelID,proto3" json:"query_result_channelID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryChannelInfo) Reset()         { *m = QueryChannelInfo{} }
func (m *QueryChannelInfo) String() string { return proto.CompactTextString(m) }
func (*QueryChannelInfo) ProtoMessage()    {}
func (*QueryChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{25}
}

func (m *QueryChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryChannelInfo.Unmarshal(m, b)
}
func (m *QueryChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryChannelInfo.Marshal(b, m, deterministic)
}
func (m *QueryChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChannelInfo.Merge(m, src)
}
func (m *QueryChannelInfo) XXX_Size() int {
	return xxx_messageInfo_QueryChannelInfo.Size(m)
}
func (m *QueryChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChannelInfo proto.InternalMessageInfo

func (m *QueryChannelInfo) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *QueryChannelInfo) GetQueryChannelID() string {
	if m != nil {
		return m.QueryChannelID
	}
	return ""
}

func (m *QueryChannelInfo) GetQueryResultChannelID() string {
	if m != nil {
		return m.QueryResultChannelID
	}
	return ""
}

type CollectionInfo struct {
	CollectionID         int64                      `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64                    `protobuf:"varint,2,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	ChannelInfos         []*DmChannelInfo           `protobuf:"bytes,3,rep,name=channel_infos,json=channelInfos,proto3" json:"channel_infos,omitempty"`
	LoadCollection       bool                       `protobuf:"varint,4,opt,name=load_collection,json=loadCollection,proto3" json:"load_collection,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CollectionInfo) Reset()         { *m = CollectionInfo{} }
func (m *CollectionInfo) String() string { return proto.CompactTextString(m) }
func (*CollectionInfo) ProtoMessage()    {}
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{26}
}

func (m *CollectionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionInfo.Unmarshal(m, b)
}
func (m *CollectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionInfo.Marshal(b, m, deterministic)
}
func (m *CollectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionInfo.Merge(m, src)
}
func (m *CollectionInfo) XXX_Size() int {
	return xxx_messageInfo_CollectionInfo.Size(m)
}
func (m *CollectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionInfo proto.InternalMessageInfo

func (m *CollectionInfo) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *CollectionInfo) GetPartitionIDs() []int64 {
	if m != nil {
		return m.PartitionIDs
	}
	return nil
}

func (m *CollectionInfo) GetChannelInfos() []*DmChannelInfo {
	if m != nil {
		return m.ChannelInfos
	}
	return nil
}

func (m *CollectionInfo) GetLoadCollection() bool {
	if m != nil {
		return m.LoadCollection
	}
	return false
}

func (m *CollectionInfo) GetSchema() *schemapb.CollectionSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type HandoffSegments struct {
	Base                 *commonpb.MsgBase  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Infos                []*SegmentLoadInfo `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *HandoffSegments) Reset()         { *m = HandoffSegments{} }
func (m *HandoffSegments) String() string { return proto.CompactTextString(m) }
func (*HandoffSegments) ProtoMessage()    {}
func (*HandoffSegments) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{27}
}

func (m *HandoffSegments) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandoffSegments.Unmarshal(m, b)
}
func (m *HandoffSegments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandoffSegments.Marshal(b, m, deterministic)
}
func (m *HandoffSegments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandoffSegments.Merge(m, src)
}
func (m *HandoffSegments) XXX_Size() int {
	return xxx_messageInfo_HandoffSegments.Size(m)
}
func (m *HandoffSegments) XXX_DiscardUnknown() {
	xxx_messageInfo_HandoffSegments.DiscardUnknown(m)
}

var xxx_messageInfo_HandoffSegments proto.InternalMessageInfo

func (m *HandoffSegments) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *HandoffSegments) GetInfos() []*SegmentLoadInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type LoadBalanceSegmentInfo struct {
	SegmentID            int64    `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	PartitionID          int64    `protobuf:"varint,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	CollectionID         int64    `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	SourceNodeID         int64    `protobuf:"varint,4,opt,name=source_nodeID,json=sourceNodeID,proto3" json:"source_nodeID,omitempty"`
	DstNodeID            int64    `protobuf:"varint,5,opt,name=dst_nodeID,json=dstNodeID,proto3" json:"dst_nodeID,omitempty"`
	SourceDone           bool     `protobuf:"varint,6,opt,name=source_done,json=sourceDone,proto3" json:"source_done,omitempty"`
	DstDone              bool     `protobuf:"varint,7,opt,name=dst_done,json=dstDone,proto3" json:"dst_done,omitempty"`
	ValidInfo            bool     `protobuf:"varint,8,opt,name=valid_info,json=validInfo,proto3" json:"valid_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadBalanceSegmentInfo) Reset()         { *m = LoadBalanceSegmentInfo{} }
func (m *LoadBalanceSegmentInfo) String() string { return proto.CompactTextString(m) }
func (*LoadBalanceSegmentInfo) ProtoMessage()    {}
func (*LoadBalanceSegmentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{28}
}

func (m *LoadBalanceSegmentInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadBalanceSegmentInfo.Unmarshal(m, b)
}
func (m *LoadBalanceSegmentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadBalanceSegmentInfo.Marshal(b, m, deterministic)
}
func (m *LoadBalanceSegmentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalanceSegmentInfo.Merge(m, src)
}
func (m *LoadBalanceSegmentInfo) XXX_Size() int {
	return xxx_messageInfo_LoadBalanceSegmentInfo.Size(m)
}
func (m *LoadBalanceSegmentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalanceSegmentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalanceSegmentInfo proto.InternalMessageInfo

func (m *LoadBalanceSegmentInfo) GetSegmentID() int64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *LoadBalanceSegmentInfo) GetPartitionID() int64 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *LoadBalanceSegmentInfo) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *LoadBalanceSegmentInfo) GetSourceNodeID() int64 {
	if m != nil {
		return m.SourceNodeID
	}
	return 0
}

func (m *LoadBalanceSegmentInfo) GetDstNodeID() int64 {
	if m != nil {
		return m.DstNodeID
	}
	return 0
}

func (m *LoadBalanceSegmentInfo) GetSourceDone() bool {
	if m != nil {
		return m.SourceDone
	}
	return false
}

func (m *LoadBalanceSegmentInfo) GetDstDone() bool {
	if m != nil {
		return m.DstDone
	}
	return false
}

func (m *LoadBalanceSegmentInfo) GetValidInfo() bool {
	if m != nil {
		return m.ValidInfo
	}
	return false
}

type LoadBalanceRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SourceNodeIDs        []int64           `protobuf:"varint,2,rep,packed,name=source_nodeIDs,json=sourceNodeIDs,proto3" json:"source_nodeIDs,omitempty"`
	BalanceReason        TriggerCondition  `protobuf:"varint,3,opt,name=balance_reason,json=balanceReason,proto3,enum=milvus.proto.query.TriggerCondition" json:"balance_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LoadBalanceRequest) Reset()         { *m = LoadBalanceRequest{} }
func (m *LoadBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*LoadBalanceRequest) ProtoMessage()    {}
func (*LoadBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fcb6756dc1afb8d, []int{29}
}

func (m *LoadBalanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadBalanceRequest.Unmarshal(m, b)
}
func (m *LoadBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadBalanceRequest.Marshal(b, m, deterministic)
}
func (m *LoadBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalanceRequest.Merge(m, src)
}
func (m *LoadBalanceRequest) XXX_Size() int {
	return xxx_messageInfo_LoadBalanceRequest.Size(m)
}
func (m *LoadBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalanceRequest proto.InternalMessageInfo

func (m *LoadBalanceRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *LoadBalanceRequest) GetSourceNodeIDs() []int64 {
	if m != nil {
		return m.SourceNodeIDs
	}
	return nil
}

func (m *LoadBalanceRequest) GetBalanceReason() TriggerCondition {
	if m != nil {
		return m.BalanceReason
	}
	return TriggerCondition_handoff
}

func init() {
	proto.RegisterEnum("milvus.proto.query.PartitionState", PartitionState_name, PartitionState_value)
	proto.RegisterEnum("milvus.proto.query.TriggerCondition", TriggerCondition_name, TriggerCondition_value)
	proto.RegisterEnum("milvus.proto.query.SegmentState", SegmentState_name, SegmentState_value)
	proto.RegisterType((*RegisterNodeRequest)(nil), "milvus.proto.query.RegisterNodeRequest")
	proto.RegisterType((*RegisterNodeResponse)(nil), "milvus.proto.query.RegisterNodeResponse")
	proto.RegisterType((*ShowCollectionsRequest)(nil), "milvus.proto.query.ShowCollectionsRequest")
	proto.RegisterType((*ShowCollectionsResponse)(nil), "milvus.proto.query.ShowCollectionsResponse")
	proto.RegisterType((*ShowPartitionsRequest)(nil), "milvus.proto.query.ShowPartitionsRequest")
	proto.RegisterType((*ShowPartitionsResponse)(nil), "milvus.proto.query.ShowPartitionsResponse")
	proto.RegisterType((*LoadCollectionRequest)(nil), "milvus.proto.query.LoadCollectionRequest")
	proto.RegisterType((*ReleaseCollectionRequest)(nil), "milvus.proto.query.ReleaseCollectionRequest")
	proto.RegisterType((*LoadPartitionsRequest)(nil), "milvus.proto.query.LoadPartitionsRequest")
	proto.RegisterType((*ReleasePartitionsRequest)(nil), "milvus.proto.query.ReleasePartitionsRequest")
	proto.RegisterType((*CreateQueryChannelRequest)(nil), "milvus.proto.query.CreateQueryChannelRequest")
	proto.RegisterType((*CreateQueryChannelResponse)(nil), "milvus.proto.query.CreateQueryChannelResponse")
	proto.RegisterType((*GetPartitionStatesRequest)(nil), "milvus.proto.query.GetPartitionStatesRequest")
	proto.RegisterType((*PartitionStates)(nil), "milvus.proto.query.PartitionStates")
	proto.RegisterType((*GetPartitionStatesResponse)(nil), "milvus.proto.query.GetPartitionStatesResponse")
	proto.RegisterType((*GetSegmentInfoRequest)(nil), "milvus.proto.query.GetSegmentInfoRequest")
	proto.RegisterType((*SegmentInfo)(nil), "milvus.proto.query.SegmentInfo")
	proto.RegisterType((*GetSegmentInfoResponse)(nil), "milvus.proto.query.GetSegmentInfoResponse")
	proto.RegisterType((*AddQueryChannelRequest)(nil), "milvus.proto.query.AddQueryChannelRequest")
	proto.RegisterType((*RemoveQueryChannelRequest)(nil), "milvus.proto.query.RemoveQueryChannelRequest")
	proto.RegisterType((*WatchDmChannelsRequest)(nil), "milvus.proto.query.WatchDmChannelsRequest")
	proto.RegisterType((*SegmentLoadInfo)(nil), "milvus.proto.query.SegmentLoadInfo")
	proto.RegisterType((*LoadSegmentsRequest)(nil), "milvus.proto.query.LoadSegmentsRequest")
	proto.RegisterType((*ReleaseSegmentsRequest)(nil), "milvus.proto.query.ReleaseSegmentsRequest")
	proto.RegisterType((*DmChannelInfo)(nil), "milvus.proto.query.DmChannelInfo")
	proto.RegisterType((*QueryChannelInfo)(nil), "milvus.proto.query.QueryChannelInfo")
	proto.RegisterType((*CollectionInfo)(nil), "milvus.proto.query.CollectionInfo")
	proto.RegisterType((*HandoffSegments)(nil), "milvus.proto.query.HandoffSegments")
	proto.RegisterType((*LoadBalanceSegmentInfo)(nil), "milvus.proto.query.LoadBalanceSegmentInfo")
	proto.RegisterType((*LoadBalanceRequest)(nil), "milvus.proto.query.LoadBalanceRequest")
}

func init() { proto.RegisterFile("query_service.proto", fileDescriptor_5fcb6756dc1afb8d) }

var fileDescriptor_5fcb6756dc1afb8d = []byte{
	// 1898 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcd, 0x73, 0x1c, 0x47,
	0x15, 0xd7, 0xec, 0xae, 0x56, 0xda, 0xb7, 0x5f, 0x93, 0xb6, 0x2d, 0xd6, 0x4b, 0x9c, 0x38, 0xe3,
	0x18, 0x3b, 0x0a, 0x91, 0x53, 0x4a, 0xa0, 0xc8, 0x81, 0x83, 0xa5, 0x8d, 0xc5, 0x42, 0xa2, 0x88,
	0x91, 0x09, 0x85, 0xcb, 0xc5, 0x30, 0x3b, 0xd3, 0xda, 0x9d, 0xca, 0x4c, 0xf7, 0x6a, 0x7a, 0xd6,
	0xb2, 0x7d, 0x80, 0xa2, 0x8a, 0x03, 0x37, 0x4e, 0x9c, 0xe0, 0xc2, 0x85, 0x2a, 0x0e, 0xfc, 0x03,
	0x9c, 0xf2, 0x8f, 0x40, 0x15, 0x45, 0x6e, 0x9c, 0xb9, 0x53, 0xd3, 0xdd, 0x33, 0x3b, 0x1f, 0xbd,
	0xd2, 0x5a, 0xb2, 0x63, 0x17, 0xc5, 0x6d, 0xfb, 0xf5, 0xeb, 0xf7, 0xdd, 0xbf, 0x79, 0xfd, 0x16,
	0x2e, 0x1d, 0xcf, 0x70, 0xf8, 0xc4, 0x62, 0x38, 0x7c, 0xe4, 0x39, 0x78, 0x6b, 0x1a, 0xd2, 0x88,
	0x22, 0x14, 0x78, 0xfe, 0xa3, 0x19, 0x13, 0xab, 0x2d, 0xce, 0xd1, 0x6f, 0x39, 0x34, 0x08, 0x28,
	0x11, 0xb4, 0x7e, 0x2b, 0xcb, 0xd1, 0xef, 0x78, 0x24, 0xc2, 0x21, 0xb1, 0xfd, 0x64, 0x97, 0x39,
	0x13, 0x1c, 0xd8, 0x72, 0x85, 0x5c, 0x3b, 0xb2, 0xf3, 0x1a, 0x8c, 0x5f, 0xc1, 0x25, 0x13, 0x8f,
	0x3d, 0x16, 0xe1, 0x70, 0x9f, 0xba, 0xd8, 0xc4, 0xc7, 0x33, 0xcc, 0x22, 0xf4, 0x3e, 0xd4, 0x46,
	0x36, 0xc3, 0x3d, 0xed, 0xba, 0x76, 0xbb, 0xb9, 0xfd, 0xfa, 0x56, 0xce, 0x0e, 0x69, 0xc0, 0xa7,
	0x6c, 0xbc, 0x63, 0x33, 0x6c, 0x72, 0x4e, 0xf4, 0x5d, 0x58, 0xb3, 0x5d, 0x37, 0xc4, 0x8c, 0xf5,
	0x2a, 0xa7, 0x1c, 0xba, 0x2b, 0x78, 0xcc, 0x84, 0xd9, 0xf8, 0x9d, 0x06, 0x97, 0xf3, 0x16, 0xb0,
	0x29, 0x25, 0x0c, 0xa3, 0x0f, 0xa0, 0xce, 0x22, 0x3b, 0x9a, 0x31, 0x69, 0xc4, 0x37, 0x95, 0xf2,
	0x0e, 0x39, 0x8b, 0x29, 0x59, 0xd1, 0x0e, 0x34, 0x3d, 0xe2, 0x45, 0xd6, 0xd4, 0x0e, 0xed, 0x20,
	0xb1, 0xe4, 0xad, 0xfc, 0xc9, 0x34, 0x46, 0x43, 0xe2, 0x45, 0x07, 0x9c, 0xd1, 0x04, 0x2f, 0xfd,
	0x6d, 0xfc, 0x1c, 0x36, 0x0e, 0x27, 0xf4, 0x64, 0x97, 0xfa, 0x3e, 0x76, 0x22, 0x8f, 0x12, 0x76,
	0xfe, 0xa8, 0x20, 0xa8, 0xb9, 0xa3, 0xe1, 0x80, 0x1b, 0x52, 0x35, 0xf9, 0x6f, 0x23, 0x82, 0x6f,
	0x94, 0xe4, 0x5f, 0xc4, 0xe7, 0xb7, 0xa1, 0xed, 0xa4, 0xb2, 0x86, 0x83, 0xd8, 0xeb, 0xea, 0xed,
	0xaa, 0x99, 0x27, 0x1a, 0xbf, 0xd6, 0xe0, 0x4a, 0xac, 0xf6, 0xc0, 0x0e, 0x23, 0xef, 0xf9, 0x7b,
	0x85, 0x0c, 0x68, 0x65, 0x15, 0xf6, 0xaa, 0x7c, 0x2f, 0x47, 0x33, 0x8e, 0x45, 0x64, 0xb3, 0x26,
	0x5c, 0xc4, 0x71, 0x03, 0x5a, 0xd3, 0x44, 0xd4, 0xdc, 0xef, 0x1c, 0xcd, 0xf8, 0x52, 0x83, 0x2b,
	0x9f, 0x50, 0xdb, 0x9d, 0x47, 0xfb, 0x6b, 0x77, 0x1b, 0x7d, 0x1f, 0xea, 0xe2, 0x1e, 0xf6, 0x6a,
	0x5c, 0xd7, 0xcd, 0xbc, 0x2e, 0x79, 0x47, 0xe7, 0x16, 0x1e, 0x72, 0x82, 0x29, 0x0f, 0x19, 0x7f,
	0xd4, 0xa0, 0x67, 0x62, 0x1f, 0xdb, 0x0c, 0xbf, 0x4c, 0x2f, 0x36, 0xa0, 0x4e, 0xa8, 0x8b, 0x87,
	0x03, 0xee, 0x45, 0xd5, 0x94, 0x2b, 0xe3, 0x2b, 0x19, 0xe1, 0x97, 0x58, 0x58, 0xa5, 0x4a, 0xa8,
	0x95, 0x2b, 0x21, 0x93, 0x85, 0xd5, 0xf3, 0x64, 0xe1, 0xcb, 0x79, 0x16, 0x5e, 0x75, 0x4f, 0xe7,
	0x99, 0x5a, 0xcd, 0x65, 0xea, 0x67, 0x70, 0x75, 0x37, 0xc4, 0x76, 0x84, 0x7f, 0x1c, 0x7f, 0x48,
	0x76, 0x27, 0x36, 0x21, 0xd8, 0x4f, 0x5c, 0x28, 0x2a, 0xd7, 0x14, 0xca, 0x7b, 0xb0, 0x36, 0x0d,
	0xe9, 0xe3, 0x27, 0xa9, 0xdd, 0xc9, 0xd2, 0xf8, 0x93, 0x06, 0x7d, 0x95, 0xec, 0x8b, 0x5c, 0xef,
	0x5b, 0xd0, 0x0d, 0x85, 0x71, 0x96, 0x23, 0xe4, 0x71, 0xad, 0x0d, 0xb3, 0x23, 0xc9, 0x52, 0x0b,
	0xba, 0x09, 0x9d, 0x10, 0xb3, 0x99, 0x3f, 0xe7, 0xab, 0x72, 0xbe, 0xb6, 0xa0, 0x4a, 0x36, 0xe3,
	0x2f, 0x1a, 0x5c, 0xdd, 0xc3, 0x51, 0x9a, 0xbd, 0x58, 0x1d, 0x7e, 0x35, 0x53, 0x68, 0x04, 0xd0,
	0x2d, 0xd8, 0x89, 0xae, 0x43, 0x33, 0xc3, 0x22, 0xf3, 0x93, 0x25, 0xa1, 0xef, 0xc1, 0x6a, 0x1c,
	0x3a, 0xcc, 0x2d, 0xea, 0x6c, 0x1b, 0x5b, 0xe5, 0xee, 0x61, 0x2b, 0x2f, 0xd5, 0x14, 0x07, 0x8c,
	0xbf, 0x6a, 0xd0, 0x57, 0x85, 0xe6, 0x22, 0xe9, 0x7b, 0x00, 0x1b, 0xa9, 0x71, 0x96, 0x8b, 0x99,
	0x13, 0x7a, 0x53, 0x7e, 0x69, 0x38, 0x4e, 0x37, 0xb7, 0x6f, 0x9c, 0x6d, 0x1e, 0x33, 0xaf, 0xa4,
	0x22, 0x06, 0x19, 0x09, 0x86, 0x07, 0x57, 0xf6, 0x70, 0x74, 0x88, 0xc7, 0x01, 0x26, 0xd1, 0x90,
	0x1c, 0xd1, 0xf3, 0x67, 0xf1, 0x0d, 0x00, 0x26, 0xe5, 0xa4, 0x9f, 0x90, 0x0c, 0xc5, 0xf8, 0x7b,
	0x05, 0x9a, 0x19, 0x45, 0xe8, 0x75, 0x68, 0xa4, 0xbb, 0x32, 0x09, 0x73, 0x42, 0x29, 0xff, 0x15,
	0x45, 0xfe, 0x0b, 0x89, 0xac, 0x96, 0x13, 0xb9, 0x00, 0x6a, 0xd1, 0x55, 0x58, 0x0f, 0x70, 0x60,
	0x31, 0xef, 0x29, 0x96, 0x57, 0x7b, 0x2d, 0xc0, 0xc1, 0xa1, 0xf7, 0x14, 0xc7, 0x5b, 0x64, 0x16,
	0x58, 0x21, 0x3d, 0x61, 0xbd, 0xba, 0xd8, 0x22, 0xb3, 0xc0, 0xa4, 0x27, 0x0c, 0x5d, 0x03, 0xf0,
	0x88, 0x8b, 0x1f, 0x5b, 0xc4, 0x0e, 0x70, 0x6f, 0x8d, 0x5f, 0x8d, 0x06, 0xa7, 0xec, 0xdb, 0x01,
	0x8e, 0x2f, 0x35, 0x5f, 0x0c, 0x07, 0xbd, 0x75, 0x71, 0x50, 0x2e, 0x63, 0x57, 0xe5, 0x85, 0x1a,
	0x0e, 0x7a, 0x0d, 0x71, 0x2e, 0x25, 0xa0, 0x8f, 0xa1, 0x2d, 0xfd, 0xb6, 0x44, 0xd5, 0x01, 0xaf,
	0xba, 0xeb, 0xaa, 0xb4, 0xca, 0x00, 0x8a, 0x9a, 0x6b, 0xb1, 0xcc, 0xca, 0xf8, 0x8d, 0x06, 0x1b,
	0xc5, 0x5c, 0x5e, 0xa4, 0xec, 0xbe, 0x03, 0xab, 0x1e, 0x39, 0xa2, 0x49, 0x95, 0xbd, 0x79, 0x8a,
	0x39, 0x5c, 0x99, 0xe0, 0x36, 0xfe, 0xa1, 0xc1, 0xc6, 0x5d, 0xd7, 0x55, 0x21, 0xe3, 0xb3, 0xd7,
	0xd4, 0x3c, 0x7f, 0x95, 0x5c, 0xfe, 0x96, 0x41, 0x87, 0x77, 0xe1, 0xb5, 0x02, 0xea, 0xc9, 0x32,
	0x68, 0x98, 0x7a, 0x1e, 0xf7, 0x86, 0x03, 0xf4, 0x0e, 0xe8, 0x79, 0xe4, 0x93, 0x98, 0xdf, 0x30,
	0xbb, 0x39, 0xec, 0x1b, 0x0e, 0x8c, 0x7f, 0x6a, 0x70, 0xd5, 0xc4, 0x01, 0x7d, 0x84, 0xff, 0x77,
	0x7d, 0xfc, 0x57, 0x05, 0x36, 0x7e, 0x6a, 0x47, 0xce, 0x64, 0x10, 0x48, 0x22, 0x7b, 0x39, 0x0e,
	0x16, 0xae, 0x78, 0xad, 0x7c, 0xc5, 0xd3, 0x32, 0x5d, 0x55, 0x95, 0x69, 0xfc, 0x50, 0xdb, 0xfa,
	0x3c, 0xf1, 0x77, 0x5e, 0xa6, 0x99, 0x26, 0xa6, 0x7e, 0x8e, 0x26, 0x06, 0xed, 0x42, 0x1b, 0x3f,
	0x76, 0xfc, 0x99, 0x8b, 0x2d, 0xa1, 0x7d, 0x8d, 0x6b, 0x7f, 0x43, 0xa1, 0x3d, 0x7b, 0x47, 0x5a,
	0xf2, 0xd0, 0x90, 0x5f, 0x95, 0x7f, 0x6b, 0xd0, 0x95, 0xbb, 0x71, 0xdf, 0xb7, 0x04, 0x2a, 0x16,
	0xc2, 0x51, 0x29, 0x87, 0x63, 0x99, 0xa0, 0x26, 0xdf, 0xdb, 0x5a, 0xe6, 0x7b, 0x7b, 0x0d, 0xe0,
	0xc8, 0x9f, 0xb1, 0x89, 0x15, 0x79, 0x41, 0x82, 0x89, 0x0d, 0x4e, 0xb9, 0xef, 0x05, 0x18, 0xdd,
	0x85, 0xd6, 0xc8, 0x23, 0x3e, 0x1d, 0x5b, 0x53, 0x3b, 0x9a, 0xc4, 0xc8, 0xb8, 0xc8, 0xdd, 0x7b,
	0x1e, 0xf6, 0xdd, 0x1d, 0xce, 0x6b, 0x36, 0xc5, 0x99, 0x83, 0xf8, 0x88, 0xf1, 0xe7, 0x0a, 0x5c,
	0x8a, 0xdd, 0x94, 0x1e, 0xbf, 0x80, 0x82, 0xfa, 0x28, 0x29, 0x85, 0xea, 0xe2, 0xef, 0x62, 0x21,
	0xde, 0xe5, 0x72, 0x38, 0xcf, 0xcb, 0x02, 0xfd, 0x08, 0x3a, 0x3e, 0xb5, 0x5d, 0xcb, 0xa1, 0xc4,
	0xe5, 0x99, 0xe0, 0x11, 0xec, 0x6c, 0xbf, 0xad, 0x32, 0xe1, 0x7e, 0xe8, 0x8d, 0xc7, 0x38, 0xdc,
	0x4d, 0x78, 0xcd, 0xb6, 0xcf, 0xdf, 0x55, 0x72, 0xc9, 0x11, 0x54, 0x36, 0xc8, 0x2f, 0x2e, 0x56,
	0x49, 0x0d, 0x54, 0x4f, 0xe9, 0xb9, 0x6a, 0x4b, 0xf4, 0x5c, 0xab, 0x8a, 0xb6, 0x39, 0xdf, 0x09,
	0xd4, 0x4b, 0x9d, 0xc0, 0x7d, 0x68, 0xa7, 0xb8, 0xc2, 0x8b, 0xfe, 0x06, 0xb4, 0x85, 0x59, 0x56,
	0x1c, 0x09, 0xec, 0x26, 0x3d, 0xb3, 0x20, 0x7e, 0xc2, 0x69, 0xb1, 0xd4, 0x14, 0xb7, 0xc4, 0x47,
	0xa9, 0x61, 0x66, 0x28, 0xc6, 0xef, 0x35, 0xd0, 0xb3, 0x88, 0xcc, 0x25, 0x2f, 0xd3, 0x8c, 0xdf,
	0x82, 0xae, 0x18, 0x19, 0xcd, 0x61, 0x51, 0xb6, 0xc7, 0xc7, 0x59, 0x71, 0x03, 0xf4, 0x21, 0x6c,
	0x08, 0xc6, 0x12, 0x8c, 0x8a, 0x36, 0xf9, 0x32, 0xdf, 0x35, 0x0b, 0x58, 0xfa, 0xdb, 0x0a, 0x74,
	0xe6, 0x85, 0xb3, 0xb4, 0x55, 0x4b, 0xbc, 0xc9, 0xd1, 0x3d, 0x68, 0x4b, 0x1b, 0xac, 0x6c, 0xe1,
	0xbf, 0xa5, 0xaa, 0xba, 0x5c, 0xc4, 0xcd, 0x56, 0x06, 0x12, 0xf9, 0x03, 0x41, 0x96, 0x6f, 0x62,
	0x00, 0xcf, 0xfd, 0xba, 0xd9, 0xf1, 0x73, 0x2f, 0xfe, 0x8b, 0x3e, 0xfd, 0x7e, 0x09, 0xdd, 0x1f,
	0xd8, 0xc4, 0xa5, 0x47, 0x47, 0x49, 0x61, 0x9f, 0xa3, 0xa2, 0x3f, 0xca, 0xf7, 0x25, 0xcf, 0x70,
	0xcb, 0x8d, 0x3f, 0x54, 0x60, 0x23, 0xa6, 0xed, 0xd8, 0xbe, 0x4d, 0x1c, 0xbc, 0x7c, 0x37, 0xfa,
	0x7c, 0x70, 0xf7, 0x06, 0xb4, 0x19, 0x9d, 0x85, 0x0e, 0xb6, 0x72, 0x4d, 0x69, 0x4b, 0x10, 0xf7,
	0xc5, 0xc5, 0xbc, 0x06, 0xe0, 0xb2, 0xc8, 0xca, 0xbd, 0x3b, 0x1b, 0x2e, 0x8b, 0xe4, 0xf6, 0x9b,
	0xd0, 0x94, 0x32, 0x5c, 0x4a, 0x30, 0xff, 0x78, 0xad, 0x9b, 0x20, 0x48, 0x03, 0x4a, 0x78, 0xff,
	0x1a, 0x9f, 0xe7, 0xbb, 0x6b, 0x7c, 0x77, 0xcd, 0x65, 0x11, 0xdf, 0xba, 0x06, 0xf0, 0xc8, 0xf6,
	0x3d, 0x97, 0x17, 0x0b, 0xef, 0x51, 0xd7, 0xcd, 0x06, 0xa7, 0xc4, 0x21, 0x30, 0xfe, 0xa6, 0x01,
	0xca, 0x44, 0xe7, 0xfc, 0x98, 0x73, 0x13, 0x3a, 0x39, 0x3f, 0xd3, 0x41, 0x5a, 0xd6, 0x51, 0x16,
	0x83, 0xe6, 0x48, 0xa8, 0xb2, 0x42, 0x6c, 0x33, 0x4a, 0x78, 0xd0, 0x96, 0x06, 0xcd, 0x51, 0x62,
	0x66, 0x7c, 0x74, 0xf3, 0x29, 0x74, 0xf2, 0x4f, 0x1e, 0xd4, 0x82, 0xf5, 0x7d, 0x1a, 0x7d, 0xfc,
	0xd8, 0x63, 0x91, 0xbe, 0x82, 0x3a, 0x00, 0xfb, 0x34, 0x3a, 0x08, 0x31, 0xc3, 0x24, 0xd2, 0x35,
	0x04, 0x50, 0xff, 0x8c, 0x0c, 0x3c, 0xf6, 0x85, 0x5e, 0x41, 0x97, 0xe4, 0x1b, 0xd1, 0xf6, 0x87,
	0xe4, 0x53, 0x1c, 0xd0, 0xf0, 0x89, 0x5e, 0x8d, 0x8f, 0xa7, 0xab, 0x1a, 0xd2, 0xa1, 0x95, 0xb2,
	0xec, 0x1d, 0xfc, 0x44, 0x5f, 0x45, 0x0d, 0x58, 0x15, 0x3f, 0xeb, 0x9b, 0x9f, 0x81, 0x5e, 0x34,
	0x0f, 0x35, 0x61, 0x6d, 0x22, 0x4a, 0x5d, 0x5f, 0x41, 0x5d, 0x68, 0xfa, 0xf3, 0xc0, 0xea, 0x5a,
	0x4c, 0x18, 0x87, 0x53, 0x47, 0x86, 0x58, 0xaf, 0xc4, 0xda, 0xe2, 0x58, 0x0d, 0xe8, 0x09, 0xd1,
	0xab, 0x9b, 0x3f, 0x84, 0x56, 0xb6, 0xd1, 0x47, 0xeb, 0x50, 0xdb, 0xa7, 0x04, 0xeb, 0x2b, 0xb1,
	0xd8, 0xbd, 0x90, 0x9e, 0x78, 0x64, 0x2c, 0x7c, 0xb8, 0x17, 0xd2, 0xa7, 0x98, 0xe8, 0x95, 0x78,
	0x83, 0x61, 0xdb, 0x8f, 0x37, 0xaa, 0xf1, 0x46, 0xbc, 0xc0, 0xae, 0x5e, 0xdb, 0xfe, 0x0f, 0x40,
	0x8b, 0xc3, 0xe2, 0xa1, 0x18, 0x57, 0xa3, 0x29, 0xa0, 0x3d, 0x1c, 0xed, 0xd2, 0x60, 0x4a, 0x49,
	0xa2, 0x81, 0xa1, 0xf7, 0x17, 0x8c, 0x76, 0xcb, 0xac, 0xd2, 0xe8, 0xfe, 0xb7, 0x16, 0x9c, 0x28,
	0xb0, 0x1b, 0x2b, 0x28, 0xe0, 0x1a, 0xe3, 0x3e, 0xe2, 0xbe, 0xe7, 0x7c, 0x91, 0x0c, 0x1b, 0x4e,
	0xd1, 0x58, 0x60, 0x4d, 0x34, 0x16, 0xae, 0xba, 0x5c, 0x1c, 0x46, 0xa1, 0x47, 0xc6, 0xc9, 0x5b,
	0xc7, 0x58, 0x41, 0xc7, 0x70, 0x39, 0x7e, 0x07, 0x45, 0x76, 0xe4, 0xb1, 0xc8, 0x73, 0x58, 0xa2,
	0x70, 0x7b, 0xb1, 0xc2, 0x12, 0xf3, 0x33, 0xaa, 0x74, 0xa0, 0x95, 0x1d, 0xbd, 0xa3, 0x5b, 0xaa,
	0x12, 0x56, 0xfc, 0x3d, 0xd0, 0xbf, 0x7d, 0x36, 0x63, 0xaa, 0xc4, 0x87, 0x6e, 0x61, 0xdc, 0x8d,
	0x36, 0x95, 0xe0, 0xa7, 0x9c, 0xb9, 0xf7, 0xdf, 0x5d, 0x8a, 0x37, 0xd5, 0xe6, 0x41, 0x27, 0x3f,
	0x62, 0x46, 0xef, 0x2c, 0x12, 0x50, 0x1a, 0xe3, 0xf5, 0x37, 0x97, 0x61, 0x4d, 0x55, 0x3d, 0x80,
	0x4e, 0x7e, 0xee, 0xa9, 0x56, 0xa5, 0x9c, 0x8d, 0xf6, 0x4f, 0x7b, 0xcb, 0x1a, 0x2b, 0xe8, 0x17,
	0xf0, 0x5a, 0x69, 0xd8, 0x88, 0xbe, 0xad, 0x8e, 0xba, 0x7a, 0x26, 0x79, 0x96, 0x06, 0x69, 0x7d,
	0xe6, 0x2b, 0xb9, 0xd0, 0xfa, 0xd2, 0xd4, 0x79, 0x79, 0xeb, 0x33, 0xe2, 0x4f, 0xb3, 0xfe, 0x99,
	0x35, 0xcc, 0x00, 0x95, 0xc7, 0x8d, 0xe8, 0x3d, 0x95, 0x8a, 0x85, 0x23, 0xcf, 0xfe, 0xd6, 0xb2,
	0xec, 0x69, 0xca, 0x67, 0x1c, 0x12, 0x8a, 0x93, 0x39, 0xa5, 0xda, 0x85, 0x93, 0x46, 0xb5, 0xda,
	0xc5, 0xd3, 0x37, 0x51, 0xd4, 0xf9, 0x11, 0x89, 0x3a, 0x57, 0xca, 0x91, 0x98, 0xba, 0xa8, 0xd5,
	0x13, 0x17, 0x63, 0x65, 0xfb, 0xab, 0x75, 0x68, 0x70, 0xe7, 0x39, 0x20, 0xfc, 0x1f, 0x74, 0x9f,
	0x3f, 0xe8, 0x3e, 0x84, 0x6e, 0x61, 0xd0, 0xa4, 0xc6, 0x43, 0xf5, 0x34, 0xea, 0xac, 0x8b, 0x31,
	0x02, 0x54, 0x9e, 0xf2, 0xa8, 0x2b, 0x74, 0xe1, 0x34, 0xe8, 0x2c, 0x1d, 0x0f, 0xa1, 0x5b, 0x98,
	0xb2, 0xa8, 0x3d, 0x50, 0x8f, 0x62, 0xce, 0x92, 0xfe, 0x39, 0xb4, 0xb2, 0xef, 0x6d, 0xf5, 0x47,
	0x49, 0xf1, 0x22, 0x7f, 0xf9, 0xa0, 0xf4, 0xe2, 0x41, 0xfb, 0x21, 0x74, 0x0b, 0x4f, 0x6c, 0x75,
	0xe4, 0xd5, 0xef, 0xf0, 0xb3, 0xa4, 0x7f, 0x7d, 0x30, 0xb3, 0xf3, 0xe1, 0x83, 0xed, 0xb1, 0x17,
	0x4d, 0x66, 0xa3, 0xd8, 0x88, 0x3b, 0xe2, 0xe4, 0x7b, 0x1e, 0x95, 0xbf, 0xee, 0x24, 0xf7, 0xed,
	0x0e, 0x17, 0x76, 0x87, 0x0b, 0x9b, 0x8e, 0x46, 0x75, 0xbe, 0xfc, 0xe0, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xcb, 0x4e, 0xe3, 0xca, 0x2c, 0x21, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	GetComponentStates(ctx context.Context, in *internalpb.GetComponentStatesRequest, opts ...grpc.CallOption) (*internalpb.ComponentStates, error)
	GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	ShowCollections(ctx context.Context, in *ShowCollectionsRequest, opts ...grpc.CallOption) (*ShowCollectionsResponse, error)
	ShowPartitions(ctx context.Context, in *ShowPartitionsRequest, opts ...grpc.CallOption) (*ShowPartitionsResponse, error)
	LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	CreateQueryChannel(ctx context.Context, in *CreateQueryChannelRequest, opts ...grpc.CallOption) (*CreateQueryChannelResponse, error)
	GetPartitionStates(ctx context.Context, in *GetPartitionStatesRequest, opts ...grpc.CallOption) (*GetPartitionStatesResponse, error)
	GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error)
}

type queryServiceClient struct {
	cc *grpc.ClientConn
}

func NewQueryServiceClient(cc *grpc.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) GetComponentStates(ctx context.Context, in *internalpb.GetComponentStatesRequest, opts ...grpc.CallOption) (*internalpb.ComponentStates, error) {
	out := new(internalpb.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/GetTimeTickChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/GetStatisticsChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ShowCollections(ctx context.Context, in *ShowCollectionsRequest, opts ...grpc.CallOption) (*ShowCollectionsResponse, error) {
	out := new(ShowCollectionsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/ShowCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ShowPartitions(ctx context.Context, in *ShowPartitionsRequest, opts ...grpc.CallOption) (*ShowPartitionsResponse, error) {
	out := new(ShowPartitionsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/ShowPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/LoadPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/ReleasePartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/LoadCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/ReleaseCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CreateQueryChannel(ctx context.Context, in *CreateQueryChannelRequest, opts ...grpc.CallOption) (*CreateQueryChannelResponse, error) {
	out := new(CreateQueryChannelResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/CreateQueryChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPartitionStates(ctx context.Context, in *GetPartitionStatesRequest, opts ...grpc.CallOption) (*GetPartitionStatesResponse, error) {
	out := new(GetPartitionStatesResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/GetPartitionStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error) {
	out := new(GetSegmentInfoResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryService/GetSegmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	GetComponentStates(context.Context, *internalpb.GetComponentStatesRequest) (*internalpb.ComponentStates, error)
	GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error)
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	ShowCollections(context.Context, *ShowCollectionsRequest) (*ShowCollectionsResponse, error)
	ShowPartitions(context.Context, *ShowPartitionsRequest) (*ShowPartitionsResponse, error)
	LoadPartitions(context.Context, *LoadPartitionsRequest) (*commonpb.Status, error)
	ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error)
	LoadCollection(context.Context, *LoadCollectionRequest) (*commonpb.Status, error)
	ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error)
	CreateQueryChannel(context.Context, *CreateQueryChannelRequest) (*CreateQueryChannelResponse, error)
	GetPartitionStates(context.Context, *GetPartitionStatesRequest) (*GetPartitionStatesResponse, error)
	GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) GetComponentStates(ctx context.Context, req *internalpb.GetComponentStatesRequest) (*internalpb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (*UnimplementedQueryServiceServer) GetTimeTickChannel(ctx context.Context, req *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTickChannel not implemented")
}
func (*UnimplementedQueryServiceServer) GetStatisticsChannel(ctx context.Context, req *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (*UnimplementedQueryServiceServer) RegisterNode(ctx context.Context, req *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (*UnimplementedQueryServiceServer) ShowCollections(ctx context.Context, req *ShowCollectionsRequest) (*ShowCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (*UnimplementedQueryServiceServer) ShowPartitions(ctx context.Context, req *ShowPartitionsRequest) (*ShowPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (*UnimplementedQueryServiceServer) LoadPartitions(ctx context.Context, req *LoadPartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPartitions not implemented")
}
func (*UnimplementedQueryServiceServer) ReleasePartitions(ctx context.Context, req *ReleasePartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePartitions not implemented")
}
func (*UnimplementedQueryServiceServer) LoadCollection(ctx context.Context, req *LoadCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCollection not implemented")
}
func (*UnimplementedQueryServiceServer) ReleaseCollection(ctx context.Context, req *ReleaseCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (*UnimplementedQueryServiceServer) CreateQueryChannel(ctx context.Context, req *CreateQueryChannelRequest) (*CreateQueryChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueryChannel not implemented")
}
func (*UnimplementedQueryServiceServer) GetPartitionStates(ctx context.Context, req *GetPartitionStatesRequest) (*GetPartitionStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionStates not implemented")
}
func (*UnimplementedQueryServiceServer) GetSegmentInfo(ctx context.Context, req *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentInfo not implemented")
}

func RegisterQueryServiceServer(s *grpc.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetComponentStates(ctx, req.(*internalpb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTimeTickChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetTimeTickChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTimeTickChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/GetTimeTickChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTimeTickChannel(ctx, req.(*internalpb.GetTimeTickChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetStatisticsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/GetStatisticsChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStatisticsChannel(ctx, req.(*internalpb.GetStatisticsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/ShowCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ShowCollections(ctx, req.(*ShowCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/ShowPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ShowPartitions(ctx, req.(*ShowPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_LoadPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).LoadPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/LoadPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).LoadPartitions(ctx, req.(*LoadPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ReleasePartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ReleasePartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/ReleasePartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ReleasePartitions(ctx, req.(*ReleasePartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_LoadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).LoadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/LoadCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).LoadCollection(ctx, req.(*LoadCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/ReleaseCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ReleaseCollection(ctx, req.(*ReleaseCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CreateQueryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CreateQueryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/CreateQueryChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CreateQueryChannel(ctx, req.(*CreateQueryChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPartitionStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPartitionStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/GetPartitionStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPartitionStates(ctx, req.(*GetPartitionStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryService/GetSegmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetSegmentInfo(ctx, req.(*GetSegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.query.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _QueryService_GetComponentStates_Handler,
		},
		{
			MethodName: "GetTimeTickChannel",
			Handler:    _QueryService_GetTimeTickChannel_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _QueryService_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _QueryService_RegisterNode_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _QueryService_ShowCollections_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _QueryService_ShowPartitions_Handler,
		},
		{
			MethodName: "LoadPartitions",
			Handler:    _QueryService_LoadPartitions_Handler,
		},
		{
			MethodName: "ReleasePartitions",
			Handler:    _QueryService_ReleasePartitions_Handler,
		},
		{
			MethodName: "LoadCollection",
			Handler:    _QueryService_LoadCollection_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _QueryService_ReleaseCollection_Handler,
		},
		{
			MethodName: "CreateQueryChannel",
			Handler:    _QueryService_CreateQueryChannel_Handler,
		},
		{
			MethodName: "GetPartitionStates",
			Handler:    _QueryService_GetPartitionStates_Handler,
		},
		{
			MethodName: "GetSegmentInfo",
			Handler:    _QueryService_GetSegmentInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query_service.proto",
}

// QueryNodeClient is the client API for QueryNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryNodeClient interface {
	GetComponentStates(ctx context.Context, in *internalpb.GetComponentStatesRequest, opts ...grpc.CallOption) (*internalpb.ComponentStates, error)
	GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	AddQueryChannel(ctx context.Context, in *AddQueryChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	RemoveQueryChannel(ctx context.Context, in *RemoveQueryChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	WatchDmChannels(ctx context.Context, in *WatchDmChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	LoadSegments(ctx context.Context, in *LoadSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseSegments(ctx context.Context, in *ReleaseSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error)
}

type queryNodeClient struct {
	cc *grpc.ClientConn
}

func NewQueryNodeClient(cc *grpc.ClientConn) QueryNodeClient {
	return &queryNodeClient{cc}
}

func (c *queryNodeClient) GetComponentStates(ctx context.Context, in *internalpb.GetComponentStatesRequest, opts ...grpc.CallOption) (*internalpb.ComponentStates, error) {
	out := new(internalpb.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetTimeTickChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetStatisticsChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) AddQueryChannel(ctx context.Context, in *AddQueryChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/AddQueryChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) RemoveQueryChannel(ctx context.Context, in *RemoveQueryChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/RemoveQueryChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) WatchDmChannels(ctx context.Context, in *WatchDmChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/WatchDmChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) LoadSegments(ctx context.Context, in *LoadSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/LoadSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/ReleaseCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/ReleasePartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleaseSegments(ctx context.Context, in *ReleaseSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/ReleaseSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error) {
	out := new(GetSegmentInfoResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetSegmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryNodeServer is the server API for QueryNode service.
type QueryNodeServer interface {
	GetComponentStates(context.Context, *internalpb.GetComponentStatesRequest) (*internalpb.ComponentStates, error)
	GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error)
	AddQueryChannel(context.Context, *AddQueryChannelRequest) (*commonpb.Status, error)
	RemoveQueryChannel(context.Context, *RemoveQueryChannelRequest) (*commonpb.Status, error)
	WatchDmChannels(context.Context, *WatchDmChannelsRequest) (*commonpb.Status, error)
	LoadSegments(context.Context, *LoadSegmentsRequest) (*commonpb.Status, error)
	ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error)
	ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error)
	ReleaseSegments(context.Context, *ReleaseSegmentsRequest) (*commonpb.Status, error)
	GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error)
}

// UnimplementedQueryNodeServer can be embedded to have forward compatible implementations.
type UnimplementedQueryNodeServer struct {
}

func (*UnimplementedQueryNodeServer) GetComponentStates(ctx context.Context, req *internalpb.GetComponentStatesRequest) (*internalpb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (*UnimplementedQueryNodeServer) GetTimeTickChannel(ctx context.Context, req *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTickChannel not implemented")
}
func (*UnimplementedQueryNodeServer) GetStatisticsChannel(ctx context.Context, req *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (*UnimplementedQueryNodeServer) AddQueryChannel(ctx context.Context, req *AddQueryChannelRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQueryChannel not implemented")
}
func (*UnimplementedQueryNodeServer) RemoveQueryChannel(ctx context.Context, req *RemoveQueryChannelRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQueryChannel not implemented")
}
func (*UnimplementedQueryNodeServer) WatchDmChannels(ctx context.Context, req *WatchDmChannelsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDmChannels not implemented")
}
func (*UnimplementedQueryNodeServer) LoadSegments(ctx context.Context, req *LoadSegmentsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSegments not implemented")
}
func (*UnimplementedQueryNodeServer) ReleaseCollection(ctx context.Context, req *ReleaseCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (*UnimplementedQueryNodeServer) ReleasePartitions(ctx context.Context, req *ReleasePartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePartitions not implemented")
}
func (*UnimplementedQueryNodeServer) ReleaseSegments(ctx context.Context, req *ReleaseSegmentsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSegments not implemented")
}
func (*UnimplementedQueryNodeServer) GetSegmentInfo(ctx context.Context, req *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentInfo not implemented")
}

func RegisterQueryNodeServer(s *grpc.Server, srv QueryNodeServer) {
	s.RegisterService(&_QueryNode_serviceDesc, srv)
}

func _QueryNode_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetComponentStates(ctx, req.(*internalpb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetTimeTickChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetTimeTickChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetTimeTickChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetTimeTickChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetTimeTickChannel(ctx, req.(*internalpb.GetTimeTickChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetStatisticsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetStatisticsChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetStatisticsChannel(ctx, req.(*internalpb.GetStatisticsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_AddQueryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQueryChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).AddQueryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/AddQueryChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).AddQueryChannel(ctx, req.(*AddQueryChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_RemoveQueryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQueryChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).RemoveQueryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/RemoveQueryChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).RemoveQueryChannel(ctx, req.(*RemoveQueryChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_WatchDmChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchDmChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).WatchDmChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/WatchDmChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).WatchDmChannels(ctx, req.(*WatchDmChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_LoadSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).LoadSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/LoadSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).LoadSegments(ctx, req.(*LoadSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/ReleaseCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleaseCollection(ctx, req.(*ReleaseCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleasePartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleasePartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/ReleasePartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleasePartitions(ctx, req.(*ReleasePartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleaseSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleaseSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/ReleaseSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleaseSegments(ctx, req.(*ReleaseSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetSegmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetSegmentInfo(ctx, req.(*GetSegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.query.QueryNode",
	HandlerType: (*QueryNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _QueryNode_GetComponentStates_Handler,
		},
		{
			MethodName: "GetTimeTickChannel",
			Handler:    _QueryNode_GetTimeTickChannel_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _QueryNode_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "AddQueryChannel",
			Handler:    _QueryNode_AddQueryChannel_Handler,
		},
		{
			MethodName: "RemoveQueryChannel",
			Handler:    _QueryNode_RemoveQueryChannel_Handler,
		},
		{
			MethodName: "WatchDmChannels",
			Handler:    _QueryNode_WatchDmChannels_Handler,
		},
		{
			MethodName: "LoadSegments",
			Handler:    _QueryNode_LoadSegments_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _QueryNode_ReleaseCollection_Handler,
		},
		{
			MethodName: "ReleasePartitions",
			Handler:    _QueryNode_ReleasePartitions_Handler,
		},
		{
			MethodName: "ReleaseSegments",
			Handler:    _QueryNode_ReleaseSegments_Handler,
		},
		{
			MethodName: "GetSegmentInfo",
			Handler:    _QueryNode_GetSegmentInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query_service.proto",
}
