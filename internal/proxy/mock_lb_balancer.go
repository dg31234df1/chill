// Code generated by mockery v2.21.1. DO NOT EDIT.

package proxy

import mock "github.com/stretchr/testify/mock"

// MockLBBalancer is an autogenerated mock type for the LBBalancer type
type MockLBBalancer struct {
	mock.Mock
}

type MockLBBalancer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLBBalancer) EXPECT() *MockLBBalancer_Expecter {
	return &MockLBBalancer_Expecter{mock: &_m.Mock}
}

// SelectNode provides a mock function with given fields: availableNodes, nq
func (_m *MockLBBalancer) SelectNode(availableNodes []int64, nq int64) (int64, error) {
	ret := _m.Called(availableNodes, nq)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func([]int64, int64) (int64, error)); ok {
		return rf(availableNodes, nq)
	}
	if rf, ok := ret.Get(0).(func([]int64, int64) int64); ok {
		r0 = rf(availableNodes, nq)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func([]int64, int64) error); ok {
		r1 = rf(availableNodes, nq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLBBalancer_SelectNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectNode'
type MockLBBalancer_SelectNode_Call struct {
	*mock.Call
}

// SelectNode is a helper method to define mock.On call
//   - availableNodes []int64
//   - nq int64
func (_e *MockLBBalancer_Expecter) SelectNode(availableNodes interface{}, nq interface{}) *MockLBBalancer_SelectNode_Call {
	return &MockLBBalancer_SelectNode_Call{Call: _e.mock.On("SelectNode", availableNodes, nq)}
}

func (_c *MockLBBalancer_SelectNode_Call) Run(run func(availableNodes []int64, nq int64)) *MockLBBalancer_SelectNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int64), args[1].(int64))
	})
	return _c
}

func (_c *MockLBBalancer_SelectNode_Call) Return(_a0 int64, _a1 error) *MockLBBalancer_SelectNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLBBalancer_SelectNode_Call) RunAndReturn(run func([]int64, int64) (int64, error)) *MockLBBalancer_SelectNode_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockLBBalancer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLBBalancer creates a new instance of MockLBBalancer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLBBalancer(t mockConstructorTestingTNewMockLBBalancer) *MockLBBalancer {
	mock := &MockLBBalancer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
