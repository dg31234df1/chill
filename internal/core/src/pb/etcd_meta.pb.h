// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etcd_meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_etcd_5fmeta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_etcd_5fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "index_builder.pb.h"
#include "common.pb.h"
#include "schema.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_etcd_5fmeta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_etcd_5fmeta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_etcd_5fmeta_2eproto;
namespace milvus {
namespace proto {
namespace etcd {
class CollectionMeta;
class CollectionMetaDefaultTypeInternal;
extern CollectionMetaDefaultTypeInternal _CollectionMeta_default_instance_;
class FieldBinlogFiles;
class FieldBinlogFilesDefaultTypeInternal;
extern FieldBinlogFilesDefaultTypeInternal _FieldBinlogFiles_default_instance_;
class FieldIndexMeta;
class FieldIndexMetaDefaultTypeInternal;
extern FieldIndexMetaDefaultTypeInternal _FieldIndexMeta_default_instance_;
class ProxyMeta;
class ProxyMetaDefaultTypeInternal;
extern ProxyMetaDefaultTypeInternal _ProxyMeta_default_instance_;
class SegmentMeta;
class SegmentMetaDefaultTypeInternal;
extern SegmentMetaDefaultTypeInternal _SegmentMeta_default_instance_;
class TenantMeta;
class TenantMetaDefaultTypeInternal;
extern TenantMetaDefaultTypeInternal _TenantMeta_default_instance_;
}  // namespace etcd
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::etcd::CollectionMeta* Arena::CreateMaybeMessage<::milvus::proto::etcd::CollectionMeta>(Arena*);
template<> ::milvus::proto::etcd::FieldBinlogFiles* Arena::CreateMaybeMessage<::milvus::proto::etcd::FieldBinlogFiles>(Arena*);
template<> ::milvus::proto::etcd::FieldIndexMeta* Arena::CreateMaybeMessage<::milvus::proto::etcd::FieldIndexMeta>(Arena*);
template<> ::milvus::proto::etcd::ProxyMeta* Arena::CreateMaybeMessage<::milvus::proto::etcd::ProxyMeta>(Arena*);
template<> ::milvus::proto::etcd::SegmentMeta* Arena::CreateMaybeMessage<::milvus::proto::etcd::SegmentMeta>(Arena*);
template<> ::milvus::proto::etcd::TenantMeta* Arena::CreateMaybeMessage<::milvus::proto::etcd::TenantMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace etcd {

// ===================================================================

class TenantMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.etcd.TenantMeta) */ {
 public:
  TenantMeta();
  virtual ~TenantMeta();

  TenantMeta(const TenantMeta& from);
  TenantMeta(TenantMeta&& from) noexcept
    : TenantMeta() {
    *this = ::std::move(from);
  }

  inline TenantMeta& operator=(const TenantMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline TenantMeta& operator=(TenantMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TenantMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TenantMeta* internal_default_instance() {
    return reinterpret_cast<const TenantMeta*>(
               &_TenantMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TenantMeta& a, TenantMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(TenantMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TenantMeta* New() const final {
    return CreateMaybeMessage<TenantMeta>(nullptr);
  }

  TenantMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TenantMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TenantMeta& from);
  void MergeFrom(const TenantMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TenantMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.etcd.TenantMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_5fmeta_2eproto);
    return ::descriptor_table_etcd_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsertChannelIDsFieldNumber = 3,
    kQueryChannelIDFieldNumber = 4,
    kIDFieldNumber = 1,
    kNumQueryNodesFieldNumber = 2,
  };
  // repeated string insert_channelIDs = 3;
  int insert_channelids_size() const;
  void clear_insert_channelids();
  const std::string& insert_channelids(int index) const;
  std::string* mutable_insert_channelids(int index);
  void set_insert_channelids(int index, const std::string& value);
  void set_insert_channelids(int index, std::string&& value);
  void set_insert_channelids(int index, const char* value);
  void set_insert_channelids(int index, const char* value, size_t size);
  std::string* add_insert_channelids();
  void add_insert_channelids(const std::string& value);
  void add_insert_channelids(std::string&& value);
  void add_insert_channelids(const char* value);
  void add_insert_channelids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& insert_channelids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_insert_channelids();

  // string query_channelID = 4;
  void clear_query_channelid();
  const std::string& query_channelid() const;
  void set_query_channelid(const std::string& value);
  void set_query_channelid(std::string&& value);
  void set_query_channelid(const char* value);
  void set_query_channelid(const char* value, size_t size);
  std::string* mutable_query_channelid();
  std::string* release_query_channelid();
  void set_allocated_query_channelid(std::string* query_channelid);

  // int64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 num_query_nodes = 2;
  void clear_num_query_nodes();
  ::PROTOBUF_NAMESPACE_ID::int64 num_query_nodes() const;
  void set_num_query_nodes(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.etcd.TenantMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> insert_channelids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_channelid_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_query_nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class ProxyMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.etcd.ProxyMeta) */ {
 public:
  ProxyMeta();
  virtual ~ProxyMeta();

  ProxyMeta(const ProxyMeta& from);
  ProxyMeta(ProxyMeta&& from) noexcept
    : ProxyMeta() {
    *this = ::std::move(from);
  }

  inline ProxyMeta& operator=(const ProxyMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyMeta& operator=(ProxyMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProxyMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyMeta* internal_default_instance() {
    return reinterpret_cast<const ProxyMeta*>(
               &_ProxyMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProxyMeta& a, ProxyMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyMeta* New() const final {
    return CreateMaybeMessage<ProxyMeta>(nullptr);
  }

  ProxyMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProxyMeta& from);
  void MergeFrom(const ProxyMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.etcd.ProxyMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_5fmeta_2eproto);
    return ::descriptor_table_etcd_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultChannelIDsFieldNumber = 3,
    kAddressFieldNumber = 2,
    kIDFieldNumber = 1,
  };
  // repeated string result_channelIDs = 3;
  int result_channelids_size() const;
  void clear_result_channelids();
  const std::string& result_channelids(int index) const;
  std::string* mutable_result_channelids(int index);
  void set_result_channelids(int index, const std::string& value);
  void set_result_channelids(int index, std::string&& value);
  void set_result_channelids(int index, const char* value);
  void set_result_channelids(int index, const char* value, size_t size);
  std::string* add_result_channelids();
  void add_result_channelids(const std::string& value);
  void add_result_channelids(std::string&& value);
  void add_result_channelids(const char* value);
  void add_result_channelids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& result_channelids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_result_channelids();

  // .milvus.proto.common.Address address = 2;
  bool has_address() const;
  void clear_address();
  const ::milvus::proto::common::Address& address() const;
  ::milvus::proto::common::Address* release_address();
  ::milvus::proto::common::Address* mutable_address();
  void set_allocated_address(::milvus::proto::common::Address* address);

  // int64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.etcd.ProxyMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> result_channelids_;
  ::milvus::proto::common::Address* address_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class CollectionMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.etcd.CollectionMeta) */ {
 public:
  CollectionMeta();
  virtual ~CollectionMeta();

  CollectionMeta(const CollectionMeta& from);
  CollectionMeta(CollectionMeta&& from) noexcept
    : CollectionMeta() {
    *this = ::std::move(from);
  }

  inline CollectionMeta& operator=(const CollectionMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionMeta& operator=(CollectionMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectionMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectionMeta* internal_default_instance() {
    return reinterpret_cast<const CollectionMeta*>(
               &_CollectionMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CollectionMeta& a, CollectionMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectionMeta* New() const final {
    return CreateMaybeMessage<CollectionMeta>(nullptr);
  }

  CollectionMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectionMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectionMeta& from);
  void MergeFrom(const CollectionMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.etcd.CollectionMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_5fmeta_2eproto);
    return ::descriptor_table_etcd_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 4,
    kPartitionTagsFieldNumber = 5,
    kSchemaFieldNumber = 2,
    kIDFieldNumber = 1,
    kCreateTimeFieldNumber = 3,
  };
  // repeated int64 segmentIDs = 4;
  int segmentids_size() const;
  void clear_segmentids();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentids(int index) const;
  void set_segmentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_segmentids();

  // repeated string partition_tags = 5;
  int partition_tags_size() const;
  void clear_partition_tags();
  const std::string& partition_tags(int index) const;
  std::string* mutable_partition_tags(int index);
  void set_partition_tags(int index, const std::string& value);
  void set_partition_tags(int index, std::string&& value);
  void set_partition_tags(int index, const char* value);
  void set_partition_tags(int index, const char* value, size_t size);
  std::string* add_partition_tags();
  void add_partition_tags(const std::string& value);
  void add_partition_tags(std::string&& value);
  void add_partition_tags(const char* value);
  void add_partition_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_tags();

  // .milvus.proto.schema.CollectionSchema schema = 2;
  bool has_schema() const;
  void clear_schema();
  const ::milvus::proto::schema::CollectionSchema& schema() const;
  ::milvus::proto::schema::CollectionSchema* release_schema();
  ::milvus::proto::schema::CollectionSchema* mutable_schema();
  void set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema);

  // int64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // uint64 create_time = 3;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.etcd.CollectionMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > segmentids_;
  mutable std::atomic<int> _segmentids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_tags_;
  ::milvus::proto::schema::CollectionSchema* schema_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 create_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class FieldBinlogFiles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.etcd.FieldBinlogFiles) */ {
 public:
  FieldBinlogFiles();
  virtual ~FieldBinlogFiles();

  FieldBinlogFiles(const FieldBinlogFiles& from);
  FieldBinlogFiles(FieldBinlogFiles&& from) noexcept
    : FieldBinlogFiles() {
    *this = ::std::move(from);
  }

  inline FieldBinlogFiles& operator=(const FieldBinlogFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldBinlogFiles& operator=(FieldBinlogFiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldBinlogFiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldBinlogFiles* internal_default_instance() {
    return reinterpret_cast<const FieldBinlogFiles*>(
               &_FieldBinlogFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FieldBinlogFiles& a, FieldBinlogFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldBinlogFiles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldBinlogFiles* New() const final {
    return CreateMaybeMessage<FieldBinlogFiles>(nullptr);
  }

  FieldBinlogFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldBinlogFiles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldBinlogFiles& from);
  void MergeFrom(const FieldBinlogFiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldBinlogFiles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.etcd.FieldBinlogFiles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_5fmeta_2eproto);
    return ::descriptor_table_etcd_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinlogFilesFieldNumber = 2,
    kFieldIDFieldNumber = 1,
  };
  // repeated string binlog_files = 2;
  int binlog_files_size() const;
  void clear_binlog_files();
  const std::string& binlog_files(int index) const;
  std::string* mutable_binlog_files(int index);
  void set_binlog_files(int index, const std::string& value);
  void set_binlog_files(int index, std::string&& value);
  void set_binlog_files(int index, const char* value);
  void set_binlog_files(int index, const char* value, size_t size);
  std::string* add_binlog_files();
  void add_binlog_files(const std::string& value);
  void add_binlog_files(std::string&& value);
  void add_binlog_files(const char* value);
  void add_binlog_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& binlog_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_binlog_files();

  // int64 fieldID = 1;
  void clear_fieldid();
  ::PROTOBUF_NAMESPACE_ID::int64 fieldid() const;
  void set_fieldid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.etcd.FieldBinlogFiles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> binlog_files_;
  ::PROTOBUF_NAMESPACE_ID::int64 fieldid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class SegmentMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.etcd.SegmentMeta) */ {
 public:
  SegmentMeta();
  virtual ~SegmentMeta();

  SegmentMeta(const SegmentMeta& from);
  SegmentMeta(SegmentMeta&& from) noexcept
    : SegmentMeta() {
    *this = ::std::move(from);
  }

  inline SegmentMeta& operator=(const SegmentMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentMeta& operator=(SegmentMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentMeta* internal_default_instance() {
    return reinterpret_cast<const SegmentMeta*>(
               &_SegmentMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SegmentMeta& a, SegmentMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentMeta* New() const final {
    return CreateMaybeMessage<SegmentMeta>(nullptr);
  }

  SegmentMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentMeta& from);
  void MergeFrom(const SegmentMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.etcd.SegmentMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_5fmeta_2eproto);
    return ::descriptor_table_etcd_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinlogFilePathsFieldNumber = 10,
    kPartitionTagFieldNumber = 3,
    kSegmentIDFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kChannelStartFieldNumber = 4,
    kChannelEndFieldNumber = 5,
    kOpenTimeFieldNumber = 6,
    kCloseTimeFieldNumber = 7,
    kNumRowsFieldNumber = 8,
    kMemSizeFieldNumber = 9,
  };
  // repeated .milvus.proto.etcd.FieldBinlogFiles binlog_file_paths = 10;
  int binlog_file_paths_size() const;
  void clear_binlog_file_paths();
  ::milvus::proto::etcd::FieldBinlogFiles* mutable_binlog_file_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::etcd::FieldBinlogFiles >*
      mutable_binlog_file_paths();
  const ::milvus::proto::etcd::FieldBinlogFiles& binlog_file_paths(int index) const;
  ::milvus::proto::etcd::FieldBinlogFiles* add_binlog_file_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::etcd::FieldBinlogFiles >&
      binlog_file_paths() const;

  // string partition_tag = 3;
  void clear_partition_tag();
  const std::string& partition_tag() const;
  void set_partition_tag(const std::string& value);
  void set_partition_tag(std::string&& value);
  void set_partition_tag(const char* value);
  void set_partition_tag(const char* value, size_t size);
  std::string* mutable_partition_tag();
  std::string* release_partition_tag();
  void set_allocated_partition_tag(std::string* partition_tag);

  // int64 segmentID = 1;
  void clear_segmentid();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid() const;
  void set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 collectionID = 2;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 channel_start = 4;
  void clear_channel_start();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_start() const;
  void set_channel_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 channel_end = 5;
  void clear_channel_end();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_end() const;
  void set_channel_end(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 open_time = 6;
  void clear_open_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 open_time() const;
  void set_open_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 close_time = 7;
  void clear_close_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 close_time() const;
  void set_close_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int64 num_rows = 8;
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 mem_size = 9;
  void clear_mem_size();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_size() const;
  void set_mem_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.etcd.SegmentMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::etcd::FieldBinlogFiles > binlog_file_paths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_tag_;
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_end_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 close_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class FieldIndexMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.etcd.FieldIndexMeta) */ {
 public:
  FieldIndexMeta();
  virtual ~FieldIndexMeta();

  FieldIndexMeta(const FieldIndexMeta& from);
  FieldIndexMeta(FieldIndexMeta&& from) noexcept
    : FieldIndexMeta() {
    *this = ::std::move(from);
  }

  inline FieldIndexMeta& operator=(const FieldIndexMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldIndexMeta& operator=(FieldIndexMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldIndexMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldIndexMeta* internal_default_instance() {
    return reinterpret_cast<const FieldIndexMeta*>(
               &_FieldIndexMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FieldIndexMeta& a, FieldIndexMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldIndexMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldIndexMeta* New() const final {
    return CreateMaybeMessage<FieldIndexMeta>(nullptr);
  }

  FieldIndexMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldIndexMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldIndexMeta& from);
  void MergeFrom(const FieldIndexMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldIndexMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.etcd.FieldIndexMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_5fmeta_2eproto);
    return ::descriptor_table_etcd_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexParamsFieldNumber = 5,
    kIndexFilePathsFieldNumber = 7,
    kIndexTypeFieldNumber = 3,
    kSegmentIDFieldNumber = 1,
    kFieldIDFieldNumber = 2,
    kIndexIDFieldNumber = 4,
    kStatusFieldNumber = 6,
  };
  // repeated .milvus.proto.common.KeyValuePair index_params = 5;
  int index_params_size() const;
  void clear_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_index_params();
  const ::milvus::proto::common::KeyValuePair& index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      index_params() const;

  // repeated string index_file_paths = 7;
  int index_file_paths_size() const;
  void clear_index_file_paths();
  const std::string& index_file_paths(int index) const;
  std::string* mutable_index_file_paths(int index);
  void set_index_file_paths(int index, const std::string& value);
  void set_index_file_paths(int index, std::string&& value);
  void set_index_file_paths(int index, const char* value);
  void set_index_file_paths(int index, const char* value, size_t size);
  std::string* add_index_file_paths();
  void add_index_file_paths(const std::string& value);
  void add_index_file_paths(std::string&& value);
  void add_index_file_paths(const char* value);
  void add_index_file_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& index_file_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_index_file_paths();

  // string index_type = 3;
  void clear_index_type();
  const std::string& index_type() const;
  void set_index_type(const std::string& value);
  void set_index_type(std::string&& value);
  void set_index_type(const char* value);
  void set_index_type(const char* value, size_t size);
  std::string* mutable_index_type();
  std::string* release_index_type();
  void set_allocated_index_type(std::string* index_type);

  // int64 segmentID = 1;
  void clear_segmentid();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid() const;
  void set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 fieldID = 2;
  void clear_fieldid();
  ::PROTOBUF_NAMESPACE_ID::int64 fieldid() const;
  void set_fieldid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 indexID = 4;
  void clear_indexid();
  ::PROTOBUF_NAMESPACE_ID::int64 indexid() const;
  void set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .milvus.proto.service.IndexStatus status = 6;
  void clear_status();
  ::milvus::proto::service::IndexStatus status() const;
  void set_status(::milvus::proto::service::IndexStatus value);

  // @@protoc_insertion_point(class_scope:milvus.proto.etcd.FieldIndexMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > index_params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> index_file_paths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid_;
  ::PROTOBUF_NAMESPACE_ID::int64 fieldid_;
  ::PROTOBUF_NAMESPACE_ID::int64 indexid_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_5fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TenantMeta

// int64 ID = 1;
inline void TenantMeta::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TenantMeta::id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.TenantMeta.ID)
  return id_;
}
inline void TenantMeta::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.TenantMeta.ID)
}

// int64 num_query_nodes = 2;
inline void TenantMeta::clear_num_query_nodes() {
  num_query_nodes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TenantMeta::num_query_nodes() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.TenantMeta.num_query_nodes)
  return num_query_nodes_;
}
inline void TenantMeta::set_num_query_nodes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_query_nodes_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.TenantMeta.num_query_nodes)
}

// repeated string insert_channelIDs = 3;
inline int TenantMeta::insert_channelids_size() const {
  return insert_channelids_.size();
}
inline void TenantMeta::clear_insert_channelids() {
  insert_channelids_.Clear();
}
inline const std::string& TenantMeta::insert_channelids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.TenantMeta.insert_channelIDs)
  return insert_channelids_.Get(index);
}
inline std::string* TenantMeta::mutable_insert_channelids(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.TenantMeta.insert_channelIDs)
  return insert_channelids_.Mutable(index);
}
inline void TenantMeta::set_insert_channelids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.TenantMeta.insert_channelIDs)
  insert_channelids_.Mutable(index)->assign(value);
}
inline void TenantMeta::set_insert_channelids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.TenantMeta.insert_channelIDs)
  insert_channelids_.Mutable(index)->assign(std::move(value));
}
inline void TenantMeta::set_insert_channelids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  insert_channelids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.etcd.TenantMeta.insert_channelIDs)
}
inline void TenantMeta::set_insert_channelids(int index, const char* value, size_t size) {
  insert_channelids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.etcd.TenantMeta.insert_channelIDs)
}
inline std::string* TenantMeta::add_insert_channelids() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.etcd.TenantMeta.insert_channelIDs)
  return insert_channelids_.Add();
}
inline void TenantMeta::add_insert_channelids(const std::string& value) {
  insert_channelids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.TenantMeta.insert_channelIDs)
}
inline void TenantMeta::add_insert_channelids(std::string&& value) {
  insert_channelids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.TenantMeta.insert_channelIDs)
}
inline void TenantMeta::add_insert_channelids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  insert_channelids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.etcd.TenantMeta.insert_channelIDs)
}
inline void TenantMeta::add_insert_channelids(const char* value, size_t size) {
  insert_channelids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.etcd.TenantMeta.insert_channelIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TenantMeta::insert_channelids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.etcd.TenantMeta.insert_channelIDs)
  return insert_channelids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TenantMeta::mutable_insert_channelids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.etcd.TenantMeta.insert_channelIDs)
  return &insert_channelids_;
}

// string query_channelID = 4;
inline void TenantMeta::clear_query_channelid() {
  query_channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TenantMeta::query_channelid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.TenantMeta.query_channelID)
  return query_channelid_.GetNoArena();
}
inline void TenantMeta::set_query_channelid(const std::string& value) {
  
  query_channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.TenantMeta.query_channelID)
}
inline void TenantMeta::set_query_channelid(std::string&& value) {
  
  query_channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.etcd.TenantMeta.query_channelID)
}
inline void TenantMeta::set_query_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.etcd.TenantMeta.query_channelID)
}
inline void TenantMeta::set_query_channelid(const char* value, size_t size) {
  
  query_channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.etcd.TenantMeta.query_channelID)
}
inline std::string* TenantMeta::mutable_query_channelid() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.TenantMeta.query_channelID)
  return query_channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TenantMeta::release_query_channelid() {
  // @@protoc_insertion_point(field_release:milvus.proto.etcd.TenantMeta.query_channelID)
  
  return query_channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TenantMeta::set_allocated_query_channelid(std::string* query_channelid) {
  if (query_channelid != nullptr) {
    
  } else {
    
  }
  query_channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_channelid);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.etcd.TenantMeta.query_channelID)
}

// -------------------------------------------------------------------

// ProxyMeta

// int64 ID = 1;
inline void ProxyMeta::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProxyMeta::id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.ProxyMeta.ID)
  return id_;
}
inline void ProxyMeta::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.ProxyMeta.ID)
}

// .milvus.proto.common.Address address = 2;
inline bool ProxyMeta::has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline const ::milvus::proto::common::Address& ProxyMeta::address() const {
  const ::milvus::proto::common::Address* p = address_;
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.ProxyMeta.address)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Address*>(
      &::milvus::proto::common::_Address_default_instance_);
}
inline ::milvus::proto::common::Address* ProxyMeta::release_address() {
  // @@protoc_insertion_point(field_release:milvus.proto.etcd.ProxyMeta.address)
  
  ::milvus::proto::common::Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Address* ProxyMeta::mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.ProxyMeta.address)
  return address_;
}
inline void ProxyMeta::set_allocated_address(::milvus::proto::common::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.etcd.ProxyMeta.address)
}

// repeated string result_channelIDs = 3;
inline int ProxyMeta::result_channelids_size() const {
  return result_channelids_.size();
}
inline void ProxyMeta::clear_result_channelids() {
  result_channelids_.Clear();
}
inline const std::string& ProxyMeta::result_channelids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.ProxyMeta.result_channelIDs)
  return result_channelids_.Get(index);
}
inline std::string* ProxyMeta::mutable_result_channelids(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.ProxyMeta.result_channelIDs)
  return result_channelids_.Mutable(index);
}
inline void ProxyMeta::set_result_channelids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.ProxyMeta.result_channelIDs)
  result_channelids_.Mutable(index)->assign(value);
}
inline void ProxyMeta::set_result_channelids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.ProxyMeta.result_channelIDs)
  result_channelids_.Mutable(index)->assign(std::move(value));
}
inline void ProxyMeta::set_result_channelids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  result_channelids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.etcd.ProxyMeta.result_channelIDs)
}
inline void ProxyMeta::set_result_channelids(int index, const char* value, size_t size) {
  result_channelids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.etcd.ProxyMeta.result_channelIDs)
}
inline std::string* ProxyMeta::add_result_channelids() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.etcd.ProxyMeta.result_channelIDs)
  return result_channelids_.Add();
}
inline void ProxyMeta::add_result_channelids(const std::string& value) {
  result_channelids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.ProxyMeta.result_channelIDs)
}
inline void ProxyMeta::add_result_channelids(std::string&& value) {
  result_channelids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.ProxyMeta.result_channelIDs)
}
inline void ProxyMeta::add_result_channelids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  result_channelids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.etcd.ProxyMeta.result_channelIDs)
}
inline void ProxyMeta::add_result_channelids(const char* value, size_t size) {
  result_channelids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.etcd.ProxyMeta.result_channelIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProxyMeta::result_channelids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.etcd.ProxyMeta.result_channelIDs)
  return result_channelids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProxyMeta::mutable_result_channelids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.etcd.ProxyMeta.result_channelIDs)
  return &result_channelids_;
}

// -------------------------------------------------------------------

// CollectionMeta

// int64 ID = 1;
inline void CollectionMeta::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectionMeta::id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.CollectionMeta.ID)
  return id_;
}
inline void CollectionMeta::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.CollectionMeta.ID)
}

// .milvus.proto.schema.CollectionSchema schema = 2;
inline bool CollectionMeta::has_schema() const {
  return this != internal_default_instance() && schema_ != nullptr;
}
inline const ::milvus::proto::schema::CollectionSchema& CollectionMeta::schema() const {
  const ::milvus::proto::schema::CollectionSchema* p = schema_;
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.CollectionMeta.schema)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::schema::CollectionSchema*>(
      &::milvus::proto::schema::_CollectionSchema_default_instance_);
}
inline ::milvus::proto::schema::CollectionSchema* CollectionMeta::release_schema() {
  // @@protoc_insertion_point(field_release:milvus.proto.etcd.CollectionMeta.schema)
  
  ::milvus::proto::schema::CollectionSchema* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::CollectionSchema* CollectionMeta::mutable_schema() {
  
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::CollectionSchema>(GetArenaNoVirtual());
    schema_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.CollectionMeta.schema)
  return schema_;
}
inline void CollectionMeta::set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema_);
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.etcd.CollectionMeta.schema)
}

// uint64 create_time = 3;
inline void CollectionMeta::clear_create_time() {
  create_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CollectionMeta::create_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.CollectionMeta.create_time)
  return create_time_;
}
inline void CollectionMeta::set_create_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.CollectionMeta.create_time)
}

// repeated int64 segmentIDs = 4;
inline int CollectionMeta::segmentids_size() const {
  return segmentids_.size();
}
inline void CollectionMeta::clear_segmentids() {
  segmentids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectionMeta::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.CollectionMeta.segmentIDs)
  return segmentids_.Get(index);
}
inline void CollectionMeta::set_segmentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.CollectionMeta.segmentIDs)
}
inline void CollectionMeta::add_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  segmentids_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.CollectionMeta.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CollectionMeta::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.etcd.CollectionMeta.segmentIDs)
  return segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CollectionMeta::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.etcd.CollectionMeta.segmentIDs)
  return &segmentids_;
}

// repeated string partition_tags = 5;
inline int CollectionMeta::partition_tags_size() const {
  return partition_tags_.size();
}
inline void CollectionMeta::clear_partition_tags() {
  partition_tags_.Clear();
}
inline const std::string& CollectionMeta::partition_tags(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.CollectionMeta.partition_tags)
  return partition_tags_.Get(index);
}
inline std::string* CollectionMeta::mutable_partition_tags(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.CollectionMeta.partition_tags)
  return partition_tags_.Mutable(index);
}
inline void CollectionMeta::set_partition_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.CollectionMeta.partition_tags)
  partition_tags_.Mutable(index)->assign(value);
}
inline void CollectionMeta::set_partition_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.CollectionMeta.partition_tags)
  partition_tags_.Mutable(index)->assign(std::move(value));
}
inline void CollectionMeta::set_partition_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.etcd.CollectionMeta.partition_tags)
}
inline void CollectionMeta::set_partition_tags(int index, const char* value, size_t size) {
  partition_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.etcd.CollectionMeta.partition_tags)
}
inline std::string* CollectionMeta::add_partition_tags() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.etcd.CollectionMeta.partition_tags)
  return partition_tags_.Add();
}
inline void CollectionMeta::add_partition_tags(const std::string& value) {
  partition_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.CollectionMeta.partition_tags)
}
inline void CollectionMeta::add_partition_tags(std::string&& value) {
  partition_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.CollectionMeta.partition_tags)
}
inline void CollectionMeta::add_partition_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.etcd.CollectionMeta.partition_tags)
}
inline void CollectionMeta::add_partition_tags(const char* value, size_t size) {
  partition_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.etcd.CollectionMeta.partition_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CollectionMeta::partition_tags() const {
  // @@protoc_insertion_point(field_list:milvus.proto.etcd.CollectionMeta.partition_tags)
  return partition_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CollectionMeta::mutable_partition_tags() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.etcd.CollectionMeta.partition_tags)
  return &partition_tags_;
}

// -------------------------------------------------------------------

// FieldBinlogFiles

// int64 fieldID = 1;
inline void FieldBinlogFiles::clear_fieldid() {
  fieldid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldBinlogFiles::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.FieldBinlogFiles.fieldID)
  return fieldid_;
}
inline void FieldBinlogFiles::set_fieldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fieldid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.FieldBinlogFiles.fieldID)
}

// repeated string binlog_files = 2;
inline int FieldBinlogFiles::binlog_files_size() const {
  return binlog_files_.size();
}
inline void FieldBinlogFiles::clear_binlog_files() {
  binlog_files_.Clear();
}
inline const std::string& FieldBinlogFiles::binlog_files(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
  return binlog_files_.Get(index);
}
inline std::string* FieldBinlogFiles::mutable_binlog_files(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
  return binlog_files_.Mutable(index);
}
inline void FieldBinlogFiles::set_binlog_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
  binlog_files_.Mutable(index)->assign(value);
}
inline void FieldBinlogFiles::set_binlog_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
  binlog_files_.Mutable(index)->assign(std::move(value));
}
inline void FieldBinlogFiles::set_binlog_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  binlog_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
}
inline void FieldBinlogFiles::set_binlog_files(int index, const char* value, size_t size) {
  binlog_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
}
inline std::string* FieldBinlogFiles::add_binlog_files() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
  return binlog_files_.Add();
}
inline void FieldBinlogFiles::add_binlog_files(const std::string& value) {
  binlog_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
}
inline void FieldBinlogFiles::add_binlog_files(std::string&& value) {
  binlog_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
}
inline void FieldBinlogFiles::add_binlog_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  binlog_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
}
inline void FieldBinlogFiles::add_binlog_files(const char* value, size_t size) {
  binlog_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FieldBinlogFiles::binlog_files() const {
  // @@protoc_insertion_point(field_list:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
  return binlog_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FieldBinlogFiles::mutable_binlog_files() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.etcd.FieldBinlogFiles.binlog_files)
  return &binlog_files_;
}

// -------------------------------------------------------------------

// SegmentMeta

// int64 segmentID = 1;
inline void SegmentMeta::clear_segmentid() {
  segmentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegmentMeta::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.SegmentMeta.segmentID)
  return segmentid_;
}
inline void SegmentMeta::set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  segmentid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.SegmentMeta.segmentID)
}

// int64 collectionID = 2;
inline void SegmentMeta::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegmentMeta::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.SegmentMeta.collectionID)
  return collectionid_;
}
inline void SegmentMeta::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.SegmentMeta.collectionID)
}

// string partition_tag = 3;
inline void SegmentMeta::clear_partition_tag() {
  partition_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SegmentMeta::partition_tag() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.SegmentMeta.partition_tag)
  return partition_tag_.GetNoArena();
}
inline void SegmentMeta::set_partition_tag(const std::string& value) {
  
  partition_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.SegmentMeta.partition_tag)
}
inline void SegmentMeta::set_partition_tag(std::string&& value) {
  
  partition_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.etcd.SegmentMeta.partition_tag)
}
inline void SegmentMeta::set_partition_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.etcd.SegmentMeta.partition_tag)
}
inline void SegmentMeta::set_partition_tag(const char* value, size_t size) {
  
  partition_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.etcd.SegmentMeta.partition_tag)
}
inline std::string* SegmentMeta::mutable_partition_tag() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.SegmentMeta.partition_tag)
  return partition_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SegmentMeta::release_partition_tag() {
  // @@protoc_insertion_point(field_release:milvus.proto.etcd.SegmentMeta.partition_tag)
  
  return partition_tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentMeta::set_allocated_partition_tag(std::string* partition_tag) {
  if (partition_tag != nullptr) {
    
  } else {
    
  }
  partition_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_tag);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.etcd.SegmentMeta.partition_tag)
}

// int32 channel_start = 4;
inline void SegmentMeta::clear_channel_start() {
  channel_start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentMeta::channel_start() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.SegmentMeta.channel_start)
  return channel_start_;
}
inline void SegmentMeta::set_channel_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_start_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.SegmentMeta.channel_start)
}

// int32 channel_end = 5;
inline void SegmentMeta::clear_channel_end() {
  channel_end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentMeta::channel_end() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.SegmentMeta.channel_end)
  return channel_end_;
}
inline void SegmentMeta::set_channel_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_end_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.SegmentMeta.channel_end)
}

// uint64 open_time = 6;
inline void SegmentMeta::clear_open_time() {
  open_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegmentMeta::open_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.SegmentMeta.open_time)
  return open_time_;
}
inline void SegmentMeta::set_open_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  open_time_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.SegmentMeta.open_time)
}

// uint64 close_time = 7;
inline void SegmentMeta::clear_close_time() {
  close_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegmentMeta::close_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.SegmentMeta.close_time)
  return close_time_;
}
inline void SegmentMeta::set_close_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  close_time_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.SegmentMeta.close_time)
}

// int64 num_rows = 8;
inline void SegmentMeta::clear_num_rows() {
  num_rows_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegmentMeta::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.SegmentMeta.num_rows)
  return num_rows_;
}
inline void SegmentMeta::set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_rows_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.SegmentMeta.num_rows)
}

// int64 mem_size = 9;
inline void SegmentMeta::clear_mem_size() {
  mem_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegmentMeta::mem_size() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.SegmentMeta.mem_size)
  return mem_size_;
}
inline void SegmentMeta::set_mem_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mem_size_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.SegmentMeta.mem_size)
}

// repeated .milvus.proto.etcd.FieldBinlogFiles binlog_file_paths = 10;
inline int SegmentMeta::binlog_file_paths_size() const {
  return binlog_file_paths_.size();
}
inline void SegmentMeta::clear_binlog_file_paths() {
  binlog_file_paths_.Clear();
}
inline ::milvus::proto::etcd::FieldBinlogFiles* SegmentMeta::mutable_binlog_file_paths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.SegmentMeta.binlog_file_paths)
  return binlog_file_paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::etcd::FieldBinlogFiles >*
SegmentMeta::mutable_binlog_file_paths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.etcd.SegmentMeta.binlog_file_paths)
  return &binlog_file_paths_;
}
inline const ::milvus::proto::etcd::FieldBinlogFiles& SegmentMeta::binlog_file_paths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.SegmentMeta.binlog_file_paths)
  return binlog_file_paths_.Get(index);
}
inline ::milvus::proto::etcd::FieldBinlogFiles* SegmentMeta::add_binlog_file_paths() {
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.SegmentMeta.binlog_file_paths)
  return binlog_file_paths_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::etcd::FieldBinlogFiles >&
SegmentMeta::binlog_file_paths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.etcd.SegmentMeta.binlog_file_paths)
  return binlog_file_paths_;
}

// -------------------------------------------------------------------

// FieldIndexMeta

// int64 segmentID = 1;
inline void FieldIndexMeta::clear_segmentid() {
  segmentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldIndexMeta::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.FieldIndexMeta.segmentID)
  return segmentid_;
}
inline void FieldIndexMeta::set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  segmentid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.FieldIndexMeta.segmentID)
}

// int64 fieldID = 2;
inline void FieldIndexMeta::clear_fieldid() {
  fieldid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldIndexMeta::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.FieldIndexMeta.fieldID)
  return fieldid_;
}
inline void FieldIndexMeta::set_fieldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fieldid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.FieldIndexMeta.fieldID)
}

// string index_type = 3;
inline void FieldIndexMeta::clear_index_type() {
  index_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldIndexMeta::index_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.FieldIndexMeta.index_type)
  return index_type_.GetNoArena();
}
inline void FieldIndexMeta::set_index_type(const std::string& value) {
  
  index_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.FieldIndexMeta.index_type)
}
inline void FieldIndexMeta::set_index_type(std::string&& value) {
  
  index_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.etcd.FieldIndexMeta.index_type)
}
inline void FieldIndexMeta::set_index_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.etcd.FieldIndexMeta.index_type)
}
inline void FieldIndexMeta::set_index_type(const char* value, size_t size) {
  
  index_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.etcd.FieldIndexMeta.index_type)
}
inline std::string* FieldIndexMeta::mutable_index_type() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.FieldIndexMeta.index_type)
  return index_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldIndexMeta::release_index_type() {
  // @@protoc_insertion_point(field_release:milvus.proto.etcd.FieldIndexMeta.index_type)
  
  return index_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldIndexMeta::set_allocated_index_type(std::string* index_type) {
  if (index_type != nullptr) {
    
  } else {
    
  }
  index_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_type);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.etcd.FieldIndexMeta.index_type)
}

// int64 indexID = 4;
inline void FieldIndexMeta::clear_indexid() {
  indexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldIndexMeta::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.FieldIndexMeta.indexID)
  return indexid_;
}
inline void FieldIndexMeta::set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  indexid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.FieldIndexMeta.indexID)
}

// repeated .milvus.proto.common.KeyValuePair index_params = 5;
inline int FieldIndexMeta::index_params_size() const {
  return index_params_.size();
}
inline ::milvus::proto::common::KeyValuePair* FieldIndexMeta::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.FieldIndexMeta.index_params)
  return index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
FieldIndexMeta::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.etcd.FieldIndexMeta.index_params)
  return &index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& FieldIndexMeta::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.FieldIndexMeta.index_params)
  return index_params_.Get(index);
}
inline ::milvus::proto::common::KeyValuePair* FieldIndexMeta::add_index_params() {
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.FieldIndexMeta.index_params)
  return index_params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
FieldIndexMeta::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.etcd.FieldIndexMeta.index_params)
  return index_params_;
}

// .milvus.proto.service.IndexStatus status = 6;
inline void FieldIndexMeta::clear_status() {
  status_ = 0;
}
inline ::milvus::proto::service::IndexStatus FieldIndexMeta::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.FieldIndexMeta.status)
  return static_cast< ::milvus::proto::service::IndexStatus >(status_);
}
inline void FieldIndexMeta::set_status(::milvus::proto::service::IndexStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.FieldIndexMeta.status)
}

// repeated string index_file_paths = 7;
inline int FieldIndexMeta::index_file_paths_size() const {
  return index_file_paths_.size();
}
inline void FieldIndexMeta::clear_index_file_paths() {
  index_file_paths_.Clear();
}
inline const std::string& FieldIndexMeta::index_file_paths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
  return index_file_paths_.Get(index);
}
inline std::string* FieldIndexMeta::mutable_index_file_paths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
  return index_file_paths_.Mutable(index);
}
inline void FieldIndexMeta::set_index_file_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
  index_file_paths_.Mutable(index)->assign(value);
}
inline void FieldIndexMeta::set_index_file_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
  index_file_paths_.Mutable(index)->assign(std::move(value));
}
inline void FieldIndexMeta::set_index_file_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  index_file_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
}
inline void FieldIndexMeta::set_index_file_paths(int index, const char* value, size_t size) {
  index_file_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
}
inline std::string* FieldIndexMeta::add_index_file_paths() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
  return index_file_paths_.Add();
}
inline void FieldIndexMeta::add_index_file_paths(const std::string& value) {
  index_file_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
}
inline void FieldIndexMeta::add_index_file_paths(std::string&& value) {
  index_file_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
}
inline void FieldIndexMeta::add_index_file_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  index_file_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
}
inline void FieldIndexMeta::add_index_file_paths(const char* value, size_t size) {
  index_file_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FieldIndexMeta::index_file_paths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
  return index_file_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FieldIndexMeta::mutable_index_file_paths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.etcd.FieldIndexMeta.index_file_paths)
  return &index_file_paths_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace etcd
}  // namespace proto
}  // namespace milvus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_etcd_5fmeta_2eproto
