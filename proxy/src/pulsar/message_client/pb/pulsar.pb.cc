// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulsar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pulsar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorRowRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorRowRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_reflection_ = NULL;
struct CellOneofInstance {
  ::google::protobuf::int32 int32_value_;
  ::google::protobuf::int64 int64_value_;
  float float_value_;
  double double_value_;
  const ::pb::VectorRowRecord* vec_;
}* Cell_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RowValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* PulsarMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PulsarMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchResultMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResultMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OpType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pulsar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_pulsar_2eproto() {
  protobuf_AddDesc_pulsar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pulsar.proto");
  GOOGLE_CHECK(file != NULL);
  Status_descriptor_ = file->message_type(0);
  static const int Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, reason_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      -1,
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _is_default_instance_));
  SegmentRecord_descriptor_ = file->message_type(1);
  static const int SegmentRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentRecord, seg_info_),
  };
  SegmentRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SegmentRecord_descriptor_,
      SegmentRecord::default_instance_,
      SegmentRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(SegmentRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentRecord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentRecord, _is_default_instance_));
  VectorRowRecord_descriptor_ = file->message_type(2);
  static const int VectorRowRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorRowRecord, float_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorRowRecord, binary_data_),
  };
  VectorRowRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VectorRowRecord_descriptor_,
      VectorRowRecord::default_instance_,
      VectorRowRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(VectorRowRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorRowRecord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorRowRecord, _is_default_instance_));
  AttrRecord_descriptor_ = file->message_type(3);
  static const int AttrRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrRecord, int32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrRecord, int64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrRecord, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrRecord, double_value_),
  };
  AttrRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AttrRecord_descriptor_,
      AttrRecord::default_instance_,
      AttrRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(AttrRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrRecord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrRecord, _is_default_instance_));
  VectorRecord_descriptor_ = file->message_type(4);
  static const int VectorRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorRecord, records_),
  };
  VectorRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VectorRecord_descriptor_,
      VectorRecord::default_instance_,
      VectorRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(VectorRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorRecord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorRecord, _is_default_instance_));
  VectorParam_descriptor_ = file->message_type(5);
  static const int VectorParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorParam, json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorParam, row_record_),
  };
  VectorParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VectorParam_descriptor_,
      VectorParam::default_instance_,
      VectorParam_offsets_,
      -1,
      -1,
      -1,
      sizeof(VectorParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorParam, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorParam, _is_default_instance_));
  FieldValue_descriptor_ = file->message_type(6);
  static const int FieldValue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, attr_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, vector_record_),
  };
  FieldValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldValue_descriptor_,
      FieldValue::default_instance_,
      FieldValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(FieldValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, _is_default_instance_));
  Cell_descriptor_ = file->message_type(7);
  static const int Cell_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Cell_default_oneof_instance_, int32_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Cell_default_oneof_instance_, int64_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Cell_default_oneof_instance_, float_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Cell_default_oneof_instance_, double_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Cell_default_oneof_instance_, vec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, value_),
  };
  Cell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Cell_descriptor_,
      Cell::default_instance_,
      Cell_offsets_,
      -1,
      -1,
      -1,
      Cell_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _oneof_case_[0]),
      sizeof(Cell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _is_default_instance_));
  RowValue_descriptor_ = file->message_type(8);
  static const int RowValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, cell_),
  };
  RowValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RowValue_descriptor_,
      RowValue::default_instance_,
      RowValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(RowValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, _is_default_instance_));
  PulsarMessage_descriptor_ = file->message_type(9);
  static const int PulsarMessage_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, collection_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, partition_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, vector_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, partition_id_),
  };
  PulsarMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PulsarMessage_descriptor_,
      PulsarMessage::default_instance_,
      PulsarMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(PulsarMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulsarMessage, _is_default_instance_));
  TestData_descriptor_ = file->message_type(10);
  static const int TestData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData, name_),
  };
  TestData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestData_descriptor_,
      TestData::default_instance_,
      TestData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData, _is_default_instance_));
  InsertMsg_descriptor_ = file->message_type(11);
  static const int InsertMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertMsg, client_id_),
  };
  InsertMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InsertMsg_descriptor_,
      InsertMsg::default_instance_,
      InsertMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(InsertMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertMsg, _is_default_instance_));
  DeleteMsg_descriptor_ = file->message_type(12);
  static const int DeleteMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMsg, client_id_),
  };
  DeleteMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteMsg_descriptor_,
      DeleteMsg::default_instance_,
      DeleteMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMsg, _is_default_instance_));
  SearchMsg_descriptor_ = file->message_type(13);
  static const int SearchMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchMsg, client_id_),
  };
  SearchMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchMsg_descriptor_,
      SearchMsg::default_instance_,
      SearchMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchMsg, _is_default_instance_));
  SearchResultMsg_descriptor_ = file->message_type(14);
  static const int SearchResultMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultMsg, client_id_),
  };
  SearchResultMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchResultMsg_descriptor_,
      SearchResultMsg::default_instance_,
      SearchResultMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchResultMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultMsg, _is_default_instance_));
  ErrorCode_descriptor_ = file->enum_type(0);
  DataType_descriptor_ = file->enum_type(1);
  OpType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pulsar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SegmentRecord_descriptor_, &SegmentRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VectorRowRecord_descriptor_, &VectorRowRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AttrRecord_descriptor_, &AttrRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VectorRecord_descriptor_, &VectorRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VectorParam_descriptor_, &VectorParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldValue_descriptor_, &FieldValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Cell_descriptor_, &Cell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RowValue_descriptor_, &RowValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PulsarMessage_descriptor_, &PulsarMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestData_descriptor_, &TestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InsertMsg_descriptor_, &InsertMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteMsg_descriptor_, &DeleteMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchMsg_descriptor_, &SearchMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchResultMsg_descriptor_, &SearchResultMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pulsar_2eproto() {
  delete Status::default_instance_;
  delete Status_reflection_;
  delete SegmentRecord::default_instance_;
  delete SegmentRecord_reflection_;
  delete VectorRowRecord::default_instance_;
  delete VectorRowRecord_reflection_;
  delete AttrRecord::default_instance_;
  delete AttrRecord_reflection_;
  delete VectorRecord::default_instance_;
  delete VectorRecord_reflection_;
  delete VectorParam::default_instance_;
  delete VectorParam_reflection_;
  delete FieldValue::default_instance_;
  delete FieldValue_reflection_;
  delete Cell::default_instance_;
  delete Cell_default_oneof_instance_;
  delete Cell_reflection_;
  delete RowValue::default_instance_;
  delete RowValue_reflection_;
  delete PulsarMessage::default_instance_;
  delete PulsarMessage_reflection_;
  delete TestData::default_instance_;
  delete TestData_reflection_;
  delete InsertMsg::default_instance_;
  delete InsertMsg_reflection_;
  delete DeleteMsg::default_instance_;
  delete DeleteMsg_reflection_;
  delete SearchMsg::default_instance_;
  delete SearchMsg_reflection_;
  delete SearchResultMsg::default_instance_;
  delete SearchResultMsg_reflection_;
}

void protobuf_AddDesc_pulsar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_pulsar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014pulsar.proto\022\002pb\";\n\006Status\022!\n\nerror_co"
    "de\030\001 \001(\0162\r.pb.ErrorCode\022\016\n\006reason\030\002 \001(\t\""
    "!\n\rSegmentRecord\022\020\n\010seg_info\030\001 \003(\t\":\n\017Ve"
    "ctorRowRecord\022\022\n\nfloat_data\030\001 \003(\002\022\023\n\013bin"
    "ary_data\030\002 \001(\014\"a\n\nAttrRecord\022\023\n\013int32_va"
    "lue\030\001 \003(\005\022\023\n\013int64_value\030\002 \003(\003\022\023\n\013float_"
    "value\030\003 \003(\002\022\024\n\014double_value\030\004 \003(\001\"4\n\014Vec"
    "torRecord\022$\n\007records\030\001 \003(\0132\023.pb.VectorRo"
    "wRecord\"A\n\013VectorParam\022\014\n\004json\030\001 \001(\t\022$\n\n"
    "row_record\030\002 \001(\0132\020.pb.VectorRecord\"\212\001\n\nF"
    "ieldValue\022\022\n\nfield_name\030\001 \001(\t\022\032\n\004type\030\002 "
    "\001(\0162\014.pb.DataType\022#\n\013attr_record\030\003 \001(\0132\016"
    ".pb.AttrRecord\022\'\n\rvector_record\030\004 \001(\0132\020."
    "pb.VectorRecord\"\220\001\n\004Cell\022\025\n\013int32_value\030"
    "\001 \001(\005H\000\022\025\n\013int64_value\030\002 \001(\003H\000\022\025\n\013float_"
    "value\030\003 \001(\002H\000\022\026\n\014double_value\030\004 \001(\001H\000\022\"\n"
    "\003vec\030\005 \001(\0132\023.pb.VectorRowRecordH\000B\007\n\005val"
    "ue\"\"\n\010RowValue\022\026\n\004cell\030\002 \003(\0132\010.pb.Cell\"\254"
    "\002\n\rPulsarMessage\022\027\n\017collection_name\030\001 \001("
    "\t\022\036\n\006fields\030\002 \003(\0132\016.pb.FieldValue\022\021\n\tent"
    "ity_id\030\003 \001(\003\022\025\n\rpartition_tag\030\004 \001(\t\022%\n\014v"
    "ector_param\030\005 \001(\0132\017.pb.VectorParam\022#\n\010se"
    "gments\030\006 \001(\0132\021.pb.SegmentRecord\022\021\n\ttimes"
    "tamp\030\007 \001(\003\022\021\n\tclient_id\030\010 \001(\003\022\034\n\010msg_typ"
    "e\030\t \001(\0162\n.pb.OpType\022\022\n\ntopic_name\030\n \001(\t\022"
    "\024\n\014partition_id\030\013 \001(\003\"$\n\010TestData\022\n\n\002id\030"
    "\001 \001(\t\022\014\n\004name\030\002 \001(\t\"\036\n\tInsertMsg\022\021\n\tclie"
    "nt_id\030\001 \001(\003\"\036\n\tDeleteMsg\022\021\n\tclient_id\030\001 "
    "\001(\003\"\036\n\tSearchMsg\022\021\n\tclient_id\030\001 \001(\003\"$\n\017S"
    "earchResultMsg\022\021\n\tclient_id\030\001 \001(\003*\242\004\n\tEr"
    "rorCode\022\013\n\007SUCCESS\020\000\022\024\n\020UNEXPECTED_ERROR"
    "\020\001\022\022\n\016CONNECT_FAILED\020\002\022\025\n\021PERMISSION_DEN"
    "IED\020\003\022\031\n\025COLLECTION_NOT_EXISTS\020\004\022\024\n\020ILLE"
    "GAL_ARGUMENT\020\005\022\025\n\021ILLEGAL_DIMENSION\020\007\022\026\n"
    "\022ILLEGAL_INDEX_TYPE\020\010\022\033\n\027ILLEGAL_COLLECT"
    "ION_NAME\020\t\022\020\n\014ILLEGAL_TOPK\020\n\022\025\n\021ILLEGAL_"
    "ROWRECORD\020\013\022\025\n\021ILLEGAL_VECTOR_ID\020\014\022\031\n\025IL"
    "LEGAL_SEARCH_RESULT\020\r\022\022\n\016FILE_NOT_FOUND\020"
    "\016\022\017\n\013META_FAILED\020\017\022\020\n\014CACHE_FAILED\020\020\022\030\n\024"
    "CANNOT_CREATE_FOLDER\020\021\022\026\n\022CANNOT_CREATE_"
    "FILE\020\022\022\030\n\024CANNOT_DELETE_FOLDER\020\023\022\026\n\022CANN"
    "OT_DELETE_FILE\020\024\022\025\n\021BUILD_INDEX_ERROR\020\025\022"
    "\021\n\rILLEGAL_NLIST\020\026\022\027\n\023ILLEGAL_METRIC_TYP"
    "E\020\027\022\021\n\rOUT_OF_MEMORY\020\030*\221\001\n\010DataType\022\010\n\004N"
    "ONE\020\000\022\010\n\004BOOL\020\001\022\010\n\004INT8\020\002\022\t\n\005INT16\020\003\022\t\n\005"
    "INT32\020\004\022\t\n\005INT64\020\005\022\t\n\005FLOAT\020\n\022\n\n\006DOUBLE\020"
    "\013\022\n\n\006STRING\020\024\022\021\n\rVECTOR_BINARY\020d\022\020\n\014VECT"
    "OR_FLOAT\020e*W\n\006OpType\022\n\n\006Insert\020\000\022\n\n\006Dele"
    "te\020\001\022\n\n\006Search\020\002\022\014\n\010TimeSync\020\003\022\013\n\007Key2Se"
    "g\020\004\022\016\n\nStatistics\020\005b\006proto3", 1987);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pulsar.proto", &protobuf_RegisterTypes);
  Status::default_instance_ = new Status();
  SegmentRecord::default_instance_ = new SegmentRecord();
  VectorRowRecord::default_instance_ = new VectorRowRecord();
  AttrRecord::default_instance_ = new AttrRecord();
  VectorRecord::default_instance_ = new VectorRecord();
  VectorParam::default_instance_ = new VectorParam();
  FieldValue::default_instance_ = new FieldValue();
  Cell::default_instance_ = new Cell();
  Cell_default_oneof_instance_ = new CellOneofInstance();
  RowValue::default_instance_ = new RowValue();
  PulsarMessage::default_instance_ = new PulsarMessage();
  TestData::default_instance_ = new TestData();
  InsertMsg::default_instance_ = new InsertMsg();
  DeleteMsg::default_instance_ = new DeleteMsg();
  SearchMsg::default_instance_ = new SearchMsg();
  SearchResultMsg::default_instance_ = new SearchResultMsg();
  Status::default_instance_->InitAsDefaultInstance();
  SegmentRecord::default_instance_->InitAsDefaultInstance();
  VectorRowRecord::default_instance_->InitAsDefaultInstance();
  AttrRecord::default_instance_->InitAsDefaultInstance();
  VectorRecord::default_instance_->InitAsDefaultInstance();
  VectorParam::default_instance_->InitAsDefaultInstance();
  FieldValue::default_instance_->InitAsDefaultInstance();
  Cell::default_instance_->InitAsDefaultInstance();
  RowValue::default_instance_->InitAsDefaultInstance();
  PulsarMessage::default_instance_->InitAsDefaultInstance();
  TestData::default_instance_->InitAsDefaultInstance();
  InsertMsg::default_instance_->InitAsDefaultInstance();
  DeleteMsg::default_instance_->InitAsDefaultInstance();
  SearchMsg::default_instance_->InitAsDefaultInstance();
  SearchResultMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pulsar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pulsar_2eproto {
  StaticDescriptorInitializer_pulsar_2eproto() {
    protobuf_AddDesc_pulsar_2eproto();
  }
} static_descriptor_initializer_pulsar_2eproto_;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 20:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpType_descriptor_;
}
bool OpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kErrorCodeFieldNumber;
const int Status::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Status)
}

void Status::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Status)
}

void Status::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:pb.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Status)
  error_code_ = 0;
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ErrorCode error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::pb::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Status.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Status)
  // optional .pb.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Status.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Status)
  // optional .pb.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Status.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Status)
  return target;
}

int Status::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Status)
  int total_size = 0;

  // optional .pb.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Status* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(error_code_, other->error_code_);
  reason_.Swap(&other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional .pb.ErrorCode error_code = 1;
void Status::clear_error_code() {
  error_code_ = 0;
}
 ::pb::ErrorCode Status::error_code() const {
  // @@protoc_insertion_point(field_get:pb.Status.error_code)
  return static_cast< ::pb::ErrorCode >(error_code_);
}
 void Status::set_error_code(::pb::ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:pb.Status.error_code)
}

// optional string reason = 2;
void Status::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Status::reason() const {
  // @@protoc_insertion_point(field_get:pb.Status.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Status.reason)
}
 void Status::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Status.reason)
}
 void Status::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Status.reason)
}
 ::std::string* Status::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:pb.Status.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_reason() {
  // @@protoc_insertion_point(field_release:pb.Status.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:pb.Status.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SegmentRecord::kSegInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SegmentRecord::SegmentRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SegmentRecord)
}

void SegmentRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SegmentRecord::SegmentRecord(const SegmentRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SegmentRecord)
}

void SegmentRecord::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

SegmentRecord::~SegmentRecord() {
  // @@protoc_insertion_point(destructor:pb.SegmentRecord)
  SharedDtor();
}

void SegmentRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentRecord_descriptor_;
}

const SegmentRecord& SegmentRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

SegmentRecord* SegmentRecord::default_instance_ = NULL;

SegmentRecord* SegmentRecord::New(::google::protobuf::Arena* arena) const {
  SegmentRecord* n = new SegmentRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SegmentRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SegmentRecord)
  seg_info_.Clear();
}

bool SegmentRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SegmentRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string seg_info = 1;
      case 1: {
        if (tag == 10) {
         parse_seg_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_seg_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seg_info(this->seg_info_size() - 1).data(),
            this->seg_info(this->seg_info_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SegmentRecord.seg_info"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_seg_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SegmentRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SegmentRecord)
  return false;
#undef DO_
}

void SegmentRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SegmentRecord)
  // repeated string seg_info = 1;
  for (int i = 0; i < this->seg_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seg_info(i).data(), this->seg_info(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SegmentRecord.seg_info");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->seg_info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.SegmentRecord)
}

::google::protobuf::uint8* SegmentRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SegmentRecord)
  // repeated string seg_info = 1;
  for (int i = 0; i < this->seg_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seg_info(i).data(), this->seg_info(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SegmentRecord.seg_info");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->seg_info(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.SegmentRecord)
  return target;
}

int SegmentRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SegmentRecord)
  int total_size = 0;

  // repeated string seg_info = 1;
  total_size += 1 * this->seg_info_size();
  for (int i = 0; i < this->seg_info_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->seg_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SegmentRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SegmentRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SegmentRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SegmentRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SegmentRecord)
    MergeFrom(*source);
  }
}

void SegmentRecord::MergeFrom(const SegmentRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SegmentRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  seg_info_.MergeFrom(from.seg_info_);
}

void SegmentRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SegmentRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentRecord::CopyFrom(const SegmentRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SegmentRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentRecord::IsInitialized() const {

  return true;
}

void SegmentRecord::Swap(SegmentRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SegmentRecord::InternalSwap(SegmentRecord* other) {
  seg_info_.UnsafeArenaSwap(&other->seg_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SegmentRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentRecord_descriptor_;
  metadata.reflection = SegmentRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SegmentRecord

// repeated string seg_info = 1;
int SegmentRecord::seg_info_size() const {
  return seg_info_.size();
}
void SegmentRecord::clear_seg_info() {
  seg_info_.Clear();
}
 const ::std::string& SegmentRecord::seg_info(int index) const {
  // @@protoc_insertion_point(field_get:pb.SegmentRecord.seg_info)
  return seg_info_.Get(index);
}
 ::std::string* SegmentRecord::mutable_seg_info(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SegmentRecord.seg_info)
  return seg_info_.Mutable(index);
}
 void SegmentRecord::set_seg_info(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.SegmentRecord.seg_info)
  seg_info_.Mutable(index)->assign(value);
}
 void SegmentRecord::set_seg_info(int index, const char* value) {
  seg_info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SegmentRecord.seg_info)
}
 void SegmentRecord::set_seg_info(int index, const char* value, size_t size) {
  seg_info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SegmentRecord.seg_info)
}
 ::std::string* SegmentRecord::add_seg_info() {
  // @@protoc_insertion_point(field_add_mutable:pb.SegmentRecord.seg_info)
  return seg_info_.Add();
}
 void SegmentRecord::add_seg_info(const ::std::string& value) {
  seg_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.SegmentRecord.seg_info)
}
 void SegmentRecord::add_seg_info(const char* value) {
  seg_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.SegmentRecord.seg_info)
}
 void SegmentRecord::add_seg_info(const char* value, size_t size) {
  seg_info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.SegmentRecord.seg_info)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SegmentRecord::seg_info() const {
  // @@protoc_insertion_point(field_list:pb.SegmentRecord.seg_info)
  return seg_info_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SegmentRecord::mutable_seg_info() {
  // @@protoc_insertion_point(field_mutable_list:pb.SegmentRecord.seg_info)
  return &seg_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorRowRecord::kFloatDataFieldNumber;
const int VectorRowRecord::kBinaryDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorRowRecord::VectorRowRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.VectorRowRecord)
}

void VectorRowRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VectorRowRecord::VectorRowRecord(const VectorRowRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.VectorRowRecord)
}

void VectorRowRecord::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  binary_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VectorRowRecord::~VectorRowRecord() {
  // @@protoc_insertion_point(destructor:pb.VectorRowRecord)
  SharedDtor();
}

void VectorRowRecord::SharedDtor() {
  binary_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VectorRowRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorRowRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorRowRecord_descriptor_;
}

const VectorRowRecord& VectorRowRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

VectorRowRecord* VectorRowRecord::default_instance_ = NULL;

VectorRowRecord* VectorRowRecord::New(::google::protobuf::Arena* arena) const {
  VectorRowRecord* n = new VectorRowRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VectorRowRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.VectorRowRecord)
  binary_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  float_data_.Clear();
}

bool VectorRowRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.VectorRowRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float float_data = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_binary_data;
        break;
      }

      // optional bytes binary_data = 2;
      case 2: {
        if (tag == 18) {
         parse_binary_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.VectorRowRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.VectorRowRecord)
  return false;
#undef DO_
}

void VectorRowRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.VectorRowRecord)
  // repeated float float_data = 1;
  if (this->float_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_float_data_cached_byte_size_);
  }
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->float_data(i), output);
  }

  // optional bytes binary_data = 2;
  if (this->binary_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->binary_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.VectorRowRecord)
}

::google::protobuf::uint8* VectorRowRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.VectorRowRecord)
  // repeated float float_data = 1;
  if (this->float_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _float_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->float_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->float_data(i), target);
  }

  // optional bytes binary_data = 2;
  if (this->binary_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->binary_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.VectorRowRecord)
  return target;
}

int VectorRowRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.VectorRowRecord)
  int total_size = 0;

  // optional bytes binary_data = 2;
  if (this->binary_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->binary_data());
  }

  // repeated float float_data = 1;
  {
    int data_size = 0;
    data_size = 4 * this->float_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _float_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorRowRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.VectorRowRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VectorRowRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorRowRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.VectorRowRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.VectorRowRecord)
    MergeFrom(*source);
  }
}

void VectorRowRecord::MergeFrom(const VectorRowRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.VectorRowRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  float_data_.MergeFrom(from.float_data_);
  if (from.binary_data().size() > 0) {

    binary_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_data_);
  }
}

void VectorRowRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.VectorRowRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorRowRecord::CopyFrom(const VectorRowRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.VectorRowRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorRowRecord::IsInitialized() const {

  return true;
}

void VectorRowRecord::Swap(VectorRowRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorRowRecord::InternalSwap(VectorRowRecord* other) {
  float_data_.UnsafeArenaSwap(&other->float_data_);
  binary_data_.Swap(&other->binary_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VectorRowRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorRowRecord_descriptor_;
  metadata.reflection = VectorRowRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VectorRowRecord

// repeated float float_data = 1;
int VectorRowRecord::float_data_size() const {
  return float_data_.size();
}
void VectorRowRecord::clear_float_data() {
  float_data_.Clear();
}
 float VectorRowRecord::float_data(int index) const {
  // @@protoc_insertion_point(field_get:pb.VectorRowRecord.float_data)
  return float_data_.Get(index);
}
 void VectorRowRecord::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.VectorRowRecord.float_data)
}
 void VectorRowRecord::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:pb.VectorRowRecord.float_data)
}
 const ::google::protobuf::RepeatedField< float >&
VectorRowRecord::float_data() const {
  // @@protoc_insertion_point(field_list:pb.VectorRowRecord.float_data)
  return float_data_;
}
 ::google::protobuf::RepeatedField< float >*
VectorRowRecord::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.VectorRowRecord.float_data)
  return &float_data_;
}

// optional bytes binary_data = 2;
void VectorRowRecord::clear_binary_data() {
  binary_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VectorRowRecord::binary_data() const {
  // @@protoc_insertion_point(field_get:pb.VectorRowRecord.binary_data)
  return binary_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VectorRowRecord::set_binary_data(const ::std::string& value) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.VectorRowRecord.binary_data)
}
 void VectorRowRecord::set_binary_data(const char* value) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.VectorRowRecord.binary_data)
}
 void VectorRowRecord::set_binary_data(const void* value, size_t size) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.VectorRowRecord.binary_data)
}
 ::std::string* VectorRowRecord::mutable_binary_data() {
  
  // @@protoc_insertion_point(field_mutable:pb.VectorRowRecord.binary_data)
  return binary_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VectorRowRecord::release_binary_data() {
  // @@protoc_insertion_point(field_release:pb.VectorRowRecord.binary_data)
  
  return binary_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VectorRowRecord::set_allocated_binary_data(::std::string* binary_data) {
  if (binary_data != NULL) {
    
  } else {
    
  }
  binary_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_data);
  // @@protoc_insertion_point(field_set_allocated:pb.VectorRowRecord.binary_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttrRecord::kInt32ValueFieldNumber;
const int AttrRecord::kInt64ValueFieldNumber;
const int AttrRecord::kFloatValueFieldNumber;
const int AttrRecord::kDoubleValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttrRecord::AttrRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AttrRecord)
}

void AttrRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AttrRecord::AttrRecord(const AttrRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AttrRecord)
}

void AttrRecord::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AttrRecord::~AttrRecord() {
  // @@protoc_insertion_point(destructor:pb.AttrRecord)
  SharedDtor();
}

void AttrRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttrRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrRecord_descriptor_;
}

const AttrRecord& AttrRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

AttrRecord* AttrRecord::default_instance_ = NULL;

AttrRecord* AttrRecord::New(::google::protobuf::Arena* arena) const {
  AttrRecord* n = new AttrRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttrRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.AttrRecord)
  int32_value_.Clear();
  int64_value_.Clear();
  float_value_.Clear();
  double_value_.Clear();
}

bool AttrRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AttrRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 int32_value = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_value())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_int32_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_int64_value;
        break;
      }

      // repeated int64 int64_value = 2;
      case 2: {
        if (tag == 18) {
         parse_int64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_int64_value())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_int64_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_float_value;
        break;
      }

      // repeated float float_value = 3;
      case 3: {
        if (tag == 26) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_value())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_float_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_double_value;
        break;
      }

      // repeated double double_value = 4;
      case 4: {
        if (tag == 34) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_value())));
        } else if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_double_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AttrRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AttrRecord)
  return false;
#undef DO_
}

void AttrRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AttrRecord)
  // repeated int32 int32_value = 1;
  if (this->int32_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int32_value_cached_byte_size_);
  }
  for (int i = 0; i < this->int32_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int32_value(i), output);
  }

  // repeated int64 int64_value = 2;
  if (this->int64_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int64_value_cached_byte_size_);
  }
  for (int i = 0; i < this->int64_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->int64_value(i), output);
  }

  // repeated float float_value = 3;
  if (this->float_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_float_value_cached_byte_size_);
  }
  for (int i = 0; i < this->float_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->float_value(i), output);
  }

  // repeated double double_value = 4;
  if (this->double_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_value_cached_byte_size_);
  }
  for (int i = 0; i < this->double_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.AttrRecord)
}

::google::protobuf::uint8* AttrRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AttrRecord)
  // repeated int32 int32_value = 1;
  if (this->int32_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int32_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int32_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int32_value(i), target);
  }

  // repeated int64 int64_value = 2;
  if (this->int64_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int64_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int64_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->int64_value(i), target);
  }

  // repeated float float_value = 3;
  if (this->float_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _float_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->float_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->float_value(i), target);
  }

  // repeated double double_value = 4;
  if (this->double_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.AttrRecord)
  return target;
}

int AttrRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.AttrRecord)
  int total_size = 0;

  // repeated int32 int32_value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->int32_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32_value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int32_value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 int64_value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->int64_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->int64_value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int64_value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float float_value = 3;
  {
    int data_size = 0;
    data_size = 4 * this->float_value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _float_value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_value = 4;
  {
    int data_size = 0;
    data_size = 8 * this->double_value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.AttrRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AttrRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AttrRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.AttrRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.AttrRecord)
    MergeFrom(*source);
  }
}

void AttrRecord::MergeFrom(const AttrRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.AttrRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  int32_value_.MergeFrom(from.int32_value_);
  int64_value_.MergeFrom(from.int64_value_);
  float_value_.MergeFrom(from.float_value_);
  double_value_.MergeFrom(from.double_value_);
}

void AttrRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.AttrRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrRecord::CopyFrom(const AttrRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.AttrRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrRecord::IsInitialized() const {

  return true;
}

void AttrRecord::Swap(AttrRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttrRecord::InternalSwap(AttrRecord* other) {
  int32_value_.UnsafeArenaSwap(&other->int32_value_);
  int64_value_.UnsafeArenaSwap(&other->int64_value_);
  float_value_.UnsafeArenaSwap(&other->float_value_);
  double_value_.UnsafeArenaSwap(&other->double_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttrRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrRecord_descriptor_;
  metadata.reflection = AttrRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AttrRecord

// repeated int32 int32_value = 1;
int AttrRecord::int32_value_size() const {
  return int32_value_.size();
}
void AttrRecord::clear_int32_value() {
  int32_value_.Clear();
}
 ::google::protobuf::int32 AttrRecord::int32_value(int index) const {
  // @@protoc_insertion_point(field_get:pb.AttrRecord.int32_value)
  return int32_value_.Get(index);
}
 void AttrRecord::set_int32_value(int index, ::google::protobuf::int32 value) {
  int32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.AttrRecord.int32_value)
}
 void AttrRecord::add_int32_value(::google::protobuf::int32 value) {
  int32_value_.Add(value);
  // @@protoc_insertion_point(field_add:pb.AttrRecord.int32_value)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AttrRecord::int32_value() const {
  // @@protoc_insertion_point(field_list:pb.AttrRecord.int32_value)
  return int32_value_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AttrRecord::mutable_int32_value() {
  // @@protoc_insertion_point(field_mutable_list:pb.AttrRecord.int32_value)
  return &int32_value_;
}

// repeated int64 int64_value = 2;
int AttrRecord::int64_value_size() const {
  return int64_value_.size();
}
void AttrRecord::clear_int64_value() {
  int64_value_.Clear();
}
 ::google::protobuf::int64 AttrRecord::int64_value(int index) const {
  // @@protoc_insertion_point(field_get:pb.AttrRecord.int64_value)
  return int64_value_.Get(index);
}
 void AttrRecord::set_int64_value(int index, ::google::protobuf::int64 value) {
  int64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.AttrRecord.int64_value)
}
 void AttrRecord::add_int64_value(::google::protobuf::int64 value) {
  int64_value_.Add(value);
  // @@protoc_insertion_point(field_add:pb.AttrRecord.int64_value)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AttrRecord::int64_value() const {
  // @@protoc_insertion_point(field_list:pb.AttrRecord.int64_value)
  return int64_value_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AttrRecord::mutable_int64_value() {
  // @@protoc_insertion_point(field_mutable_list:pb.AttrRecord.int64_value)
  return &int64_value_;
}

// repeated float float_value = 3;
int AttrRecord::float_value_size() const {
  return float_value_.size();
}
void AttrRecord::clear_float_value() {
  float_value_.Clear();
}
 float AttrRecord::float_value(int index) const {
  // @@protoc_insertion_point(field_get:pb.AttrRecord.float_value)
  return float_value_.Get(index);
}
 void AttrRecord::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.AttrRecord.float_value)
}
 void AttrRecord::add_float_value(float value) {
  float_value_.Add(value);
  // @@protoc_insertion_point(field_add:pb.AttrRecord.float_value)
}
 const ::google::protobuf::RepeatedField< float >&
AttrRecord::float_value() const {
  // @@protoc_insertion_point(field_list:pb.AttrRecord.float_value)
  return float_value_;
}
 ::google::protobuf::RepeatedField< float >*
AttrRecord::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:pb.AttrRecord.float_value)
  return &float_value_;
}

// repeated double double_value = 4;
int AttrRecord::double_value_size() const {
  return double_value_.size();
}
void AttrRecord::clear_double_value() {
  double_value_.Clear();
}
 double AttrRecord::double_value(int index) const {
  // @@protoc_insertion_point(field_get:pb.AttrRecord.double_value)
  return double_value_.Get(index);
}
 void AttrRecord::set_double_value(int index, double value) {
  double_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.AttrRecord.double_value)
}
 void AttrRecord::add_double_value(double value) {
  double_value_.Add(value);
  // @@protoc_insertion_point(field_add:pb.AttrRecord.double_value)
}
 const ::google::protobuf::RepeatedField< double >&
AttrRecord::double_value() const {
  // @@protoc_insertion_point(field_list:pb.AttrRecord.double_value)
  return double_value_;
}
 ::google::protobuf::RepeatedField< double >*
AttrRecord::mutable_double_value() {
  // @@protoc_insertion_point(field_mutable_list:pb.AttrRecord.double_value)
  return &double_value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorRecord::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorRecord::VectorRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.VectorRecord)
}

void VectorRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VectorRecord::VectorRecord(const VectorRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.VectorRecord)
}

void VectorRecord::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

VectorRecord::~VectorRecord() {
  // @@protoc_insertion_point(destructor:pb.VectorRecord)
  SharedDtor();
}

void VectorRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VectorRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorRecord_descriptor_;
}

const VectorRecord& VectorRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

VectorRecord* VectorRecord::default_instance_ = NULL;

VectorRecord* VectorRecord::New(::google::protobuf::Arena* arena) const {
  VectorRecord* n = new VectorRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VectorRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.VectorRecord)
  records_.Clear();
}

bool VectorRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.VectorRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.VectorRowRecord records = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_records;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.VectorRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.VectorRecord)
  return false;
#undef DO_
}

void VectorRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.VectorRecord)
  // repeated .pb.VectorRowRecord records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.VectorRecord)
}

::google::protobuf::uint8* VectorRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.VectorRecord)
  // repeated .pb.VectorRowRecord records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->records(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.VectorRecord)
  return target;
}

int VectorRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.VectorRecord)
  int total_size = 0;

  // repeated .pb.VectorRowRecord records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.VectorRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VectorRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.VectorRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.VectorRecord)
    MergeFrom(*source);
  }
}

void VectorRecord::MergeFrom(const VectorRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.VectorRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  records_.MergeFrom(from.records_);
}

void VectorRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.VectorRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorRecord::CopyFrom(const VectorRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.VectorRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorRecord::IsInitialized() const {

  return true;
}

void VectorRecord::Swap(VectorRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorRecord::InternalSwap(VectorRecord* other) {
  records_.UnsafeArenaSwap(&other->records_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VectorRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorRecord_descriptor_;
  metadata.reflection = VectorRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VectorRecord

// repeated .pb.VectorRowRecord records = 1;
int VectorRecord::records_size() const {
  return records_.size();
}
void VectorRecord::clear_records() {
  records_.Clear();
}
const ::pb::VectorRowRecord& VectorRecord::records(int index) const {
  // @@protoc_insertion_point(field_get:pb.VectorRecord.records)
  return records_.Get(index);
}
::pb::VectorRowRecord* VectorRecord::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:pb.VectorRecord.records)
  return records_.Mutable(index);
}
::pb::VectorRowRecord* VectorRecord::add_records() {
  // @@protoc_insertion_point(field_add:pb.VectorRecord.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::VectorRowRecord >*
VectorRecord::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:pb.VectorRecord.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::VectorRowRecord >&
VectorRecord::records() const {
  // @@protoc_insertion_point(field_list:pb.VectorRecord.records)
  return records_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorParam::kJsonFieldNumber;
const int VectorParam::kRowRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorParam::VectorParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.VectorParam)
}

void VectorParam::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  row_record_ = const_cast< ::pb::VectorRecord*>(&::pb::VectorRecord::default_instance());
}

VectorParam::VectorParam(const VectorParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.VectorParam)
}

void VectorParam::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_record_ = NULL;
}

VectorParam::~VectorParam() {
  // @@protoc_insertion_point(destructor:pb.VectorParam)
  SharedDtor();
}

void VectorParam::SharedDtor() {
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete row_record_;
  }
}

void VectorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorParam_descriptor_;
}

const VectorParam& VectorParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

VectorParam* VectorParam::default_instance_ = NULL;

VectorParam* VectorParam::New(::google::protobuf::Arena* arena) const {
  VectorParam* n = new VectorParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VectorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.VectorParam)
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && row_record_ != NULL) delete row_record_;
  row_record_ = NULL;
}

bool VectorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.VectorParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string json = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), this->json().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.VectorParam.json"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row_record;
        break;
      }

      // optional .pb.VectorRecord row_record = 2;
      case 2: {
        if (tag == 18) {
         parse_row_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.VectorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.VectorParam)
  return false;
#undef DO_
}

void VectorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.VectorParam)
  // optional string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.VectorParam.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json(), output);
  }

  // optional .pb.VectorRecord row_record = 2;
  if (this->has_row_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->row_record_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.VectorParam)
}

::google::protobuf::uint8* VectorParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.VectorParam)
  // optional string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.VectorParam.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json(), target);
  }

  // optional .pb.VectorRecord row_record = 2;
  if (this->has_row_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->row_record_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.VectorParam)
  return target;
}

int VectorParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.VectorParam)
  int total_size = 0;

  // optional string json = 1;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  // optional .pb.VectorRecord row_record = 2;
  if (this->has_row_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->row_record_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.VectorParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VectorParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.VectorParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.VectorParam)
    MergeFrom(*source);
  }
}

void VectorParam::MergeFrom(const VectorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.VectorParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.has_row_record()) {
    mutable_row_record()->::pb::VectorRecord::MergeFrom(from.row_record());
  }
}

void VectorParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.VectorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorParam::CopyFrom(const VectorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.VectorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorParam::IsInitialized() const {

  return true;
}

void VectorParam::Swap(VectorParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorParam::InternalSwap(VectorParam* other) {
  json_.Swap(&other->json_);
  std::swap(row_record_, other->row_record_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VectorParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorParam_descriptor_;
  metadata.reflection = VectorParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VectorParam

// optional string json = 1;
void VectorParam::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VectorParam::json() const {
  // @@protoc_insertion_point(field_get:pb.VectorParam.json)
  return json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VectorParam::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.VectorParam.json)
}
 void VectorParam::set_json(const char* value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.VectorParam.json)
}
 void VectorParam::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.VectorParam.json)
}
 ::std::string* VectorParam::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:pb.VectorParam.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VectorParam::release_json() {
  // @@protoc_insertion_point(field_release:pb.VectorParam.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VectorParam::set_allocated_json(::std::string* json) {
  if (json != NULL) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:pb.VectorParam.json)
}

// optional .pb.VectorRecord row_record = 2;
bool VectorParam::has_row_record() const {
  return !_is_default_instance_ && row_record_ != NULL;
}
void VectorParam::clear_row_record() {
  if (GetArenaNoVirtual() == NULL && row_record_ != NULL) delete row_record_;
  row_record_ = NULL;
}
const ::pb::VectorRecord& VectorParam::row_record() const {
  // @@protoc_insertion_point(field_get:pb.VectorParam.row_record)
  return row_record_ != NULL ? *row_record_ : *default_instance_->row_record_;
}
::pb::VectorRecord* VectorParam::mutable_row_record() {
  
  if (row_record_ == NULL) {
    row_record_ = new ::pb::VectorRecord;
  }
  // @@protoc_insertion_point(field_mutable:pb.VectorParam.row_record)
  return row_record_;
}
::pb::VectorRecord* VectorParam::release_row_record() {
  // @@protoc_insertion_point(field_release:pb.VectorParam.row_record)
  
  ::pb::VectorRecord* temp = row_record_;
  row_record_ = NULL;
  return temp;
}
void VectorParam::set_allocated_row_record(::pb::VectorRecord* row_record) {
  delete row_record_;
  row_record_ = row_record;
  if (row_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.VectorParam.row_record)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldValue::kFieldNameFieldNumber;
const int FieldValue::kTypeFieldNumber;
const int FieldValue::kAttrRecordFieldNumber;
const int FieldValue::kVectorRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldValue::FieldValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FieldValue)
}

void FieldValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  attr_record_ = const_cast< ::pb::AttrRecord*>(&::pb::AttrRecord::default_instance());
  vector_record_ = const_cast< ::pb::VectorRecord*>(&::pb::VectorRecord::default_instance());
}

FieldValue::FieldValue(const FieldValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.FieldValue)
}

void FieldValue::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  attr_record_ = NULL;
  vector_record_ = NULL;
}

FieldValue::~FieldValue() {
  // @@protoc_insertion_point(destructor:pb.FieldValue)
  SharedDtor();
}

void FieldValue::SharedDtor() {
  field_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete attr_record_;
    delete vector_record_;
  }
}

void FieldValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldValue_descriptor_;
}

const FieldValue& FieldValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

FieldValue* FieldValue::default_instance_ = NULL;

FieldValue* FieldValue::New(::google::protobuf::Arena* arena) const {
  FieldValue* n = new FieldValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldValue::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FieldValue)
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && attr_record_ != NULL) delete attr_record_;
  attr_record_ = NULL;
  if (GetArenaNoVirtual() == NULL && vector_record_ != NULL) delete vector_record_;
  vector_record_ = NULL;
}

bool FieldValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FieldValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string field_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), this->field_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.FieldValue.field_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .pb.DataType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attr_record;
        break;
      }

      // optional .pb.AttrRecord attr_record = 3;
      case 3: {
        if (tag == 26) {
         parse_attr_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vector_record;
        break;
      }

      // optional .pb.VectorRecord vector_record = 4;
      case 4: {
        if (tag == 34) {
         parse_vector_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FieldValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FieldValue)
  return false;
#undef DO_
}

void FieldValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FieldValue)
  // optional string field_name = 1;
  if (this->field_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.FieldValue.field_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field_name(), output);
  }

  // optional .pb.DataType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .pb.AttrRecord attr_record = 3;
  if (this->has_attr_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->attr_record_, output);
  }

  // optional .pb.VectorRecord vector_record = 4;
  if (this->has_vector_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->vector_record_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.FieldValue)
}

::google::protobuf::uint8* FieldValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.FieldValue)
  // optional string field_name = 1;
  if (this->field_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.FieldValue.field_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }

  // optional .pb.DataType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .pb.AttrRecord attr_record = 3;
  if (this->has_attr_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->attr_record_, false, target);
  }

  // optional .pb.VectorRecord vector_record = 4;
  if (this->has_vector_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->vector_record_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.FieldValue)
  return target;
}

int FieldValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FieldValue)
  int total_size = 0;

  // optional string field_name = 1;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  // optional .pb.DataType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .pb.AttrRecord attr_record = 3;
  if (this->has_attr_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->attr_record_);
  }

  // optional .pb.VectorRecord vector_record = 4;
  if (this->has_vector_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vector_record_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FieldValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FieldValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FieldValue)
    MergeFrom(*source);
  }
}

void FieldValue::MergeFrom(const FieldValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FieldValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_attr_record()) {
    mutable_attr_record()->::pb::AttrRecord::MergeFrom(from.attr_record());
  }
  if (from.has_vector_record()) {
    mutable_vector_record()->::pb::VectorRecord::MergeFrom(from.vector_record());
  }
}

void FieldValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FieldValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldValue::CopyFrom(const FieldValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FieldValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldValue::IsInitialized() const {

  return true;
}

void FieldValue::Swap(FieldValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldValue::InternalSwap(FieldValue* other) {
  field_name_.Swap(&other->field_name_);
  std::swap(type_, other->type_);
  std::swap(attr_record_, other->attr_record_);
  std::swap(vector_record_, other->vector_record_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldValue_descriptor_;
  metadata.reflection = FieldValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldValue

// optional string field_name = 1;
void FieldValue::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FieldValue::field_name() const {
  // @@protoc_insertion_point(field_get:pb.FieldValue.field_name)
  return field_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FieldValue::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.FieldValue.field_name)
}
 void FieldValue::set_field_name(const char* value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.FieldValue.field_name)
}
 void FieldValue::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.FieldValue.field_name)
}
 ::std::string* FieldValue::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.FieldValue.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FieldValue::release_field_name() {
  // @@protoc_insertion_point(field_release:pb.FieldValue.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FieldValue::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:pb.FieldValue.field_name)
}

// optional .pb.DataType type = 2;
void FieldValue::clear_type() {
  type_ = 0;
}
 ::pb::DataType FieldValue::type() const {
  // @@protoc_insertion_point(field_get:pb.FieldValue.type)
  return static_cast< ::pb::DataType >(type_);
}
 void FieldValue::set_type(::pb::DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.FieldValue.type)
}

// optional .pb.AttrRecord attr_record = 3;
bool FieldValue::has_attr_record() const {
  return !_is_default_instance_ && attr_record_ != NULL;
}
void FieldValue::clear_attr_record() {
  if (GetArenaNoVirtual() == NULL && attr_record_ != NULL) delete attr_record_;
  attr_record_ = NULL;
}
const ::pb::AttrRecord& FieldValue::attr_record() const {
  // @@protoc_insertion_point(field_get:pb.FieldValue.attr_record)
  return attr_record_ != NULL ? *attr_record_ : *default_instance_->attr_record_;
}
::pb::AttrRecord* FieldValue::mutable_attr_record() {
  
  if (attr_record_ == NULL) {
    attr_record_ = new ::pb::AttrRecord;
  }
  // @@protoc_insertion_point(field_mutable:pb.FieldValue.attr_record)
  return attr_record_;
}
::pb::AttrRecord* FieldValue::release_attr_record() {
  // @@protoc_insertion_point(field_release:pb.FieldValue.attr_record)
  
  ::pb::AttrRecord* temp = attr_record_;
  attr_record_ = NULL;
  return temp;
}
void FieldValue::set_allocated_attr_record(::pb::AttrRecord* attr_record) {
  delete attr_record_;
  attr_record_ = attr_record;
  if (attr_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FieldValue.attr_record)
}

// optional .pb.VectorRecord vector_record = 4;
bool FieldValue::has_vector_record() const {
  return !_is_default_instance_ && vector_record_ != NULL;
}
void FieldValue::clear_vector_record() {
  if (GetArenaNoVirtual() == NULL && vector_record_ != NULL) delete vector_record_;
  vector_record_ = NULL;
}
const ::pb::VectorRecord& FieldValue::vector_record() const {
  // @@protoc_insertion_point(field_get:pb.FieldValue.vector_record)
  return vector_record_ != NULL ? *vector_record_ : *default_instance_->vector_record_;
}
::pb::VectorRecord* FieldValue::mutable_vector_record() {
  
  if (vector_record_ == NULL) {
    vector_record_ = new ::pb::VectorRecord;
  }
  // @@protoc_insertion_point(field_mutable:pb.FieldValue.vector_record)
  return vector_record_;
}
::pb::VectorRecord* FieldValue::release_vector_record() {
  // @@protoc_insertion_point(field_release:pb.FieldValue.vector_record)
  
  ::pb::VectorRecord* temp = vector_record_;
  vector_record_ = NULL;
  return temp;
}
void FieldValue::set_allocated_vector_record(::pb::VectorRecord* vector_record) {
  delete vector_record_;
  vector_record_ = vector_record;
  if (vector_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FieldValue.vector_record)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cell::kInt32ValueFieldNumber;
const int Cell::kInt64ValueFieldNumber;
const int Cell::kFloatValueFieldNumber;
const int Cell::kDoubleValueFieldNumber;
const int Cell::kVecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cell::Cell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Cell)
}

void Cell::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Cell_default_oneof_instance_->int32_value_ = 0;
  Cell_default_oneof_instance_->int64_value_ = GOOGLE_LONGLONG(0);
  Cell_default_oneof_instance_->float_value_ = 0;
  Cell_default_oneof_instance_->double_value_ = 0;
  Cell_default_oneof_instance_->vec_ = const_cast< ::pb::VectorRowRecord*>(&::pb::VectorRowRecord::default_instance());
}

Cell::Cell(const Cell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Cell)
}

void Cell::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_value();
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:pb.Cell)
  SharedDtor();
}

void Cell::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_descriptor_;
}

const Cell& Cell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

Cell* Cell::default_instance_ = NULL;

Cell* Cell::New(::google::protobuf::Arena* arena) const {
  Cell* n = new Cell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cell::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:pb.Cell)
  switch(value_case()) {
    case kInt32Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kVec: {
      delete value_.vec_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Cell)
  clear_value();
}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Cell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 int32_value = 1;
      case 1: {
        if (tag == 8) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.int32_value_)));
          set_has_int32_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int64_value;
        break;
      }

      // optional int64 int64_value = 2;
      case 2: {
        if (tag == 16) {
         parse_int64_value:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int64_value_)));
          set_has_int64_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_float_value;
        break;
      }

      // optional float float_value = 3;
      case 3: {
        if (tag == 29) {
         parse_float_value:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_double_value;
        break;
      }

      // optional double double_value = 4;
      case 4: {
        if (tag == 33) {
         parse_double_value:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vec;
        break;
      }

      // optional .pb.VectorRowRecord vec = 5;
      case 5: {
        if (tag == 42) {
         parse_vec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Cell)
  return false;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Cell)
  // optional int32 int32_value = 1;
  if (has_int32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->int32_value(), output);
  }

  // optional int64 int64_value = 2;
  if (has_int64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int64_value(), output);
  }

  // optional float float_value = 3;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->float_value(), output);
  }

  // optional double double_value = 4;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->double_value(), output);
  }

  // optional .pb.VectorRowRecord vec = 5;
  if (has_vec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.vec_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Cell)
}

::google::protobuf::uint8* Cell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Cell)
  // optional int32 int32_value = 1;
  if (has_int32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->int32_value(), target);
  }

  // optional int64 int64_value = 2;
  if (has_int64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int64_value(), target);
  }

  // optional float float_value = 3;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->float_value(), target);
  }

  // optional double double_value = 4;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->double_value(), target);
  }

  // optional .pb.VectorRowRecord vec = 5;
  if (has_vec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *value_.vec_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Cell)
  return target;
}

int Cell::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Cell)
  int total_size = 0;

  switch (value_case()) {
    // optional int32 int32_value = 1;
    case kInt32Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_value());
      break;
    }
    // optional int64 int64_value = 2;
    case kInt64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_value());
      break;
    }
    // optional float float_value = 3;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // optional double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // optional .pb.VectorRowRecord vec = 5;
    case kVec: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.vec_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Cell)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Cell* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Cell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Cell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Cell)
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Cell)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.value_case()) {
    case kInt32Value: {
      set_int32_value(from.int32_value());
      break;
    }
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kVec: {
      mutable_vec()->::pb::VectorRowRecord::MergeFrom(from.vec());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {

  return true;
}

void Cell::Swap(Cell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cell::InternalSwap(Cell* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_descriptor_;
  metadata.reflection = Cell_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cell

// optional int32 int32_value = 1;
bool Cell::has_int32_value() const {
  return value_case() == kInt32Value;
}
void Cell::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
void Cell::clear_int32_value() {
  if (has_int32_value()) {
    value_.int32_value_ = 0;
    clear_has_value();
  }
}
 ::google::protobuf::int32 Cell::int32_value() const {
  // @@protoc_insertion_point(field_get:pb.Cell.int32_value)
  if (has_int32_value()) {
    return value_.int32_value_;
  }
  return 0;
}
 void Cell::set_int32_value(::google::protobuf::int32 value) {
  if (!has_int32_value()) {
    clear_value();
    set_has_int32_value();
  }
  value_.int32_value_ = value;
  // @@protoc_insertion_point(field_set:pb.Cell.int32_value)
}

// optional int64 int64_value = 2;
bool Cell::has_int64_value() const {
  return value_case() == kInt64Value;
}
void Cell::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
void Cell::clear_int64_value() {
  if (has_int64_value()) {
    value_.int64_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
 ::google::protobuf::int64 Cell::int64_value() const {
  // @@protoc_insertion_point(field_get:pb.Cell.int64_value)
  if (has_int64_value()) {
    return value_.int64_value_;
  }
  return GOOGLE_LONGLONG(0);
}
 void Cell::set_int64_value(::google::protobuf::int64 value) {
  if (!has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  value_.int64_value_ = value;
  // @@protoc_insertion_point(field_set:pb.Cell.int64_value)
}

// optional float float_value = 3;
bool Cell::has_float_value() const {
  return value_case() == kFloatValue;
}
void Cell::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
void Cell::clear_float_value() {
  if (has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
 float Cell::float_value() const {
  // @@protoc_insertion_point(field_get:pb.Cell.float_value)
  if (has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
 void Cell::set_float_value(float value) {
  if (!has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:pb.Cell.float_value)
}

// optional double double_value = 4;
bool Cell::has_double_value() const {
  return value_case() == kDoubleValue;
}
void Cell::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
void Cell::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
 double Cell::double_value() const {
  // @@protoc_insertion_point(field_get:pb.Cell.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
 void Cell::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:pb.Cell.double_value)
}

// optional .pb.VectorRowRecord vec = 5;
bool Cell::has_vec() const {
  return value_case() == kVec;
}
void Cell::set_has_vec() {
  _oneof_case_[0] = kVec;
}
void Cell::clear_vec() {
  if (has_vec()) {
    delete value_.vec_;
    clear_has_value();
  }
}
 const ::pb::VectorRowRecord& Cell::vec() const {
  // @@protoc_insertion_point(field_get:pb.Cell.vec)
  return has_vec()
      ? *value_.vec_
      : ::pb::VectorRowRecord::default_instance();
}
::pb::VectorRowRecord* Cell::mutable_vec() {
  if (!has_vec()) {
    clear_value();
    set_has_vec();
    value_.vec_ = new ::pb::VectorRowRecord;
  }
  // @@protoc_insertion_point(field_mutable:pb.Cell.vec)
  return value_.vec_;
}
::pb::VectorRowRecord* Cell::release_vec() {
  // @@protoc_insertion_point(field_release:pb.Cell.vec)
  if (has_vec()) {
    clear_has_value();
    ::pb::VectorRowRecord* temp = value_.vec_;
    value_.vec_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Cell::set_allocated_vec(::pb::VectorRowRecord* vec) {
  clear_value();
  if (vec) {
    set_has_vec();
    value_.vec_ = vec;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Cell.vec)
}

bool Cell::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void Cell::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
Cell::ValueCase Cell::value_case() const {
  return Cell::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowValue::kCellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowValue::RowValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RowValue)
}

void RowValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RowValue::RowValue(const RowValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RowValue)
}

void RowValue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RowValue::~RowValue() {
  // @@protoc_insertion_point(destructor:pb.RowValue)
  SharedDtor();
}

void RowValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RowValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowValue_descriptor_;
}

const RowValue& RowValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

RowValue* RowValue::default_instance_ = NULL;

RowValue* RowValue::New(::google::protobuf::Arena* arena) const {
  RowValue* n = new RowValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowValue::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RowValue)
  cell_.Clear();
}

bool RowValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RowValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Cell cell = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cell()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_cell;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RowValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RowValue)
  return false;
#undef DO_
}

void RowValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RowValue)
  // repeated .pb.Cell cell = 2;
  for (unsigned int i = 0, n = this->cell_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.RowValue)
}

::google::protobuf::uint8* RowValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RowValue)
  // repeated .pb.Cell cell = 2;
  for (unsigned int i = 0, n = this->cell_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->cell(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.RowValue)
  return target;
}

int RowValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RowValue)
  int total_size = 0;

  // repeated .pb.Cell cell = 2;
  total_size += 1 * this->cell_size();
  for (int i = 0; i < this->cell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RowValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RowValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RowValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RowValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RowValue)
    MergeFrom(*source);
  }
}

void RowValue::MergeFrom(const RowValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RowValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cell_.MergeFrom(from.cell_);
}

void RowValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RowValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowValue::CopyFrom(const RowValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RowValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowValue::IsInitialized() const {

  return true;
}

void RowValue::Swap(RowValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowValue::InternalSwap(RowValue* other) {
  cell_.UnsafeArenaSwap(&other->cell_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowValue_descriptor_;
  metadata.reflection = RowValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RowValue

// repeated .pb.Cell cell = 2;
int RowValue::cell_size() const {
  return cell_.size();
}
void RowValue::clear_cell() {
  cell_.Clear();
}
const ::pb::Cell& RowValue::cell(int index) const {
  // @@protoc_insertion_point(field_get:pb.RowValue.cell)
  return cell_.Get(index);
}
::pb::Cell* RowValue::mutable_cell(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RowValue.cell)
  return cell_.Mutable(index);
}
::pb::Cell* RowValue::add_cell() {
  // @@protoc_insertion_point(field_add:pb.RowValue.cell)
  return cell_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::Cell >*
RowValue::mutable_cell() {
  // @@protoc_insertion_point(field_mutable_list:pb.RowValue.cell)
  return &cell_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::Cell >&
RowValue::cell() const {
  // @@protoc_insertion_point(field_list:pb.RowValue.cell)
  return cell_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PulsarMessage::kCollectionNameFieldNumber;
const int PulsarMessage::kFieldsFieldNumber;
const int PulsarMessage::kEntityIdFieldNumber;
const int PulsarMessage::kPartitionTagFieldNumber;
const int PulsarMessage::kVectorParamFieldNumber;
const int PulsarMessage::kSegmentsFieldNumber;
const int PulsarMessage::kTimestampFieldNumber;
const int PulsarMessage::kClientIdFieldNumber;
const int PulsarMessage::kMsgTypeFieldNumber;
const int PulsarMessage::kTopicNameFieldNumber;
const int PulsarMessage::kPartitionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PulsarMessage::PulsarMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PulsarMessage)
}

void PulsarMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  vector_param_ = const_cast< ::pb::VectorParam*>(&::pb::VectorParam::default_instance());
  segments_ = const_cast< ::pb::SegmentRecord*>(&::pb::SegmentRecord::default_instance());
}

PulsarMessage::PulsarMessage(const PulsarMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PulsarMessage)
}

void PulsarMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  collection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_id_ = GOOGLE_LONGLONG(0);
  partition_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vector_param_ = NULL;
  segments_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  client_id_ = GOOGLE_LONGLONG(0);
  msg_type_ = 0;
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_id_ = GOOGLE_LONGLONG(0);
}

PulsarMessage::~PulsarMessage() {
  // @@protoc_insertion_point(destructor:pb.PulsarMessage)
  SharedDtor();
}

void PulsarMessage::SharedDtor() {
  collection_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete vector_param_;
    delete segments_;
  }
}

void PulsarMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PulsarMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PulsarMessage_descriptor_;
}

const PulsarMessage& PulsarMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

PulsarMessage* PulsarMessage::default_instance_ = NULL;

PulsarMessage* PulsarMessage::New(::google::protobuf::Arena* arena) const {
  PulsarMessage* n = new PulsarMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PulsarMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PulsarMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PulsarMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PulsarMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, client_id_);
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_id_ = GOOGLE_LONGLONG(0);
  partition_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && vector_param_ != NULL) delete vector_param_;
  vector_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && segments_ != NULL) delete segments_;
  segments_ = NULL;
  ZR_(partition_id_, msg_type_);
  topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  fields_.Clear();
}

bool PulsarMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PulsarMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string collection_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), this->collection_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PulsarMessage.collection_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fields;
        break;
      }

      // repeated .pb.FieldValue fields = 2;
      case 2: {
        if (tag == 18) {
         parse_fields:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_fields;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_entity_id;
        break;
      }

      // optional int64 entity_id = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &entity_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_partition_tag;
        break;
      }

      // optional string partition_tag = 4;
      case 4: {
        if (tag == 34) {
         parse_partition_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partition_tag().data(), this->partition_tag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PulsarMessage.partition_tag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vector_param;
        break;
      }

      // optional .pb.VectorParam vector_param = 5;
      case 5: {
        if (tag == 42) {
         parse_vector_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_segments;
        break;
      }

      // optional .pb.SegmentRecord segments = 6;
      case 6: {
        if (tag == 50) {
         parse_segments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 7;
      case 7: {
        if (tag == 56) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_client_id;
        break;
      }

      // optional int64 client_id = 8;
      case 8: {
        if (tag == 64) {
         parse_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_msg_type;
        break;
      }

      // optional .pb.OpType msg_type = 9;
      case 9: {
        if (tag == 72) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_type(static_cast< ::pb::OpType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_topic_name;
        break;
      }

      // optional string topic_name = 10;
      case 10: {
        if (tag == 82) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic_name().data(), this->topic_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PulsarMessage.topic_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_partition_id;
        break;
      }

      // optional int64 partition_id = 11;
      case 11: {
        if (tag == 88) {
         parse_partition_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partition_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PulsarMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PulsarMessage)
  return false;
#undef DO_
}

void PulsarMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PulsarMessage)
  // optional string collection_name = 1;
  if (this->collection_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), this->collection_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.PulsarMessage.collection_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collection_name(), output);
  }

  // repeated .pb.FieldValue fields = 2;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fields(i), output);
  }

  // optional int64 entity_id = 3;
  if (this->entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->entity_id(), output);
  }

  // optional string partition_tag = 4;
  if (this->partition_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partition_tag().data(), this->partition_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.PulsarMessage.partition_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->partition_tag(), output);
  }

  // optional .pb.VectorParam vector_param = 5;
  if (this->has_vector_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->vector_param_, output);
  }

  // optional .pb.SegmentRecord segments = 6;
  if (this->has_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->segments_, output);
  }

  // optional int64 timestamp = 7;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->timestamp(), output);
  }

  // optional int64 client_id = 8;
  if (this->client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->client_id(), output);
  }

  // optional .pb.OpType msg_type = 9;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->msg_type(), output);
  }

  // optional string topic_name = 10;
  if (this->topic_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_name().data(), this->topic_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.PulsarMessage.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->topic_name(), output);
  }

  // optional int64 partition_id = 11;
  if (this->partition_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->partition_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.PulsarMessage)
}

::google::protobuf::uint8* PulsarMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PulsarMessage)
  // optional string collection_name = 1;
  if (this->collection_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), this->collection_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.PulsarMessage.collection_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collection_name(), target);
  }

  // repeated .pb.FieldValue fields = 2;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->fields(i), false, target);
  }

  // optional int64 entity_id = 3;
  if (this->entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->entity_id(), target);
  }

  // optional string partition_tag = 4;
  if (this->partition_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partition_tag().data(), this->partition_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.PulsarMessage.partition_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->partition_tag(), target);
  }

  // optional .pb.VectorParam vector_param = 5;
  if (this->has_vector_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->vector_param_, false, target);
  }

  // optional .pb.SegmentRecord segments = 6;
  if (this->has_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->segments_, false, target);
  }

  // optional int64 timestamp = 7;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->timestamp(), target);
  }

  // optional int64 client_id = 8;
  if (this->client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->client_id(), target);
  }

  // optional .pb.OpType msg_type = 9;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->msg_type(), target);
  }

  // optional string topic_name = 10;
  if (this->topic_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_name().data(), this->topic_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.PulsarMessage.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->topic_name(), target);
  }

  // optional int64 partition_id = 11;
  if (this->partition_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->partition_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.PulsarMessage)
  return target;
}

int PulsarMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PulsarMessage)
  int total_size = 0;

  // optional string collection_name = 1;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // optional int64 entity_id = 3;
  if (this->entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->entity_id());
  }

  // optional string partition_tag = 4;
  if (this->partition_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partition_tag());
  }

  // optional .pb.VectorParam vector_param = 5;
  if (this->has_vector_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vector_param_);
  }

  // optional .pb.SegmentRecord segments = 6;
  if (this->has_segments()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->segments_);
  }

  // optional int64 timestamp = 7;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int64 client_id = 8;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_id());
  }

  // optional .pb.OpType msg_type = 9;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  // optional string topic_name = 10;
  if (this->topic_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }

  // optional int64 partition_id = 11;
  if (this->partition_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->partition_id());
  }

  // repeated .pb.FieldValue fields = 2;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PulsarMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PulsarMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PulsarMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PulsarMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PulsarMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PulsarMessage)
    MergeFrom(*source);
  }
}

void PulsarMessage::MergeFrom(const PulsarMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PulsarMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  fields_.MergeFrom(from.fields_);
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.entity_id() != 0) {
    set_entity_id(from.entity_id());
  }
  if (from.partition_tag().size() > 0) {

    partition_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partition_tag_);
  }
  if (from.has_vector_param()) {
    mutable_vector_param()->::pb::VectorParam::MergeFrom(from.vector_param());
  }
  if (from.has_segments()) {
    mutable_segments()->::pb::SegmentRecord::MergeFrom(from.segments());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.client_id() != 0) {
    set_client_id(from.client_id());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.topic_name().size() > 0) {

    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  if (from.partition_id() != 0) {
    set_partition_id(from.partition_id());
  }
}

void PulsarMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PulsarMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulsarMessage::CopyFrom(const PulsarMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PulsarMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulsarMessage::IsInitialized() const {

  return true;
}

void PulsarMessage::Swap(PulsarMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PulsarMessage::InternalSwap(PulsarMessage* other) {
  collection_name_.Swap(&other->collection_name_);
  fields_.UnsafeArenaSwap(&other->fields_);
  std::swap(entity_id_, other->entity_id_);
  partition_tag_.Swap(&other->partition_tag_);
  std::swap(vector_param_, other->vector_param_);
  std::swap(segments_, other->segments_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(client_id_, other->client_id_);
  std::swap(msg_type_, other->msg_type_);
  topic_name_.Swap(&other->topic_name_);
  std::swap(partition_id_, other->partition_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PulsarMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PulsarMessage_descriptor_;
  metadata.reflection = PulsarMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PulsarMessage

// optional string collection_name = 1;
void PulsarMessage::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PulsarMessage::collection_name() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PulsarMessage::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.collection_name)
}
 void PulsarMessage::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PulsarMessage.collection_name)
}
 void PulsarMessage::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PulsarMessage.collection_name)
}
 ::std::string* PulsarMessage::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PulsarMessage::release_collection_name() {
  // @@protoc_insertion_point(field_release:pb.PulsarMessage.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PulsarMessage::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:pb.PulsarMessage.collection_name)
}

// repeated .pb.FieldValue fields = 2;
int PulsarMessage::fields_size() const {
  return fields_.size();
}
void PulsarMessage::clear_fields() {
  fields_.Clear();
}
const ::pb::FieldValue& PulsarMessage::fields(int index) const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.fields)
  return fields_.Get(index);
}
::pb::FieldValue* PulsarMessage::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.fields)
  return fields_.Mutable(index);
}
::pb::FieldValue* PulsarMessage::add_fields() {
  // @@protoc_insertion_point(field_add:pb.PulsarMessage.fields)
  return fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::FieldValue >*
PulsarMessage::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:pb.PulsarMessage.fields)
  return &fields_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::FieldValue >&
PulsarMessage::fields() const {
  // @@protoc_insertion_point(field_list:pb.PulsarMessage.fields)
  return fields_;
}

// optional int64 entity_id = 3;
void PulsarMessage::clear_entity_id() {
  entity_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PulsarMessage::entity_id() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.entity_id)
  return entity_id_;
}
 void PulsarMessage::set_entity_id(::google::protobuf::int64 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.entity_id)
}

// optional string partition_tag = 4;
void PulsarMessage::clear_partition_tag() {
  partition_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PulsarMessage::partition_tag() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.partition_tag)
  return partition_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PulsarMessage::set_partition_tag(const ::std::string& value) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.partition_tag)
}
 void PulsarMessage::set_partition_tag(const char* value) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PulsarMessage.partition_tag)
}
 void PulsarMessage::set_partition_tag(const char* value, size_t size) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PulsarMessage.partition_tag)
}
 ::std::string* PulsarMessage::mutable_partition_tag() {
  
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.partition_tag)
  return partition_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PulsarMessage::release_partition_tag() {
  // @@protoc_insertion_point(field_release:pb.PulsarMessage.partition_tag)
  
  return partition_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PulsarMessage::set_allocated_partition_tag(::std::string* partition_tag) {
  if (partition_tag != NULL) {
    
  } else {
    
  }
  partition_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partition_tag);
  // @@protoc_insertion_point(field_set_allocated:pb.PulsarMessage.partition_tag)
}

// optional .pb.VectorParam vector_param = 5;
bool PulsarMessage::has_vector_param() const {
  return !_is_default_instance_ && vector_param_ != NULL;
}
void PulsarMessage::clear_vector_param() {
  if (GetArenaNoVirtual() == NULL && vector_param_ != NULL) delete vector_param_;
  vector_param_ = NULL;
}
const ::pb::VectorParam& PulsarMessage::vector_param() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.vector_param)
  return vector_param_ != NULL ? *vector_param_ : *default_instance_->vector_param_;
}
::pb::VectorParam* PulsarMessage::mutable_vector_param() {
  
  if (vector_param_ == NULL) {
    vector_param_ = new ::pb::VectorParam;
  }
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.vector_param)
  return vector_param_;
}
::pb::VectorParam* PulsarMessage::release_vector_param() {
  // @@protoc_insertion_point(field_release:pb.PulsarMessage.vector_param)
  
  ::pb::VectorParam* temp = vector_param_;
  vector_param_ = NULL;
  return temp;
}
void PulsarMessage::set_allocated_vector_param(::pb::VectorParam* vector_param) {
  delete vector_param_;
  vector_param_ = vector_param;
  if (vector_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PulsarMessage.vector_param)
}

// optional .pb.SegmentRecord segments = 6;
bool PulsarMessage::has_segments() const {
  return !_is_default_instance_ && segments_ != NULL;
}
void PulsarMessage::clear_segments() {
  if (GetArenaNoVirtual() == NULL && segments_ != NULL) delete segments_;
  segments_ = NULL;
}
const ::pb::SegmentRecord& PulsarMessage::segments() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.segments)
  return segments_ != NULL ? *segments_ : *default_instance_->segments_;
}
::pb::SegmentRecord* PulsarMessage::mutable_segments() {
  
  if (segments_ == NULL) {
    segments_ = new ::pb::SegmentRecord;
  }
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.segments)
  return segments_;
}
::pb::SegmentRecord* PulsarMessage::release_segments() {
  // @@protoc_insertion_point(field_release:pb.PulsarMessage.segments)
  
  ::pb::SegmentRecord* temp = segments_;
  segments_ = NULL;
  return temp;
}
void PulsarMessage::set_allocated_segments(::pb::SegmentRecord* segments) {
  delete segments_;
  segments_ = segments;
  if (segments) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PulsarMessage.segments)
}

// optional int64 timestamp = 7;
void PulsarMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PulsarMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.timestamp)
  return timestamp_;
}
 void PulsarMessage::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.timestamp)
}

// optional int64 client_id = 8;
void PulsarMessage::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PulsarMessage::client_id() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.client_id)
  return client_id_;
}
 void PulsarMessage::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.client_id)
}

// optional .pb.OpType msg_type = 9;
void PulsarMessage::clear_msg_type() {
  msg_type_ = 0;
}
 ::pb::OpType PulsarMessage::msg_type() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.msg_type)
  return static_cast< ::pb::OpType >(msg_type_);
}
 void PulsarMessage::set_msg_type(::pb::OpType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.msg_type)
}

// optional string topic_name = 10;
void PulsarMessage::clear_topic_name() {
  topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PulsarMessage::topic_name() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.topic_name)
  return topic_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PulsarMessage::set_topic_name(const ::std::string& value) {
  
  topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.topic_name)
}
 void PulsarMessage::set_topic_name(const char* value) {
  
  topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PulsarMessage.topic_name)
}
 void PulsarMessage::set_topic_name(const char* value, size_t size) {
  
  topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PulsarMessage.topic_name)
}
 ::std::string* PulsarMessage::mutable_topic_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.topic_name)
  return topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PulsarMessage::release_topic_name() {
  // @@protoc_insertion_point(field_release:pb.PulsarMessage.topic_name)
  
  return topic_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PulsarMessage::set_allocated_topic_name(::std::string* topic_name) {
  if (topic_name != NULL) {
    
  } else {
    
  }
  topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_name);
  // @@protoc_insertion_point(field_set_allocated:pb.PulsarMessage.topic_name)
}

// optional int64 partition_id = 11;
void PulsarMessage::clear_partition_id() {
  partition_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PulsarMessage::partition_id() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.partition_id)
  return partition_id_;
}
 void PulsarMessage::set_partition_id(::google::protobuf::int64 value) {
  
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.partition_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestData::kIdFieldNumber;
const int TestData::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestData::TestData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TestData)
}

void TestData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TestData::TestData(const TestData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TestData)
}

void TestData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TestData::~TestData() {
  // @@protoc_insertion_point(destructor:pb.TestData)
  SharedDtor();
}

void TestData::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestData_descriptor_;
}

const TestData& TestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

TestData* TestData::default_instance_ = NULL;

TestData* TestData::New(::google::protobuf::Arena* arena) const {
  TestData* n = new TestData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TestData)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TestData.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TestData.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TestData)
  return false;
#undef DO_
}

void TestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TestData)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TestData.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TestData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.TestData)
}

::google::protobuf::uint8* TestData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TestData)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TestData.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TestData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.TestData)
  return target;
}

int TestData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TestData)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TestData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TestData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TestData)
    MergeFrom(*source);
  }
}

void TestData::MergeFrom(const TestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TestData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TestData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestData::CopyFrom(const TestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestData::IsInitialized() const {

  return true;
}

void TestData::Swap(TestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestData::InternalSwap(TestData* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestData_descriptor_;
  metadata.reflection = TestData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestData

// optional string id = 1;
void TestData::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TestData::id() const {
  // @@protoc_insertion_point(field_get:pb.TestData.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestData::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TestData.id)
}
 void TestData::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TestData.id)
}
 void TestData::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TestData.id)
}
 ::std::string* TestData::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.TestData.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestData::release_id() {
  // @@protoc_insertion_point(field_release:pb.TestData.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestData::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.TestData.id)
}

// optional string name = 2;
void TestData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TestData::name() const {
  // @@protoc_insertion_point(field_get:pb.TestData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TestData.name)
}
 void TestData::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TestData.name)
}
 void TestData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TestData.name)
}
 ::std::string* TestData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.TestData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestData::release_name() {
  // @@protoc_insertion_point(field_release:pb.TestData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.TestData.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsertMsg::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsertMsg::InsertMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.InsertMsg)
}

void InsertMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InsertMsg::InsertMsg(const InsertMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.InsertMsg)
}

void InsertMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  client_id_ = GOOGLE_LONGLONG(0);
}

InsertMsg::~InsertMsg() {
  // @@protoc_insertion_point(destructor:pb.InsertMsg)
  SharedDtor();
}

void InsertMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InsertMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertMsg_descriptor_;
}

const InsertMsg& InsertMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

InsertMsg* InsertMsg::default_instance_ = NULL;

InsertMsg* InsertMsg::New(::google::protobuf::Arena* arena) const {
  InsertMsg* n = new InsertMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsertMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.InsertMsg)
  client_id_ = GOOGLE_LONGLONG(0);
}

bool InsertMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.InsertMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.InsertMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.InsertMsg)
  return false;
#undef DO_
}

void InsertMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.InsertMsg)
  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.InsertMsg)
}

::google::protobuf::uint8* InsertMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.InsertMsg)
  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.InsertMsg)
  return target;
}

int InsertMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.InsertMsg)
  int total_size = 0;

  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.InsertMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InsertMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InsertMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.InsertMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.InsertMsg)
    MergeFrom(*source);
  }
}

void InsertMsg::MergeFrom(const InsertMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.InsertMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.client_id() != 0) {
    set_client_id(from.client_id());
  }
}

void InsertMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.InsertMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertMsg::CopyFrom(const InsertMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.InsertMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertMsg::IsInitialized() const {

  return true;
}

void InsertMsg::Swap(InsertMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsertMsg::InternalSwap(InsertMsg* other) {
  std::swap(client_id_, other->client_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsertMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertMsg_descriptor_;
  metadata.reflection = InsertMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InsertMsg

// optional int64 client_id = 1;
void InsertMsg::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 InsertMsg::client_id() const {
  // @@protoc_insertion_point(field_get:pb.InsertMsg.client_id)
  return client_id_;
}
 void InsertMsg::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:pb.InsertMsg.client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteMsg::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteMsg::DeleteMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DeleteMsg)
}

void DeleteMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteMsg::DeleteMsg(const DeleteMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.DeleteMsg)
}

void DeleteMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  client_id_ = GOOGLE_LONGLONG(0);
}

DeleteMsg::~DeleteMsg() {
  // @@protoc_insertion_point(destructor:pb.DeleteMsg)
  SharedDtor();
}

void DeleteMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteMsg_descriptor_;
}

const DeleteMsg& DeleteMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

DeleteMsg* DeleteMsg::default_instance_ = NULL;

DeleteMsg* DeleteMsg::New(::google::protobuf::Arena* arena) const {
  DeleteMsg* n = new DeleteMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DeleteMsg)
  client_id_ = GOOGLE_LONGLONG(0);
}

bool DeleteMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DeleteMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DeleteMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DeleteMsg)
  return false;
#undef DO_
}

void DeleteMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DeleteMsg)
  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.DeleteMsg)
}

::google::protobuf::uint8* DeleteMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.DeleteMsg)
  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.DeleteMsg)
  return target;
}

int DeleteMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DeleteMsg)
  int total_size = 0;

  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DeleteMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DeleteMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DeleteMsg)
    MergeFrom(*source);
  }
}

void DeleteMsg::MergeFrom(const DeleteMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DeleteMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.client_id() != 0) {
    set_client_id(from.client_id());
  }
}

void DeleteMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DeleteMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMsg::CopyFrom(const DeleteMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DeleteMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMsg::IsInitialized() const {

  return true;
}

void DeleteMsg::Swap(DeleteMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteMsg::InternalSwap(DeleteMsg* other) {
  std::swap(client_id_, other->client_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteMsg_descriptor_;
  metadata.reflection = DeleteMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteMsg

// optional int64 client_id = 1;
void DeleteMsg::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 DeleteMsg::client_id() const {
  // @@protoc_insertion_point(field_get:pb.DeleteMsg.client_id)
  return client_id_;
}
 void DeleteMsg::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:pb.DeleteMsg.client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchMsg::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchMsg::SearchMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SearchMsg)
}

void SearchMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SearchMsg::SearchMsg(const SearchMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SearchMsg)
}

void SearchMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  client_id_ = GOOGLE_LONGLONG(0);
}

SearchMsg::~SearchMsg() {
  // @@protoc_insertion_point(destructor:pb.SearchMsg)
  SharedDtor();
}

void SearchMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchMsg_descriptor_;
}

const SearchMsg& SearchMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

SearchMsg* SearchMsg::default_instance_ = NULL;

SearchMsg* SearchMsg::New(::google::protobuf::Arena* arena) const {
  SearchMsg* n = new SearchMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SearchMsg)
  client_id_ = GOOGLE_LONGLONG(0);
}

bool SearchMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SearchMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SearchMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SearchMsg)
  return false;
#undef DO_
}

void SearchMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SearchMsg)
  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.SearchMsg)
}

::google::protobuf::uint8* SearchMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SearchMsg)
  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.SearchMsg)
  return target;
}

int SearchMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SearchMsg)
  int total_size = 0;

  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SearchMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SearchMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SearchMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SearchMsg)
    MergeFrom(*source);
  }
}

void SearchMsg::MergeFrom(const SearchMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SearchMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.client_id() != 0) {
    set_client_id(from.client_id());
  }
}

void SearchMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SearchMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchMsg::CopyFrom(const SearchMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SearchMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchMsg::IsInitialized() const {

  return true;
}

void SearchMsg::Swap(SearchMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchMsg::InternalSwap(SearchMsg* other) {
  std::swap(client_id_, other->client_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchMsg_descriptor_;
  metadata.reflection = SearchMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchMsg

// optional int64 client_id = 1;
void SearchMsg::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SearchMsg::client_id() const {
  // @@protoc_insertion_point(field_get:pb.SearchMsg.client_id)
  return client_id_;
}
 void SearchMsg::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:pb.SearchMsg.client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchResultMsg::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchResultMsg::SearchResultMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SearchResultMsg)
}

void SearchResultMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SearchResultMsg::SearchResultMsg(const SearchResultMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SearchResultMsg)
}

void SearchResultMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  client_id_ = GOOGLE_LONGLONG(0);
}

SearchResultMsg::~SearchResultMsg() {
  // @@protoc_insertion_point(destructor:pb.SearchResultMsg)
  SharedDtor();
}

void SearchResultMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchResultMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResultMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResultMsg_descriptor_;
}

const SearchResultMsg& SearchResultMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pulsar_2eproto();
  return *default_instance_;
}

SearchResultMsg* SearchResultMsg::default_instance_ = NULL;

SearchResultMsg* SearchResultMsg::New(::google::protobuf::Arena* arena) const {
  SearchResultMsg* n = new SearchResultMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchResultMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SearchResultMsg)
  client_id_ = GOOGLE_LONGLONG(0);
}

bool SearchResultMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SearchResultMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SearchResultMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SearchResultMsg)
  return false;
#undef DO_
}

void SearchResultMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SearchResultMsg)
  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.SearchResultMsg)
}

::google::protobuf::uint8* SearchResultMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SearchResultMsg)
  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.SearchResultMsg)
  return target;
}

int SearchResultMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SearchResultMsg)
  int total_size = 0;

  // optional int64 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResultMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SearchResultMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SearchResultMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchResultMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SearchResultMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SearchResultMsg)
    MergeFrom(*source);
  }
}

void SearchResultMsg::MergeFrom(const SearchResultMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SearchResultMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.client_id() != 0) {
    set_client_id(from.client_id());
  }
}

void SearchResultMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SearchResultMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResultMsg::CopyFrom(const SearchResultMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SearchResultMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResultMsg::IsInitialized() const {

  return true;
}

void SearchResultMsg::Swap(SearchResultMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchResultMsg::InternalSwap(SearchResultMsg* other) {
  std::swap(client_id_, other->client_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchResultMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResultMsg_descriptor_;
  metadata.reflection = SearchResultMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchResultMsg

// optional int64 client_id = 1;
void SearchResultMsg::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SearchResultMsg::client_id() const {
  // @@protoc_insertion_point(field_get:pb.SearchResultMsg.client_id)
  return client_id_;
}
 void SearchResultMsg::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:pb.SearchResultMsg.client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
