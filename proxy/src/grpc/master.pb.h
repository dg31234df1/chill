// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_master_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_master_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_master_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_master_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_master_2eproto;
namespace masterpb {
class Collection;
class CollectionDefaultTypeInternal;
extern CollectionDefaultTypeInternal _Collection_default_instance_;
class Segment;
class SegmentDefaultTypeInternal;
extern SegmentDefaultTypeInternal _Segment_default_instance_;
class SegmentStat;
class SegmentStatDefaultTypeInternal;
extern SegmentStatDefaultTypeInternal _SegmentStat_default_instance_;
}  // namespace masterpb
PROTOBUF_NAMESPACE_OPEN
template<> ::masterpb::Collection* Arena::CreateMaybeMessage<::masterpb::Collection>(Arena*);
template<> ::masterpb::Segment* Arena::CreateMaybeMessage<::masterpb::Segment>(Arena*);
template<> ::masterpb::SegmentStat* Arena::CreateMaybeMessage<::masterpb::SegmentStat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace masterpb {

// ===================================================================

class Collection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterpb.Collection) */ {
 public:
  Collection();
  virtual ~Collection();

  Collection(const Collection& from);
  Collection(Collection&& from) noexcept
    : Collection() {
    *this = ::std::move(from);
  }

  inline Collection& operator=(const Collection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collection& operator=(Collection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collection* internal_default_instance() {
    return reinterpret_cast<const Collection*>(
               &_Collection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Collection& a, Collection& b) {
    a.Swap(&b);
  }
  inline void Swap(Collection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collection* New() const final {
    return CreateMaybeMessage<Collection>(nullptr);
  }

  Collection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collection& from);
  void MergeFrom(const Collection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterpb.Collection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_2eproto);
    return ::descriptor_table_master_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIdsFieldNumber = 5,
    kPartitionTagsFieldNumber = 6,
    kIndexesFieldNumber = 7,
    kNameFieldNumber = 2,
    kSchemaFieldNumber = 3,
    kIdFieldNumber = 1,
    kCreateTimeFieldNumber = 4,
  };
  // repeated uint64 segment_ids = 5;
  int segment_ids_size() const;
  void clear_segment_ids();
  ::PROTOBUF_NAMESPACE_ID::uint64 segment_ids(int index) const;
  void set_segment_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_segment_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      segment_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_segment_ids();

  // repeated string partition_tags = 6;
  int partition_tags_size() const;
  void clear_partition_tags();
  const std::string& partition_tags(int index) const;
  std::string* mutable_partition_tags(int index);
  void set_partition_tags(int index, const std::string& value);
  void set_partition_tags(int index, std::string&& value);
  void set_partition_tags(int index, const char* value);
  void set_partition_tags(int index, const char* value, size_t size);
  std::string* add_partition_tags();
  void add_partition_tags(const std::string& value);
  void add_partition_tags(std::string&& value);
  void add_partition_tags(const char* value);
  void add_partition_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_tags();

  // repeated .milvus.grpc.IndexParam indexes = 7;
  int indexes_size() const;
  void clear_indexes();
  ::milvus::grpc::IndexParam* mutable_indexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::grpc::IndexParam >*
      mutable_indexes();
  const ::milvus::grpc::IndexParam& indexes(int index) const;
  ::milvus::grpc::IndexParam* add_indexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::grpc::IndexParam >&
      indexes() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .milvus.grpc.Schema schema = 3;
  bool has_schema() const;
  void clear_schema();
  const ::milvus::grpc::Schema& schema() const;
  ::milvus::grpc::Schema* release_schema();
  ::milvus::grpc::Schema* mutable_schema();
  void set_allocated_schema(::milvus::grpc::Schema* schema);

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 create_time = 4;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:masterpb.Collection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > segment_ids_;
  mutable std::atomic<int> _segment_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::grpc::IndexParam > indexes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::milvus::grpc::Schema* schema_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 create_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_2eproto;
};
// -------------------------------------------------------------------

class Segment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterpb.Segment) */ {
 public:
  Segment();
  virtual ~Segment();

  Segment(const Segment& from);
  Segment(Segment&& from) noexcept
    : Segment() {
    *this = ::std::move(from);
  }

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment& operator=(Segment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Segment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Segment* internal_default_instance() {
    return reinterpret_cast<const Segment*>(
               &_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Segment& a, Segment& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Segment* New() const final {
    return CreateMaybeMessage<Segment>(nullptr);
  }

  Segment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Segment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Segment& from);
  void MergeFrom(const Segment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterpb.Segment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_2eproto);
    return ::descriptor_table_master_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionTagFieldNumber = 3,
    kCollectionNameFieldNumber = 8,
    kSegmentIdFieldNumber = 1,
    kCollectionIdFieldNumber = 2,
    kChannelStartFieldNumber = 4,
    kChannelEndFieldNumber = 5,
    kOpenTimestampFieldNumber = 6,
    kCloseTimestampFieldNumber = 7,
  };
  // string partition_tag = 3;
  void clear_partition_tag();
  const std::string& partition_tag() const;
  void set_partition_tag(const std::string& value);
  void set_partition_tag(std::string&& value);
  void set_partition_tag(const char* value);
  void set_partition_tag(const char* value, size_t size);
  std::string* mutable_partition_tag();
  std::string* release_partition_tag();
  void set_allocated_partition_tag(std::string* partition_tag);

  // string collection_name = 8;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // uint64 segment_id = 1;
  void clear_segment_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 segment_id() const;
  void set_segment_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 collection_id = 2;
  void clear_collection_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 collection_id() const;
  void set_collection_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 channel_start = 4;
  void clear_channel_start();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_start() const;
  void set_channel_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 channel_end = 5;
  void clear_channel_end();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_end() const;
  void set_channel_end(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 open_timestamp = 6;
  void clear_open_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 open_timestamp() const;
  void set_open_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 close_timestamp = 7;
  void clear_close_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 close_timestamp() const;
  void set_close_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:masterpb.Segment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 segment_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 collection_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_end_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 close_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_2eproto;
};
// -------------------------------------------------------------------

class SegmentStat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterpb.SegmentStat) */ {
 public:
  SegmentStat();
  virtual ~SegmentStat();

  SegmentStat(const SegmentStat& from);
  SegmentStat(SegmentStat&& from) noexcept
    : SegmentStat() {
    *this = ::std::move(from);
  }

  inline SegmentStat& operator=(const SegmentStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentStat& operator=(SegmentStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentStat* internal_default_instance() {
    return reinterpret_cast<const SegmentStat*>(
               &_SegmentStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SegmentStat& a, SegmentStat& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentStat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentStat* New() const final {
    return CreateMaybeMessage<SegmentStat>(nullptr);
  }

  SegmentStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentStat& from);
  void MergeFrom(const SegmentStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterpb.SegmentStat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_2eproto);
    return ::descriptor_table_master_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIdFieldNumber = 1,
    kMemorySizeFieldNumber = 2,
    kMemoryRateFieldNumber = 3,
  };
  // uint64 segment_id = 1;
  void clear_segment_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 segment_id() const;
  void set_segment_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 memory_size = 2;
  void clear_memory_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 memory_size() const;
  void set_memory_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // float memory_rate = 3;
  void clear_memory_rate();
  float memory_rate() const;
  void set_memory_rate(float value);

  // @@protoc_insertion_point(class_scope:masterpb.SegmentStat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 segment_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 memory_size_;
  float memory_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Collection

// uint64 id = 1;
inline void Collection::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Collection::id() const {
  // @@protoc_insertion_point(field_get:masterpb.Collection.id)
  return id_;
}
inline void Collection::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:masterpb.Collection.id)
}

// string name = 2;
inline void Collection::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Collection::name() const {
  // @@protoc_insertion_point(field_get:masterpb.Collection.name)
  return name_.GetNoArena();
}
inline void Collection::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterpb.Collection.name)
}
inline void Collection::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterpb.Collection.name)
}
inline void Collection::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterpb.Collection.name)
}
inline void Collection::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterpb.Collection.name)
}
inline std::string* Collection::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:masterpb.Collection.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Collection::release_name() {
  // @@protoc_insertion_point(field_release:masterpb.Collection.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Collection::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:masterpb.Collection.name)
}

// .milvus.grpc.Schema schema = 3;
inline bool Collection::has_schema() const {
  return this != internal_default_instance() && schema_ != nullptr;
}
inline const ::milvus::grpc::Schema& Collection::schema() const {
  const ::milvus::grpc::Schema* p = schema_;
  // @@protoc_insertion_point(field_get:masterpb.Collection.schema)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::grpc::Schema*>(
      &::milvus::grpc::_Schema_default_instance_);
}
inline ::milvus::grpc::Schema* Collection::release_schema() {
  // @@protoc_insertion_point(field_release:masterpb.Collection.schema)
  
  ::milvus::grpc::Schema* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline ::milvus::grpc::Schema* Collection::mutable_schema() {
  
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::grpc::Schema>(GetArenaNoVirtual());
    schema_ = p;
  }
  // @@protoc_insertion_point(field_mutable:masterpb.Collection.schema)
  return schema_;
}
inline void Collection::set_allocated_schema(::milvus::grpc::Schema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema_);
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:masterpb.Collection.schema)
}

// uint64 create_time = 4;
inline void Collection::clear_create_time() {
  create_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Collection::create_time() const {
  // @@protoc_insertion_point(field_get:masterpb.Collection.create_time)
  return create_time_;
}
inline void Collection::set_create_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:masterpb.Collection.create_time)
}

// repeated uint64 segment_ids = 5;
inline int Collection::segment_ids_size() const {
  return segment_ids_.size();
}
inline void Collection::clear_segment_ids() {
  segment_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Collection::segment_ids(int index) const {
  // @@protoc_insertion_point(field_get:masterpb.Collection.segment_ids)
  return segment_ids_.Get(index);
}
inline void Collection::set_segment_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  segment_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:masterpb.Collection.segment_ids)
}
inline void Collection::add_segment_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  segment_ids_.Add(value);
  // @@protoc_insertion_point(field_add:masterpb.Collection.segment_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Collection::segment_ids() const {
  // @@protoc_insertion_point(field_list:masterpb.Collection.segment_ids)
  return segment_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Collection::mutable_segment_ids() {
  // @@protoc_insertion_point(field_mutable_list:masterpb.Collection.segment_ids)
  return &segment_ids_;
}

// repeated string partition_tags = 6;
inline int Collection::partition_tags_size() const {
  return partition_tags_.size();
}
inline void Collection::clear_partition_tags() {
  partition_tags_.Clear();
}
inline const std::string& Collection::partition_tags(int index) const {
  // @@protoc_insertion_point(field_get:masterpb.Collection.partition_tags)
  return partition_tags_.Get(index);
}
inline std::string* Collection::mutable_partition_tags(int index) {
  // @@protoc_insertion_point(field_mutable:masterpb.Collection.partition_tags)
  return partition_tags_.Mutable(index);
}
inline void Collection::set_partition_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:masterpb.Collection.partition_tags)
  partition_tags_.Mutable(index)->assign(value);
}
inline void Collection::set_partition_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:masterpb.Collection.partition_tags)
  partition_tags_.Mutable(index)->assign(std::move(value));
}
inline void Collection::set_partition_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterpb.Collection.partition_tags)
}
inline void Collection::set_partition_tags(int index, const char* value, size_t size) {
  partition_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterpb.Collection.partition_tags)
}
inline std::string* Collection::add_partition_tags() {
  // @@protoc_insertion_point(field_add_mutable:masterpb.Collection.partition_tags)
  return partition_tags_.Add();
}
inline void Collection::add_partition_tags(const std::string& value) {
  partition_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterpb.Collection.partition_tags)
}
inline void Collection::add_partition_tags(std::string&& value) {
  partition_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:masterpb.Collection.partition_tags)
}
inline void Collection::add_partition_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterpb.Collection.partition_tags)
}
inline void Collection::add_partition_tags(const char* value, size_t size) {
  partition_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterpb.Collection.partition_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Collection::partition_tags() const {
  // @@protoc_insertion_point(field_list:masterpb.Collection.partition_tags)
  return partition_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Collection::mutable_partition_tags() {
  // @@protoc_insertion_point(field_mutable_list:masterpb.Collection.partition_tags)
  return &partition_tags_;
}

// repeated .milvus.grpc.IndexParam indexes = 7;
inline int Collection::indexes_size() const {
  return indexes_.size();
}
inline ::milvus::grpc::IndexParam* Collection::mutable_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:masterpb.Collection.indexes)
  return indexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::grpc::IndexParam >*
Collection::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:masterpb.Collection.indexes)
  return &indexes_;
}
inline const ::milvus::grpc::IndexParam& Collection::indexes(int index) const {
  // @@protoc_insertion_point(field_get:masterpb.Collection.indexes)
  return indexes_.Get(index);
}
inline ::milvus::grpc::IndexParam* Collection::add_indexes() {
  // @@protoc_insertion_point(field_add:masterpb.Collection.indexes)
  return indexes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::grpc::IndexParam >&
Collection::indexes() const {
  // @@protoc_insertion_point(field_list:masterpb.Collection.indexes)
  return indexes_;
}

// -------------------------------------------------------------------

// Segment

// uint64 segment_id = 1;
inline void Segment::clear_segment_id() {
  segment_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Segment::segment_id() const {
  // @@protoc_insertion_point(field_get:masterpb.Segment.segment_id)
  return segment_id_;
}
inline void Segment::set_segment_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  segment_id_ = value;
  // @@protoc_insertion_point(field_set:masterpb.Segment.segment_id)
}

// uint64 collection_id = 2;
inline void Segment::clear_collection_id() {
  collection_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Segment::collection_id() const {
  // @@protoc_insertion_point(field_get:masterpb.Segment.collection_id)
  return collection_id_;
}
inline void Segment::set_collection_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  collection_id_ = value;
  // @@protoc_insertion_point(field_set:masterpb.Segment.collection_id)
}

// string partition_tag = 3;
inline void Segment::clear_partition_tag() {
  partition_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Segment::partition_tag() const {
  // @@protoc_insertion_point(field_get:masterpb.Segment.partition_tag)
  return partition_tag_.GetNoArena();
}
inline void Segment::set_partition_tag(const std::string& value) {
  
  partition_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterpb.Segment.partition_tag)
}
inline void Segment::set_partition_tag(std::string&& value) {
  
  partition_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterpb.Segment.partition_tag)
}
inline void Segment::set_partition_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterpb.Segment.partition_tag)
}
inline void Segment::set_partition_tag(const char* value, size_t size) {
  
  partition_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterpb.Segment.partition_tag)
}
inline std::string* Segment::mutable_partition_tag() {
  
  // @@protoc_insertion_point(field_mutable:masterpb.Segment.partition_tag)
  return partition_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Segment::release_partition_tag() {
  // @@protoc_insertion_point(field_release:masterpb.Segment.partition_tag)
  
  return partition_tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Segment::set_allocated_partition_tag(std::string* partition_tag) {
  if (partition_tag != nullptr) {
    
  } else {
    
  }
  partition_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_tag);
  // @@protoc_insertion_point(field_set_allocated:masterpb.Segment.partition_tag)
}

// int32 channel_start = 4;
inline void Segment::clear_channel_start() {
  channel_start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Segment::channel_start() const {
  // @@protoc_insertion_point(field_get:masterpb.Segment.channel_start)
  return channel_start_;
}
inline void Segment::set_channel_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_start_ = value;
  // @@protoc_insertion_point(field_set:masterpb.Segment.channel_start)
}

// int32 channel_end = 5;
inline void Segment::clear_channel_end() {
  channel_end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Segment::channel_end() const {
  // @@protoc_insertion_point(field_get:masterpb.Segment.channel_end)
  return channel_end_;
}
inline void Segment::set_channel_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_end_ = value;
  // @@protoc_insertion_point(field_set:masterpb.Segment.channel_end)
}

// uint64 open_timestamp = 6;
inline void Segment::clear_open_timestamp() {
  open_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Segment::open_timestamp() const {
  // @@protoc_insertion_point(field_get:masterpb.Segment.open_timestamp)
  return open_timestamp_;
}
inline void Segment::set_open_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  open_timestamp_ = value;
  // @@protoc_insertion_point(field_set:masterpb.Segment.open_timestamp)
}

// uint64 close_timestamp = 7;
inline void Segment::clear_close_timestamp() {
  close_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Segment::close_timestamp() const {
  // @@protoc_insertion_point(field_get:masterpb.Segment.close_timestamp)
  return close_timestamp_;
}
inline void Segment::set_close_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  close_timestamp_ = value;
  // @@protoc_insertion_point(field_set:masterpb.Segment.close_timestamp)
}

// string collection_name = 8;
inline void Segment::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Segment::collection_name() const {
  // @@protoc_insertion_point(field_get:masterpb.Segment.collection_name)
  return collection_name_.GetNoArena();
}
inline void Segment::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterpb.Segment.collection_name)
}
inline void Segment::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterpb.Segment.collection_name)
}
inline void Segment::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterpb.Segment.collection_name)
}
inline void Segment::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterpb.Segment.collection_name)
}
inline std::string* Segment::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:masterpb.Segment.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Segment::release_collection_name() {
  // @@protoc_insertion_point(field_release:masterpb.Segment.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Segment::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:masterpb.Segment.collection_name)
}

// -------------------------------------------------------------------

// SegmentStat

// uint64 segment_id = 1;
inline void SegmentStat::clear_segment_id() {
  segment_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegmentStat::segment_id() const {
  // @@protoc_insertion_point(field_get:masterpb.SegmentStat.segment_id)
  return segment_id_;
}
inline void SegmentStat::set_segment_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  segment_id_ = value;
  // @@protoc_insertion_point(field_set:masterpb.SegmentStat.segment_id)
}

// uint64 memory_size = 2;
inline void SegmentStat::clear_memory_size() {
  memory_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegmentStat::memory_size() const {
  // @@protoc_insertion_point(field_get:masterpb.SegmentStat.memory_size)
  return memory_size_;
}
inline void SegmentStat::set_memory_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  memory_size_ = value;
  // @@protoc_insertion_point(field_set:masterpb.SegmentStat.memory_size)
}

// float memory_rate = 3;
inline void SegmentStat::clear_memory_rate() {
  memory_rate_ = 0;
}
inline float SegmentStat::memory_rate() const {
  // @@protoc_insertion_point(field_get:masterpb.SegmentStat.memory_rate)
  return memory_rate_;
}
inline void SegmentStat::set_memory_rate(float value) {
  
  memory_rate_ = value;
  // @@protoc_insertion_point(field_set:masterpb.SegmentStat.memory_rate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace masterpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_master_2eproto
