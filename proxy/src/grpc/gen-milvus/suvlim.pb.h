// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suvlim.proto

#ifndef PROTOBUF_suvlim_2eproto__INCLUDED
#define PROTOBUF_suvlim_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace milvus {
namespace grpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_suvlim_2eproto();
void protobuf_AssignDesc_suvlim_2eproto();
void protobuf_ShutdownFile_suvlim_2eproto();

class BoolReply;
class BooleanQuery;
class CollectionInfo;
class CollectionName;
class CollectionNameList;
class CollectionRowCount;
class Command;
class CompactParam;
class CompareExpr;
class DeleteByIDParam;
class Entities;
class EntityIdentity;
class EntityIds;
class FieldMeta;
class FieldName;
class FieldParam;
class FieldType;
class FlushParam;
class GeneralQuery;
class GetEntityIDsParam;
class IndexParam;
class InsertOrDeleteMsg;
class InsertParam;
class Key2SegMsg;
class KeyValuePair;
class Mapping;
class MappingList;
class PartitionList;
class PartitionParam;
class QueryResult;
class RangeQuery;
class RowData;
class Schema;
class SearchInSegmentParam;
class SearchMsg;
class SearchParam;
class SearchParamPB;
class SegmentRecord;
class Status;
class StringReply;
class TermQuery;
class TimeSyncMsg;
class VectorFieldParam;
class VectorFieldRecord;
class VectorParam;
class VectorQuery;
class VectorRecord;
class VectorRowRecord;

enum ErrorCode {
  SUCCESS = 0,
  UNEXPECTED_ERROR = 1,
  CONNECT_FAILED = 2,
  PERMISSION_DENIED = 3,
  COLLECTION_NOT_EXISTS = 4,
  ILLEGAL_ARGUMENT = 5,
  ILLEGAL_DIMENSION = 7,
  ILLEGAL_INDEX_TYPE = 8,
  ILLEGAL_COLLECTION_NAME = 9,
  ILLEGAL_TOPK = 10,
  ILLEGAL_ROWRECORD = 11,
  ILLEGAL_VECTOR_ID = 12,
  ILLEGAL_SEARCH_RESULT = 13,
  FILE_NOT_FOUND = 14,
  META_FAILED = 15,
  CACHE_FAILED = 16,
  CANNOT_CREATE_FOLDER = 17,
  CANNOT_CREATE_FILE = 18,
  CANNOT_DELETE_FOLDER = 19,
  CANNOT_DELETE_FILE = 20,
  BUILD_INDEX_ERROR = 21,
  ILLEGAL_NLIST = 22,
  ILLEGAL_METRIC_TYPE = 23,
  OUT_OF_MEMORY = 24,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = SUCCESS;
const ErrorCode ErrorCode_MAX = OUT_OF_MEMORY;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum DataType {
  NONE = 0,
  BOOL = 1,
  INT8 = 2,
  INT16 = 3,
  INT32 = 4,
  INT64 = 5,
  FLOAT = 10,
  DOUBLE = 11,
  STRING = 20,
  VECTOR_BINARY = 100,
  VECTOR_FLOAT = 101,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = NONE;
const DataType DataType_MAX = VECTOR_FLOAT;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum CompareOperator {
  LT = 0,
  LTE = 1,
  EQ = 2,
  GT = 3,
  GTE = 4,
  NE = 5,
  CompareOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CompareOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CompareOperator_IsValid(int value);
const CompareOperator CompareOperator_MIN = LT;
const CompareOperator CompareOperator_MAX = NE;
const int CompareOperator_ARRAYSIZE = CompareOperator_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompareOperator_descriptor();
inline const ::std::string& CompareOperator_Name(CompareOperator value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompareOperator_descriptor(), value);
}
inline bool CompareOperator_Parse(
    const ::std::string& name, CompareOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompareOperator>(
    CompareOperator_descriptor(), name, value);
}
enum Occur {
  INVALID = 0,
  MUST = 1,
  SHOULD = 2,
  MUST_NOT = 3,
  Occur_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Occur_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Occur_IsValid(int value);
const Occur Occur_MIN = INVALID;
const Occur Occur_MAX = MUST_NOT;
const int Occur_ARRAYSIZE = Occur_MAX + 1;

const ::google::protobuf::EnumDescriptor* Occur_descriptor();
inline const ::std::string& Occur_Name(Occur value) {
  return ::google::protobuf::internal::NameOfEnum(
    Occur_descriptor(), value);
}
inline bool Occur_Parse(
    const ::std::string& name, Occur* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Occur>(
    Occur_descriptor(), name, value);
}
enum OpType {
  INSERT = 0,
  DELETE = 1,
  OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OpType_IsValid(int value);
const OpType OpType_MIN = INSERT;
const OpType OpType_MAX = DELETE;
const int OpType_ARRAYSIZE = OpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpType_descriptor();
inline const ::std::string& OpType_Name(OpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpType_descriptor(), value);
}
inline bool OpType_Parse(
    const ::std::string& name, OpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpType>(
    OpType_descriptor(), name, value);
}
enum SyncType {
  READ = 0,
  WRITE = 1,
  SyncType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SyncType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SyncType_IsValid(int value);
const SyncType SyncType_MIN = READ;
const SyncType SyncType_MAX = WRITE;
const int SyncType_ARRAYSIZE = SyncType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncType_descriptor();
inline const ::std::string& SyncType_Name(SyncType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncType_descriptor(), value);
}
inline bool SyncType_Parse(
    const ::std::string& name, SyncType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncType>(
    SyncType_descriptor(), name, value);
}
// ===================================================================

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  inline Status* New() const { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.ErrorCode error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::milvus::grpc::ErrorCode error_code() const;
  void set_error_code(::milvus::grpc::ErrorCode value);

  // optional string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:milvus.grpc.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int error_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class KeyValuePair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.KeyValuePair) */ {
 public:
  KeyValuePair();
  virtual ~KeyValuePair();

  KeyValuePair(const KeyValuePair& from);

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValuePair& default_instance();

  void Swap(KeyValuePair* other);

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const { return New(NULL); }

  KeyValuePair* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyValuePair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:milvus.grpc.KeyValuePair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static KeyValuePair* default_instance_;
};
// -------------------------------------------------------------------

class CollectionName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.CollectionName) */ {
 public:
  CollectionName();
  virtual ~CollectionName();

  CollectionName(const CollectionName& from);

  inline CollectionName& operator=(const CollectionName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectionName& default_instance();

  void Swap(CollectionName* other);

  // implements Message ----------------------------------------------

  inline CollectionName* New() const { return New(NULL); }

  CollectionName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectionName& from);
  void MergeFrom(const CollectionName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CollectionName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // @@protoc_insertion_point(class_scope:milvus.grpc.CollectionName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static CollectionName* default_instance_;
};
// -------------------------------------------------------------------

class CollectionNameList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.CollectionNameList) */ {
 public:
  CollectionNameList();
  virtual ~CollectionNameList();

  CollectionNameList(const CollectionNameList& from);

  inline CollectionNameList& operator=(const CollectionNameList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectionNameList& default_instance();

  void Swap(CollectionNameList* other);

  // implements Message ----------------------------------------------

  inline CollectionNameList* New() const { return New(NULL); }

  CollectionNameList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectionNameList& from);
  void MergeFrom(const CollectionNameList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CollectionNameList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // repeated string collection_names = 2;
  int collection_names_size() const;
  void clear_collection_names();
  static const int kCollectionNamesFieldNumber = 2;
  const ::std::string& collection_names(int index) const;
  ::std::string* mutable_collection_names(int index);
  void set_collection_names(int index, const ::std::string& value);
  void set_collection_names(int index, const char* value);
  void set_collection_names(int index, const char* value, size_t size);
  ::std::string* add_collection_names();
  void add_collection_names(const ::std::string& value);
  void add_collection_names(const char* value);
  void add_collection_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& collection_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_collection_names();

  // @@protoc_insertion_point(class_scope:milvus.grpc.CollectionNameList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  ::google::protobuf::RepeatedPtrField< ::std::string> collection_names_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static CollectionNameList* default_instance_;
};
// -------------------------------------------------------------------

class FieldName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.FieldName) */ {
 public:
  FieldName();
  virtual ~FieldName();

  FieldName(const FieldName& from);

  inline FieldName& operator=(const FieldName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldName& default_instance();

  void Swap(FieldName* other);

  // implements Message ----------------------------------------------

  inline FieldName* New() const { return New(NULL); }

  FieldName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldName& from);
  void MergeFrom(const FieldName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // optional string field_name = 2;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 2;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // @@protoc_insertion_point(class_scope:milvus.grpc.FieldName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static FieldName* default_instance_;
};
// -------------------------------------------------------------------

class Mapping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.Mapping) */ {
 public:
  Mapping();
  virtual ~Mapping();

  Mapping(const Mapping& from);

  inline Mapping& operator=(const Mapping& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mapping& default_instance();

  void Swap(Mapping* other);

  // implements Message ----------------------------------------------

  inline Mapping* New() const { return New(NULL); }

  Mapping* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mapping& from);
  void MergeFrom(const Mapping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mapping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // optional string collection_name = 2;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 2;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // repeated .milvus.grpc.FieldParam fields = 3;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 3;
  const ::milvus::grpc::FieldParam& fields(int index) const;
  ::milvus::grpc::FieldParam* mutable_fields(int index);
  ::milvus::grpc::FieldParam* add_fields();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::FieldParam >*
      mutable_fields();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::FieldParam >&
      fields() const;

  // repeated .milvus.grpc.KeyValuePair extra_params = 4;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 4;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.Mapping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::FieldParam > fields_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static Mapping* default_instance_;
};
// -------------------------------------------------------------------

class MappingList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.MappingList) */ {
 public:
  MappingList();
  virtual ~MappingList();

  MappingList(const MappingList& from);

  inline MappingList& operator=(const MappingList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MappingList& default_instance();

  void Swap(MappingList* other);

  // implements Message ----------------------------------------------

  inline MappingList* New() const { return New(NULL); }

  MappingList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MappingList& from);
  void MergeFrom(const MappingList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MappingList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // repeated .milvus.grpc.Mapping mapping_list = 2;
  int mapping_list_size() const;
  void clear_mapping_list();
  static const int kMappingListFieldNumber = 2;
  const ::milvus::grpc::Mapping& mapping_list(int index) const;
  ::milvus::grpc::Mapping* mutable_mapping_list(int index);
  ::milvus::grpc::Mapping* add_mapping_list();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::Mapping >*
      mutable_mapping_list();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::Mapping >&
      mapping_list() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.MappingList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::Mapping > mapping_list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static MappingList* default_instance_;
};
// -------------------------------------------------------------------

class PartitionParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.PartitionParam) */ {
 public:
  PartitionParam();
  virtual ~PartitionParam();

  PartitionParam(const PartitionParam& from);

  inline PartitionParam& operator=(const PartitionParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartitionParam& default_instance();

  void Swap(PartitionParam* other);

  // implements Message ----------------------------------------------

  inline PartitionParam* New() const { return New(NULL); }

  PartitionParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PartitionParam& from);
  void MergeFrom(const PartitionParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PartitionParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // optional string tag = 2;
  void clear_tag();
  static const int kTagFieldNumber = 2;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // @@protoc_insertion_point(class_scope:milvus.grpc.PartitionParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static PartitionParam* default_instance_;
};
// -------------------------------------------------------------------

class PartitionList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.PartitionList) */ {
 public:
  PartitionList();
  virtual ~PartitionList();

  PartitionList(const PartitionList& from);

  inline PartitionList& operator=(const PartitionList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartitionList& default_instance();

  void Swap(PartitionList* other);

  // implements Message ----------------------------------------------

  inline PartitionList* New() const { return New(NULL); }

  PartitionList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PartitionList& from);
  void MergeFrom(const PartitionList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PartitionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // repeated string partition_tag_array = 2;
  int partition_tag_array_size() const;
  void clear_partition_tag_array();
  static const int kPartitionTagArrayFieldNumber = 2;
  const ::std::string& partition_tag_array(int index) const;
  ::std::string* mutable_partition_tag_array(int index);
  void set_partition_tag_array(int index, const ::std::string& value);
  void set_partition_tag_array(int index, const char* value);
  void set_partition_tag_array(int index, const char* value, size_t size);
  ::std::string* add_partition_tag_array();
  void add_partition_tag_array(const ::std::string& value);
  void add_partition_tag_array(const char* value);
  void add_partition_tag_array(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& partition_tag_array() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_partition_tag_array();

  // @@protoc_insertion_point(class_scope:milvus.grpc.PartitionList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  ::google::protobuf::RepeatedPtrField< ::std::string> partition_tag_array_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static PartitionList* default_instance_;
};
// -------------------------------------------------------------------

class VectorRowRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.VectorRowRecord) */ {
 public:
  VectorRowRecord();
  virtual ~VectorRowRecord();

  VectorRowRecord(const VectorRowRecord& from);

  inline VectorRowRecord& operator=(const VectorRowRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorRowRecord& default_instance();

  void Swap(VectorRowRecord* other);

  // implements Message ----------------------------------------------

  inline VectorRowRecord* New() const { return New(NULL); }

  VectorRowRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorRowRecord& from);
  void MergeFrom(const VectorRowRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VectorRowRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float float_data = 1;
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 1;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bytes binary_data = 2;
  void clear_binary_data();
  static const int kBinaryDataFieldNumber = 2;
  const ::std::string& binary_data() const;
  void set_binary_data(const ::std::string& value);
  void set_binary_data(const char* value);
  void set_binary_data(const void* value, size_t size);
  ::std::string* mutable_binary_data();
  ::std::string* release_binary_data();
  void set_allocated_binary_data(::std::string* binary_data);

  // @@protoc_insertion_point(class_scope:milvus.grpc.VectorRowRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< float > float_data_;
  mutable int _float_data_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr binary_data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static VectorRowRecord* default_instance_;
};
// -------------------------------------------------------------------

class EntityIds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.EntityIds) */ {
 public:
  EntityIds();
  virtual ~EntityIds();

  EntityIds(const EntityIds& from);

  inline EntityIds& operator=(const EntityIds& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityIds& default_instance();

  void Swap(EntityIds* other);

  // implements Message ----------------------------------------------

  inline EntityIds* New() const { return New(NULL); }

  EntityIds* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntityIds& from);
  void MergeFrom(const EntityIds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EntityIds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // repeated int64 entity_id_array = 2;
  int entity_id_array_size() const;
  void clear_entity_id_array();
  static const int kEntityIdArrayFieldNumber = 2;
  ::google::protobuf::int64 entity_id_array(int index) const;
  void set_entity_id_array(int index, ::google::protobuf::int64 value);
  void add_entity_id_array(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      entity_id_array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_entity_id_array();

  // @@protoc_insertion_point(class_scope:milvus.grpc.EntityIds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > entity_id_array_;
  mutable int _entity_id_array_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static EntityIds* default_instance_;
};
// -------------------------------------------------------------------

class VectorRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.VectorRecord) */ {
 public:
  VectorRecord();
  virtual ~VectorRecord();

  VectorRecord(const VectorRecord& from);

  inline VectorRecord& operator=(const VectorRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorRecord& default_instance();

  void Swap(VectorRecord* other);

  // implements Message ----------------------------------------------

  inline VectorRecord* New() const { return New(NULL); }

  VectorRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorRecord& from);
  void MergeFrom(const VectorRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VectorRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .milvus.grpc.VectorRowRecord records = 1;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  const ::milvus::grpc::VectorRowRecord& records(int index) const;
  ::milvus::grpc::VectorRowRecord* mutable_records(int index);
  ::milvus::grpc::VectorRowRecord* add_records();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >&
      records() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.VectorRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord > records_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static VectorRecord* default_instance_;
};
// -------------------------------------------------------------------

class VectorParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.VectorParam) */ {
 public:
  VectorParam();
  virtual ~VectorParam();

  VectorParam(const VectorParam& from);

  inline VectorParam& operator=(const VectorParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorParam& default_instance();

  void Swap(VectorParam* other);

  // implements Message ----------------------------------------------

  inline VectorParam* New() const { return New(NULL); }

  VectorParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorParam& from);
  void MergeFrom(const VectorParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VectorParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string json = 1;
  void clear_json();
  static const int kJsonFieldNumber = 1;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // optional .milvus.grpc.VectorRecord row_record = 2;
  bool has_row_record() const;
  void clear_row_record();
  static const int kRowRecordFieldNumber = 2;
  const ::milvus::grpc::VectorRecord& row_record() const;
  ::milvus::grpc::VectorRecord* mutable_row_record();
  ::milvus::grpc::VectorRecord* release_row_record();
  void set_allocated_row_record(::milvus::grpc::VectorRecord* row_record);

  // @@protoc_insertion_point(class_scope:milvus.grpc.VectorParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  ::milvus::grpc::VectorRecord* row_record_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static VectorParam* default_instance_;
};
// -------------------------------------------------------------------

class FieldMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.FieldMeta) */ {
 public:
  FieldMeta();
  virtual ~FieldMeta();

  FieldMeta(const FieldMeta& from);

  inline FieldMeta& operator=(const FieldMeta& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldMeta& default_instance();

  void Swap(FieldMeta* other);

  // implements Message ----------------------------------------------

  inline FieldMeta* New() const { return New(NULL); }

  FieldMeta* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldMeta& from);
  void MergeFrom(const FieldMeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field_name = 1;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 1;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // optional .milvus.grpc.DataType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::milvus::grpc::DataType type() const;
  void set_type(::milvus::grpc::DataType value);

  // optional int64 dim = 3;
  void clear_dim();
  static const int kDimFieldNumber = 3;
  ::google::protobuf::int64 dim() const;
  void set_dim(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.grpc.FieldMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  ::google::protobuf::int64 dim_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static FieldMeta* default_instance_;
};
// -------------------------------------------------------------------

class Schema : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.Schema) */ {
 public:
  Schema();
  virtual ~Schema();

  Schema(const Schema& from);

  inline Schema& operator=(const Schema& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Schema& default_instance();

  void Swap(Schema* other);

  // implements Message ----------------------------------------------

  inline Schema* New() const { return New(NULL); }

  Schema* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Schema& from);
  void MergeFrom(const Schema& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Schema* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .milvus.grpc.FieldMeta field_metas = 1;
  int field_metas_size() const;
  void clear_field_metas();
  static const int kFieldMetasFieldNumber = 1;
  const ::milvus::grpc::FieldMeta& field_metas(int index) const;
  ::milvus::grpc::FieldMeta* mutable_field_metas(int index);
  ::milvus::grpc::FieldMeta* add_field_metas();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::FieldMeta >*
      mutable_field_metas();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::FieldMeta >&
      field_metas() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.Schema)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::FieldMeta > field_metas_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static Schema* default_instance_;
};
// -------------------------------------------------------------------

class RowData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.RowData) */ {
 public:
  RowData();
  virtual ~RowData();

  RowData(const RowData& from);

  inline RowData& operator=(const RowData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RowData& default_instance();

  void Swap(RowData* other);

  // implements Message ----------------------------------------------

  inline RowData* New() const { return New(NULL); }

  RowData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RowData& from);
  void MergeFrom(const RowData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RowData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes blob = 1;
  void clear_blob();
  static const int kBlobFieldNumber = 1;
  const ::std::string& blob() const;
  void set_blob(const ::std::string& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  ::std::string* mutable_blob();
  ::std::string* release_blob();
  void set_allocated_blob(::std::string* blob);

  // @@protoc_insertion_point(class_scope:milvus.grpc.RowData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr blob_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static RowData* default_instance_;
};
// -------------------------------------------------------------------

class InsertParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.InsertParam) */ {
 public:
  InsertParam();
  virtual ~InsertParam();

  InsertParam(const InsertParam& from);

  inline InsertParam& operator=(const InsertParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertParam& default_instance();

  void Swap(InsertParam* other);

  // implements Message ----------------------------------------------

  inline InsertParam* New() const { return New(NULL); }

  InsertParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InsertParam& from);
  void MergeFrom(const InsertParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InsertParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // optional .milvus.grpc.Schema schema = 2;
  bool has_schema() const;
  void clear_schema();
  static const int kSchemaFieldNumber = 2;
  const ::milvus::grpc::Schema& schema() const;
  ::milvus::grpc::Schema* mutable_schema();
  ::milvus::grpc::Schema* release_schema();
  void set_allocated_schema(::milvus::grpc::Schema* schema);

  // repeated .milvus.grpc.RowData rows_data = 3;
  int rows_data_size() const;
  void clear_rows_data();
  static const int kRowsDataFieldNumber = 3;
  const ::milvus::grpc::RowData& rows_data(int index) const;
  ::milvus::grpc::RowData* mutable_rows_data(int index);
  ::milvus::grpc::RowData* add_rows_data();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::RowData >*
      mutable_rows_data();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::RowData >&
      rows_data() const;

  // repeated int64 entity_id_array = 4;
  int entity_id_array_size() const;
  void clear_entity_id_array();
  static const int kEntityIdArrayFieldNumber = 4;
  ::google::protobuf::int64 entity_id_array(int index) const;
  void set_entity_id_array(int index, ::google::protobuf::int64 value);
  void add_entity_id_array(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      entity_id_array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_entity_id_array();

  // optional string partition_tag = 5;
  void clear_partition_tag();
  static const int kPartitionTagFieldNumber = 5;
  const ::std::string& partition_tag() const;
  void set_partition_tag(const ::std::string& value);
  void set_partition_tag(const char* value);
  void set_partition_tag(const char* value, size_t size);
  ::std::string* mutable_partition_tag();
  ::std::string* release_partition_tag();
  void set_allocated_partition_tag(::std::string* partition_tag);

  // repeated .milvus.grpc.KeyValuePair extra_params = 6;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 6;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.InsertParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::milvus::grpc::Schema* schema_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::RowData > rows_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > entity_id_array_;
  mutable int _entity_id_array_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr partition_tag_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static InsertParam* default_instance_;
};
// -------------------------------------------------------------------

class SearchParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.SearchParam) */ {
 public:
  SearchParam();
  virtual ~SearchParam();

  SearchParam(const SearchParam& from);

  inline SearchParam& operator=(const SearchParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchParam& default_instance();

  void Swap(SearchParam* other);

  // implements Message ----------------------------------------------

  inline SearchParam* New() const { return New(NULL); }

  SearchParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchParam& from);
  void MergeFrom(const SearchParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // repeated .milvus.grpc.VectorParam vector_param = 2;
  int vector_param_size() const;
  void clear_vector_param();
  static const int kVectorParamFieldNumber = 2;
  const ::milvus::grpc::VectorParam& vector_param(int index) const;
  ::milvus::grpc::VectorParam* mutable_vector_param(int index);
  ::milvus::grpc::VectorParam* add_vector_param();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorParam >*
      mutable_vector_param();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorParam >&
      vector_param() const;

  // optional string dsl = 3;
  void clear_dsl();
  static const int kDslFieldNumber = 3;
  const ::std::string& dsl() const;
  void set_dsl(const ::std::string& value);
  void set_dsl(const char* value);
  void set_dsl(const char* value, size_t size);
  ::std::string* mutable_dsl();
  ::std::string* release_dsl();
  void set_allocated_dsl(::std::string* dsl);

  // repeated string partition_tag = 4;
  int partition_tag_size() const;
  void clear_partition_tag();
  static const int kPartitionTagFieldNumber = 4;
  const ::std::string& partition_tag(int index) const;
  ::std::string* mutable_partition_tag(int index);
  void set_partition_tag(int index, const ::std::string& value);
  void set_partition_tag(int index, const char* value);
  void set_partition_tag(int index, const char* value, size_t size);
  ::std::string* add_partition_tag();
  void add_partition_tag(const ::std::string& value);
  void add_partition_tag(const char* value);
  void add_partition_tag(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& partition_tag() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_partition_tag();

  // repeated .milvus.grpc.KeyValuePair extra_params = 5;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 5;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.SearchParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorParam > vector_param_;
  ::google::protobuf::internal::ArenaStringPtr dsl_;
  ::google::protobuf::RepeatedPtrField< ::std::string> partition_tag_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static SearchParam* default_instance_;
};
// -------------------------------------------------------------------

class SearchInSegmentParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.SearchInSegmentParam) */ {
 public:
  SearchInSegmentParam();
  virtual ~SearchInSegmentParam();

  SearchInSegmentParam(const SearchInSegmentParam& from);

  inline SearchInSegmentParam& operator=(const SearchInSegmentParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchInSegmentParam& default_instance();

  void Swap(SearchInSegmentParam* other);

  // implements Message ----------------------------------------------

  inline SearchInSegmentParam* New() const { return New(NULL); }

  SearchInSegmentParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchInSegmentParam& from);
  void MergeFrom(const SearchInSegmentParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchInSegmentParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string file_id_array = 1;
  int file_id_array_size() const;
  void clear_file_id_array();
  static const int kFileIdArrayFieldNumber = 1;
  const ::std::string& file_id_array(int index) const;
  ::std::string* mutable_file_id_array(int index);
  void set_file_id_array(int index, const ::std::string& value);
  void set_file_id_array(int index, const char* value);
  void set_file_id_array(int index, const char* value, size_t size);
  ::std::string* add_file_id_array();
  void add_file_id_array(const ::std::string& value);
  void add_file_id_array(const char* value);
  void add_file_id_array(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& file_id_array() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_file_id_array();

  // optional .milvus.grpc.SearchParam search_param = 2;
  bool has_search_param() const;
  void clear_search_param();
  static const int kSearchParamFieldNumber = 2;
  const ::milvus::grpc::SearchParam& search_param() const;
  ::milvus::grpc::SearchParam* mutable_search_param();
  ::milvus::grpc::SearchParam* release_search_param();
  void set_allocated_search_param(::milvus::grpc::SearchParam* search_param);

  // @@protoc_insertion_point(class_scope:milvus.grpc.SearchInSegmentParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> file_id_array_;
  ::milvus::grpc::SearchParam* search_param_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static SearchInSegmentParam* default_instance_;
};
// -------------------------------------------------------------------

class Entities : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.Entities) */ {
 public:
  Entities();
  virtual ~Entities();

  Entities(const Entities& from);

  inline Entities& operator=(const Entities& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entities& default_instance();

  void Swap(Entities* other);

  // implements Message ----------------------------------------------

  inline Entities* New() const { return New(NULL); }

  Entities* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entities& from);
  void MergeFrom(const Entities& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // repeated int64 ids = 2;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 2;
  ::google::protobuf::int64 ids(int index) const;
  void set_ids(int index, ::google::protobuf::int64 value);
  void add_ids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ids();

  // repeated bool valid_row = 3;
  int valid_row_size() const;
  void clear_valid_row();
  static const int kValidRowFieldNumber = 3;
  bool valid_row(int index) const;
  void set_valid_row(int index, bool value);
  void add_valid_row(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      valid_row() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_valid_row();

  // repeated .milvus.grpc.RowData rows_data = 4;
  int rows_data_size() const;
  void clear_rows_data();
  static const int kRowsDataFieldNumber = 4;
  const ::milvus::grpc::RowData& rows_data(int index) const;
  ::milvus::grpc::RowData* mutable_rows_data(int index);
  ::milvus::grpc::RowData* add_rows_data();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::RowData >*
      mutable_rows_data();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::RowData >&
      rows_data() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.Entities)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ids_;
  mutable int _ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< bool > valid_row_;
  mutable int _valid_row_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::RowData > rows_data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static Entities* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.QueryResult) */ {
 public:
  QueryResult();
  virtual ~QueryResult();

  QueryResult(const QueryResult& from);

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult& default_instance();

  void Swap(QueryResult* other);

  // implements Message ----------------------------------------------

  inline QueryResult* New() const { return New(NULL); }

  QueryResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult& from);
  void MergeFrom(const QueryResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // optional .milvus.grpc.Entities entities = 2;
  bool has_entities() const;
  void clear_entities();
  static const int kEntitiesFieldNumber = 2;
  const ::milvus::grpc::Entities& entities() const;
  ::milvus::grpc::Entities* mutable_entities();
  ::milvus::grpc::Entities* release_entities();
  void set_allocated_entities(::milvus::grpc::Entities* entities);

  // optional int64 row_num = 3;
  void clear_row_num();
  static const int kRowNumFieldNumber = 3;
  ::google::protobuf::int64 row_num() const;
  void set_row_num(::google::protobuf::int64 value);

  // repeated float scores = 4;
  int scores_size() const;
  void clear_scores();
  static const int kScoresFieldNumber = 4;
  float scores(int index) const;
  void set_scores(int index, float value);
  void add_scores(float value);
  const ::google::protobuf::RepeatedField< float >&
      scores() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_scores();

  // repeated float distances = 5;
  int distances_size() const;
  void clear_distances();
  static const int kDistancesFieldNumber = 5;
  float distances(int index) const;
  void set_distances(int index, float value);
  void add_distances(float value);
  const ::google::protobuf::RepeatedField< float >&
      distances() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_distances();

  // repeated .milvus.grpc.KeyValuePair extra_params = 6;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 6;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.QueryResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  ::milvus::grpc::Entities* entities_;
  ::google::protobuf::int64 row_num_;
  ::google::protobuf::RepeatedField< float > scores_;
  mutable int _scores_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > distances_;
  mutable int _distances_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static QueryResult* default_instance_;
};
// -------------------------------------------------------------------

class StringReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.StringReply) */ {
 public:
  StringReply();
  virtual ~StringReply();

  StringReply(const StringReply& from);

  inline StringReply& operator=(const StringReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringReply& default_instance();

  void Swap(StringReply* other);

  // implements Message ----------------------------------------------

  inline StringReply* New() const { return New(NULL); }

  StringReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringReply& from);
  void MergeFrom(const StringReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // optional string string_reply = 2;
  void clear_string_reply();
  static const int kStringReplyFieldNumber = 2;
  const ::std::string& string_reply() const;
  void set_string_reply(const ::std::string& value);
  void set_string_reply(const char* value);
  void set_string_reply(const char* value, size_t size);
  ::std::string* mutable_string_reply();
  ::std::string* release_string_reply();
  void set_allocated_string_reply(::std::string* string_reply);

  // @@protoc_insertion_point(class_scope:milvus.grpc.StringReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  ::google::protobuf::internal::ArenaStringPtr string_reply_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static StringReply* default_instance_;
};
// -------------------------------------------------------------------

class BoolReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.BoolReply) */ {
 public:
  BoolReply();
  virtual ~BoolReply();

  BoolReply(const BoolReply& from);

  inline BoolReply& operator=(const BoolReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoolReply& default_instance();

  void Swap(BoolReply* other);

  // implements Message ----------------------------------------------

  inline BoolReply* New() const { return New(NULL); }

  BoolReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoolReply& from);
  void MergeFrom(const BoolReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoolReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // optional bool bool_reply = 2;
  void clear_bool_reply();
  static const int kBoolReplyFieldNumber = 2;
  bool bool_reply() const;
  void set_bool_reply(bool value);

  // @@protoc_insertion_point(class_scope:milvus.grpc.BoolReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  bool bool_reply_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static BoolReply* default_instance_;
};
// -------------------------------------------------------------------

class CollectionRowCount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.CollectionRowCount) */ {
 public:
  CollectionRowCount();
  virtual ~CollectionRowCount();

  CollectionRowCount(const CollectionRowCount& from);

  inline CollectionRowCount& operator=(const CollectionRowCount& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectionRowCount& default_instance();

  void Swap(CollectionRowCount* other);

  // implements Message ----------------------------------------------

  inline CollectionRowCount* New() const { return New(NULL); }

  CollectionRowCount* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectionRowCount& from);
  void MergeFrom(const CollectionRowCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CollectionRowCount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // optional int64 collection_row_count = 2;
  void clear_collection_row_count();
  static const int kCollectionRowCountFieldNumber = 2;
  ::google::protobuf::int64 collection_row_count() const;
  void set_collection_row_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.grpc.CollectionRowCount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  ::google::protobuf::int64 collection_row_count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static CollectionRowCount* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  inline Command* New() const { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // @@protoc_insertion_point(class_scope:milvus.grpc.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class IndexParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.IndexParam) */ {
 public:
  IndexParam();
  virtual ~IndexParam();

  IndexParam(const IndexParam& from);

  inline IndexParam& operator=(const IndexParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexParam& default_instance();

  void Swap(IndexParam* other);

  // implements Message ----------------------------------------------

  inline IndexParam* New() const { return New(NULL); }

  IndexParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexParam& from);
  void MergeFrom(const IndexParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IndexParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // optional string collection_name = 2;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 2;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // optional string field_name = 3;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 3;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // optional string index_name = 4;
  void clear_index_name();
  static const int kIndexNameFieldNumber = 4;
  const ::std::string& index_name() const;
  void set_index_name(const ::std::string& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  ::std::string* mutable_index_name();
  ::std::string* release_index_name();
  void set_allocated_index_name(::std::string* index_name);

  // repeated .milvus.grpc.KeyValuePair extra_params = 5;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 5;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.IndexParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  ::google::protobuf::internal::ArenaStringPtr index_name_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static IndexParam* default_instance_;
};
// -------------------------------------------------------------------

class FlushParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.FlushParam) */ {
 public:
  FlushParam();
  virtual ~FlushParam();

  FlushParam(const FlushParam& from);

  inline FlushParam& operator=(const FlushParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushParam& default_instance();

  void Swap(FlushParam* other);

  // implements Message ----------------------------------------------

  inline FlushParam* New() const { return New(NULL); }

  FlushParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushParam& from);
  void MergeFrom(const FlushParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlushParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string collection_name_array = 1;
  int collection_name_array_size() const;
  void clear_collection_name_array();
  static const int kCollectionNameArrayFieldNumber = 1;
  const ::std::string& collection_name_array(int index) const;
  ::std::string* mutable_collection_name_array(int index);
  void set_collection_name_array(int index, const ::std::string& value);
  void set_collection_name_array(int index, const char* value);
  void set_collection_name_array(int index, const char* value, size_t size);
  ::std::string* add_collection_name_array();
  void add_collection_name_array(const ::std::string& value);
  void add_collection_name_array(const char* value);
  void add_collection_name_array(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& collection_name_array() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_collection_name_array();

  // @@protoc_insertion_point(class_scope:milvus.grpc.FlushParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> collection_name_array_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static FlushParam* default_instance_;
};
// -------------------------------------------------------------------

class CompactParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.CompactParam) */ {
 public:
  CompactParam();
  virtual ~CompactParam();

  CompactParam(const CompactParam& from);

  inline CompactParam& operator=(const CompactParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactParam& default_instance();

  void Swap(CompactParam* other);

  // implements Message ----------------------------------------------

  inline CompactParam* New() const { return New(NULL); }

  CompactParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompactParam& from);
  void MergeFrom(const CompactParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CompactParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // optional double threshold = 2;
  void clear_threshold();
  static const int kThresholdFieldNumber = 2;
  double threshold() const;
  void set_threshold(double value);

  // @@protoc_insertion_point(class_scope:milvus.grpc.CompactParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  double threshold_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static CompactParam* default_instance_;
};
// -------------------------------------------------------------------

class DeleteByIDParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.DeleteByIDParam) */ {
 public:
  DeleteByIDParam();
  virtual ~DeleteByIDParam();

  DeleteByIDParam(const DeleteByIDParam& from);

  inline DeleteByIDParam& operator=(const DeleteByIDParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteByIDParam& default_instance();

  void Swap(DeleteByIDParam* other);

  // implements Message ----------------------------------------------

  inline DeleteByIDParam* New() const { return New(NULL); }

  DeleteByIDParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteByIDParam& from);
  void MergeFrom(const DeleteByIDParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteByIDParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // repeated int64 id_array = 2;
  int id_array_size() const;
  void clear_id_array();
  static const int kIdArrayFieldNumber = 2;
  ::google::protobuf::int64 id_array(int index) const;
  void set_id_array(int index, ::google::protobuf::int64 value);
  void add_id_array(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      id_array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_id_array();

  // @@protoc_insertion_point(class_scope:milvus.grpc.DeleteByIDParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > id_array_;
  mutable int _id_array_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static DeleteByIDParam* default_instance_;
};
// -------------------------------------------------------------------

class CollectionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.CollectionInfo) */ {
 public:
  CollectionInfo();
  virtual ~CollectionInfo();

  CollectionInfo(const CollectionInfo& from);

  inline CollectionInfo& operator=(const CollectionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectionInfo& default_instance();

  void Swap(CollectionInfo* other);

  // implements Message ----------------------------------------------

  inline CollectionInfo* New() const { return New(NULL); }

  CollectionInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectionInfo& from);
  void MergeFrom(const CollectionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CollectionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::milvus::grpc::Status& status() const;
  ::milvus::grpc::Status* mutable_status();
  ::milvus::grpc::Status* release_status();
  void set_allocated_status(::milvus::grpc::Status* status);

  // optional string json_info = 2;
  void clear_json_info();
  static const int kJsonInfoFieldNumber = 2;
  const ::std::string& json_info() const;
  void set_json_info(const ::std::string& value);
  void set_json_info(const char* value);
  void set_json_info(const char* value, size_t size);
  ::std::string* mutable_json_info();
  ::std::string* release_json_info();
  void set_allocated_json_info(::std::string* json_info);

  // @@protoc_insertion_point(class_scope:milvus.grpc.CollectionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::milvus::grpc::Status* status_;
  ::google::protobuf::internal::ArenaStringPtr json_info_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static CollectionInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetEntityIDsParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.GetEntityIDsParam) */ {
 public:
  GetEntityIDsParam();
  virtual ~GetEntityIDsParam();

  GetEntityIDsParam(const GetEntityIDsParam& from);

  inline GetEntityIDsParam& operator=(const GetEntityIDsParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetEntityIDsParam& default_instance();

  void Swap(GetEntityIDsParam* other);

  // implements Message ----------------------------------------------

  inline GetEntityIDsParam* New() const { return New(NULL); }

  GetEntityIDsParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetEntityIDsParam& from);
  void MergeFrom(const GetEntityIDsParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetEntityIDsParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // optional int64 segment_id = 2;
  void clear_segment_id();
  static const int kSegmentIdFieldNumber = 2;
  ::google::protobuf::int64 segment_id() const;
  void set_segment_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.grpc.GetEntityIDsParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::google::protobuf::int64 segment_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static GetEntityIDsParam* default_instance_;
};
// -------------------------------------------------------------------

class EntityIdentity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.EntityIdentity) */ {
 public:
  EntityIdentity();
  virtual ~EntityIdentity();

  EntityIdentity(const EntityIdentity& from);

  inline EntityIdentity& operator=(const EntityIdentity& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityIdentity& default_instance();

  void Swap(EntityIdentity* other);

  // implements Message ----------------------------------------------

  inline EntityIdentity* New() const { return New(NULL); }

  EntityIdentity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntityIdentity& from);
  void MergeFrom(const EntityIdentity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EntityIdentity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // repeated int64 id_array = 2;
  int id_array_size() const;
  void clear_id_array();
  static const int kIdArrayFieldNumber = 2;
  ::google::protobuf::int64 id_array(int index) const;
  void set_id_array(int index, ::google::protobuf::int64 value);
  void add_id_array(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      id_array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_id_array();

  // repeated string field_names = 3;
  int field_names_size() const;
  void clear_field_names();
  static const int kFieldNamesFieldNumber = 3;
  const ::std::string& field_names(int index) const;
  ::std::string* mutable_field_names(int index);
  void set_field_names(int index, const ::std::string& value);
  void set_field_names(int index, const char* value);
  void set_field_names(int index, const char* value, size_t size);
  ::std::string* add_field_names();
  void add_field_names(const ::std::string& value);
  void add_field_names(const char* value);
  void add_field_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& field_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_field_names();

  // @@protoc_insertion_point(class_scope:milvus.grpc.EntityIdentity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > id_array_;
  mutable int _id_array_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> field_names_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static EntityIdentity* default_instance_;
};
// -------------------------------------------------------------------

class VectorFieldParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.VectorFieldParam) */ {
 public:
  VectorFieldParam();
  virtual ~VectorFieldParam();

  VectorFieldParam(const VectorFieldParam& from);

  inline VectorFieldParam& operator=(const VectorFieldParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorFieldParam& default_instance();

  void Swap(VectorFieldParam* other);

  // implements Message ----------------------------------------------

  inline VectorFieldParam* New() const { return New(NULL); }

  VectorFieldParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorFieldParam& from);
  void MergeFrom(const VectorFieldParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VectorFieldParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 dimension = 1;
  void clear_dimension();
  static const int kDimensionFieldNumber = 1;
  ::google::protobuf::int64 dimension() const;
  void set_dimension(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.grpc.VectorFieldParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 dimension_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static VectorFieldParam* default_instance_;
};
// -------------------------------------------------------------------

class FieldType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.FieldType) */ {
 public:
  FieldType();
  virtual ~FieldType();

  FieldType(const FieldType& from);

  inline FieldType& operator=(const FieldType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldType& default_instance();

  enum ValueCase {
    kDataType = 1,
    kVectorParam = 2,
    VALUE_NOT_SET = 0,
  };

  void Swap(FieldType* other);

  // implements Message ----------------------------------------------

  inline FieldType* New() const { return New(NULL); }

  FieldType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldType& from);
  void MergeFrom(const FieldType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.DataType data_type = 1;
  private:
  bool has_data_type() const;
  public:
  void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  ::milvus::grpc::DataType data_type() const;
  void set_data_type(::milvus::grpc::DataType value);

  // optional .milvus.grpc.VectorFieldParam vector_param = 2;
  bool has_vector_param() const;
  void clear_vector_param();
  static const int kVectorParamFieldNumber = 2;
  const ::milvus::grpc::VectorFieldParam& vector_param() const;
  ::milvus::grpc::VectorFieldParam* mutable_vector_param();
  ::milvus::grpc::VectorFieldParam* release_vector_param();
  void set_allocated_vector_param(::milvus::grpc::VectorFieldParam* vector_param);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:milvus.grpc.FieldType)
 private:
  inline void set_has_data_type();
  inline void set_has_vector_param();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ValueUnion {
    ValueUnion() {}
    int data_type_;
    ::milvus::grpc::VectorFieldParam* vector_param_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static FieldType* default_instance_;
};
// -------------------------------------------------------------------

class FieldParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.FieldParam) */ {
 public:
  FieldParam();
  virtual ~FieldParam();

  FieldParam(const FieldParam& from);

  inline FieldParam& operator=(const FieldParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldParam& default_instance();

  void Swap(FieldParam* other);

  // implements Message ----------------------------------------------

  inline FieldParam* New() const { return New(NULL); }

  FieldParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldParam& from);
  void MergeFrom(const FieldParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .milvus.grpc.DataType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::milvus::grpc::DataType type() const;
  void set_type(::milvus::grpc::DataType value);

  // repeated .milvus.grpc.KeyValuePair index_params = 4;
  int index_params_size() const;
  void clear_index_params();
  static const int kIndexParamsFieldNumber = 4;
  const ::milvus::grpc::KeyValuePair& index_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_index_params(int index);
  ::milvus::grpc::KeyValuePair* add_index_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_index_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      index_params() const;

  // repeated .milvus.grpc.KeyValuePair extra_params = 5;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 5;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.FieldParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > index_params_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static FieldParam* default_instance_;
};
// -------------------------------------------------------------------

class VectorFieldRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.VectorFieldRecord) */ {
 public:
  VectorFieldRecord();
  virtual ~VectorFieldRecord();

  VectorFieldRecord(const VectorFieldRecord& from);

  inline VectorFieldRecord& operator=(const VectorFieldRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorFieldRecord& default_instance();

  void Swap(VectorFieldRecord* other);

  // implements Message ----------------------------------------------

  inline VectorFieldRecord* New() const { return New(NULL); }

  VectorFieldRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorFieldRecord& from);
  void MergeFrom(const VectorFieldRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VectorFieldRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .milvus.grpc.VectorRowRecord value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::milvus::grpc::VectorRowRecord& value(int index) const;
  ::milvus::grpc::VectorRowRecord* mutable_value(int index);
  ::milvus::grpc::VectorRowRecord* add_value();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >*
      mutable_value();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >&
      value() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.VectorFieldRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord > value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static VectorFieldRecord* default_instance_;
};
// -------------------------------------------------------------------

class TermQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.TermQuery) */ {
 public:
  TermQuery();
  virtual ~TermQuery();

  TermQuery(const TermQuery& from);

  inline TermQuery& operator=(const TermQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TermQuery& default_instance();

  void Swap(TermQuery* other);

  // implements Message ----------------------------------------------

  inline TermQuery* New() const { return New(NULL); }

  TermQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TermQuery& from);
  void MergeFrom(const TermQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TermQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field_name = 1;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 1;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // repeated int64 int_value = 2;
  int int_value_size() const;
  void clear_int_value();
  static const int kIntValueFieldNumber = 2;
  ::google::protobuf::int64 int_value(int index) const;
  void set_int_value(int index, ::google::protobuf::int64 value);
  void add_int_value(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      int_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_int_value();

  // repeated double double_value = 3;
  int double_value_size() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 3;
  double double_value(int index) const;
  void set_double_value(int index, double value);
  void add_double_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_value();

  // optional int64 value_num = 4;
  void clear_value_num();
  static const int kValueNumFieldNumber = 4;
  ::google::protobuf::int64 value_num() const;
  void set_value_num(::google::protobuf::int64 value);

  // optional float boost = 5;
  void clear_boost();
  static const int kBoostFieldNumber = 5;
  float boost() const;
  void set_boost(float value);

  // repeated .milvus.grpc.KeyValuePair extra_params = 6;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 6;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.TermQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > int_value_;
  mutable int _int_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_value_;
  mutable int _double_value_cached_byte_size_;
  ::google::protobuf::int64 value_num_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  float boost_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static TermQuery* default_instance_;
};
// -------------------------------------------------------------------

class CompareExpr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.CompareExpr) */ {
 public:
  CompareExpr();
  virtual ~CompareExpr();

  CompareExpr(const CompareExpr& from);

  inline CompareExpr& operator=(const CompareExpr& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompareExpr& default_instance();

  void Swap(CompareExpr* other);

  // implements Message ----------------------------------------------

  inline CompareExpr* New() const { return New(NULL); }

  CompareExpr* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompareExpr& from);
  void MergeFrom(const CompareExpr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CompareExpr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.CompareOperator operator = 1;
  void clear_operator_();
  static const int kOperatorFieldNumber = 1;
  ::milvus::grpc::CompareOperator operator_() const;
  void set_operator_(::milvus::grpc::CompareOperator value);

  // optional string operand = 2;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  const ::std::string& operand() const;
  void set_operand(const ::std::string& value);
  void set_operand(const char* value);
  void set_operand(const char* value, size_t size);
  ::std::string* mutable_operand();
  ::std::string* release_operand();
  void set_allocated_operand(::std::string* operand);

  // @@protoc_insertion_point(class_scope:milvus.grpc.CompareExpr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr operand_;
  int operator__;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static CompareExpr* default_instance_;
};
// -------------------------------------------------------------------

class RangeQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.RangeQuery) */ {
 public:
  RangeQuery();
  virtual ~RangeQuery();

  RangeQuery(const RangeQuery& from);

  inline RangeQuery& operator=(const RangeQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeQuery& default_instance();

  void Swap(RangeQuery* other);

  // implements Message ----------------------------------------------

  inline RangeQuery* New() const { return New(NULL); }

  RangeQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeQuery& from);
  void MergeFrom(const RangeQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field_name = 1;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 1;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // repeated .milvus.grpc.CompareExpr operand = 2;
  int operand_size() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  const ::milvus::grpc::CompareExpr& operand(int index) const;
  ::milvus::grpc::CompareExpr* mutable_operand(int index);
  ::milvus::grpc::CompareExpr* add_operand();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::CompareExpr >*
      mutable_operand();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::CompareExpr >&
      operand() const;

  // optional float boost = 3;
  void clear_boost();
  static const int kBoostFieldNumber = 3;
  float boost() const;
  void set_boost(float value);

  // repeated .milvus.grpc.KeyValuePair extra_params = 4;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 4;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.RangeQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::CompareExpr > operand_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  float boost_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static RangeQuery* default_instance_;
};
// -------------------------------------------------------------------

class VectorQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.VectorQuery) */ {
 public:
  VectorQuery();
  virtual ~VectorQuery();

  VectorQuery(const VectorQuery& from);

  inline VectorQuery& operator=(const VectorQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorQuery& default_instance();

  void Swap(VectorQuery* other);

  // implements Message ----------------------------------------------

  inline VectorQuery* New() const { return New(NULL); }

  VectorQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorQuery& from);
  void MergeFrom(const VectorQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VectorQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field_name = 1;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 1;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // optional float query_boost = 2;
  void clear_query_boost();
  static const int kQueryBoostFieldNumber = 2;
  float query_boost() const;
  void set_query_boost(float value);

  // repeated .milvus.grpc.VectorRowRecord records = 3;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 3;
  const ::milvus::grpc::VectorRowRecord& records(int index) const;
  ::milvus::grpc::VectorRowRecord* mutable_records(int index);
  ::milvus::grpc::VectorRowRecord* add_records();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >&
      records() const;

  // optional int64 topk = 4;
  void clear_topk();
  static const int kTopkFieldNumber = 4;
  ::google::protobuf::int64 topk() const;
  void set_topk(::google::protobuf::int64 value);

  // repeated .milvus.grpc.KeyValuePair extra_params = 5;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 5;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.VectorQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord > records_;
  ::google::protobuf::int64 topk_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  float query_boost_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static VectorQuery* default_instance_;
};
// -------------------------------------------------------------------

class BooleanQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.BooleanQuery) */ {
 public:
  BooleanQuery();
  virtual ~BooleanQuery();

  BooleanQuery(const BooleanQuery& from);

  inline BooleanQuery& operator=(const BooleanQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BooleanQuery& default_instance();

  void Swap(BooleanQuery* other);

  // implements Message ----------------------------------------------

  inline BooleanQuery* New() const { return New(NULL); }

  BooleanQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BooleanQuery& from);
  void MergeFrom(const BooleanQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BooleanQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.Occur occur = 1;
  void clear_occur();
  static const int kOccurFieldNumber = 1;
  ::milvus::grpc::Occur occur() const;
  void set_occur(::milvus::grpc::Occur value);

  // repeated .milvus.grpc.GeneralQuery general_query = 2;
  int general_query_size() const;
  void clear_general_query();
  static const int kGeneralQueryFieldNumber = 2;
  const ::milvus::grpc::GeneralQuery& general_query(int index) const;
  ::milvus::grpc::GeneralQuery* mutable_general_query(int index);
  ::milvus::grpc::GeneralQuery* add_general_query();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::GeneralQuery >*
      mutable_general_query();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::GeneralQuery >&
      general_query() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.BooleanQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::GeneralQuery > general_query_;
  int occur_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static BooleanQuery* default_instance_;
};
// -------------------------------------------------------------------

class GeneralQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.GeneralQuery) */ {
 public:
  GeneralQuery();
  virtual ~GeneralQuery();

  GeneralQuery(const GeneralQuery& from);

  inline GeneralQuery& operator=(const GeneralQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralQuery& default_instance();

  enum QueryCase {
    kBooleanQuery = 1,
    kTermQuery = 2,
    kRangeQuery = 3,
    kVectorQuery = 4,
    QUERY_NOT_SET = 0,
  };

  void Swap(GeneralQuery* other);

  // implements Message ----------------------------------------------

  inline GeneralQuery* New() const { return New(NULL); }

  GeneralQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeneralQuery& from);
  void MergeFrom(const GeneralQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeneralQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .milvus.grpc.BooleanQuery boolean_query = 1;
  bool has_boolean_query() const;
  void clear_boolean_query();
  static const int kBooleanQueryFieldNumber = 1;
  const ::milvus::grpc::BooleanQuery& boolean_query() const;
  ::milvus::grpc::BooleanQuery* mutable_boolean_query();
  ::milvus::grpc::BooleanQuery* release_boolean_query();
  void set_allocated_boolean_query(::milvus::grpc::BooleanQuery* boolean_query);

  // optional .milvus.grpc.TermQuery term_query = 2;
  bool has_term_query() const;
  void clear_term_query();
  static const int kTermQueryFieldNumber = 2;
  const ::milvus::grpc::TermQuery& term_query() const;
  ::milvus::grpc::TermQuery* mutable_term_query();
  ::milvus::grpc::TermQuery* release_term_query();
  void set_allocated_term_query(::milvus::grpc::TermQuery* term_query);

  // optional .milvus.grpc.RangeQuery range_query = 3;
  bool has_range_query() const;
  void clear_range_query();
  static const int kRangeQueryFieldNumber = 3;
  const ::milvus::grpc::RangeQuery& range_query() const;
  ::milvus::grpc::RangeQuery* mutable_range_query();
  ::milvus::grpc::RangeQuery* release_range_query();
  void set_allocated_range_query(::milvus::grpc::RangeQuery* range_query);

  // optional .milvus.grpc.VectorQuery vector_query = 4;
  bool has_vector_query() const;
  void clear_vector_query();
  static const int kVectorQueryFieldNumber = 4;
  const ::milvus::grpc::VectorQuery& vector_query() const;
  ::milvus::grpc::VectorQuery* mutable_vector_query();
  ::milvus::grpc::VectorQuery* release_vector_query();
  void set_allocated_vector_query(::milvus::grpc::VectorQuery* vector_query);

  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:milvus.grpc.GeneralQuery)
 private:
  inline void set_has_boolean_query();
  inline void set_has_term_query();
  inline void set_has_range_query();
  inline void set_has_vector_query();

  inline bool has_query() const;
  void clear_query();
  inline void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union QueryUnion {
    QueryUnion() {}
    ::milvus::grpc::BooleanQuery* boolean_query_;
    ::milvus::grpc::TermQuery* term_query_;
    ::milvus::grpc::RangeQuery* range_query_;
    ::milvus::grpc::VectorQuery* vector_query_;
  } query_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static GeneralQuery* default_instance_;
};
// -------------------------------------------------------------------

class SearchParamPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.SearchParamPB) */ {
 public:
  SearchParamPB();
  virtual ~SearchParamPB();

  SearchParamPB(const SearchParamPB& from);

  inline SearchParamPB& operator=(const SearchParamPB& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchParamPB& default_instance();

  void Swap(SearchParamPB* other);

  // implements Message ----------------------------------------------

  inline SearchParamPB* New() const { return New(NULL); }

  SearchParamPB* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchParamPB& from);
  void MergeFrom(const SearchParamPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchParamPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // repeated string partition_tag_array = 2;
  int partition_tag_array_size() const;
  void clear_partition_tag_array();
  static const int kPartitionTagArrayFieldNumber = 2;
  const ::std::string& partition_tag_array(int index) const;
  ::std::string* mutable_partition_tag_array(int index);
  void set_partition_tag_array(int index, const ::std::string& value);
  void set_partition_tag_array(int index, const char* value);
  void set_partition_tag_array(int index, const char* value, size_t size);
  ::std::string* add_partition_tag_array();
  void add_partition_tag_array(const ::std::string& value);
  void add_partition_tag_array(const char* value);
  void add_partition_tag_array(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& partition_tag_array() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_partition_tag_array();

  // optional .milvus.grpc.GeneralQuery general_query = 3;
  bool has_general_query() const;
  void clear_general_query();
  static const int kGeneralQueryFieldNumber = 3;
  const ::milvus::grpc::GeneralQuery& general_query() const;
  ::milvus::grpc::GeneralQuery* mutable_general_query();
  ::milvus::grpc::GeneralQuery* release_general_query();
  void set_allocated_general_query(::milvus::grpc::GeneralQuery* general_query);

  // repeated .milvus.grpc.KeyValuePair extra_params = 4;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 4;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.SearchParamPB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> partition_tag_array_;
  ::milvus::grpc::GeneralQuery* general_query_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static SearchParamPB* default_instance_;
};
// -------------------------------------------------------------------

class InsertOrDeleteMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.InsertOrDeleteMsg) */ {
 public:
  InsertOrDeleteMsg();
  virtual ~InsertOrDeleteMsg();

  InsertOrDeleteMsg(const InsertOrDeleteMsg& from);

  inline InsertOrDeleteMsg& operator=(const InsertOrDeleteMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertOrDeleteMsg& default_instance();

  void Swap(InsertOrDeleteMsg* other);

  // implements Message ----------------------------------------------

  inline InsertOrDeleteMsg* New() const { return New(NULL); }

  InsertOrDeleteMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InsertOrDeleteMsg& from);
  void MergeFrom(const InsertOrDeleteMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InsertOrDeleteMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // optional .milvus.grpc.RowData rows_data = 2;
  bool has_rows_data() const;
  void clear_rows_data();
  static const int kRowsDataFieldNumber = 2;
  const ::milvus::grpc::RowData& rows_data() const;
  ::milvus::grpc::RowData* mutable_rows_data();
  ::milvus::grpc::RowData* release_rows_data();
  void set_allocated_rows_data(::milvus::grpc::RowData* rows_data);

  // optional int64 uid = 3;
  void clear_uid();
  static const int kUidFieldNumber = 3;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional string partition_tag = 4;
  void clear_partition_tag();
  static const int kPartitionTagFieldNumber = 4;
  const ::std::string& partition_tag() const;
  void set_partition_tag(const ::std::string& value);
  void set_partition_tag(const char* value);
  void set_partition_tag(const char* value, size_t size);
  ::std::string* mutable_partition_tag();
  ::std::string* release_partition_tag();
  void set_allocated_partition_tag(::std::string* partition_tag);

  // optional int64 timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int64 segment_id = 6;
  void clear_segment_id();
  static const int kSegmentIdFieldNumber = 6;
  ::google::protobuf::int64 segment_id() const;
  void set_segment_id(::google::protobuf::int64 value);

  // optional int64 channel_id = 7;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 7;
  ::google::protobuf::int64 channel_id() const;
  void set_channel_id(::google::protobuf::int64 value);

  // optional .milvus.grpc.OpType op = 8;
  void clear_op();
  static const int kOpFieldNumber = 8;
  ::milvus::grpc::OpType op() const;
  void set_op(::milvus::grpc::OpType value);

  // optional int64 client_id = 9;
  void clear_client_id();
  static const int kClientIdFieldNumber = 9;
  ::google::protobuf::int64 client_id() const;
  void set_client_id(::google::protobuf::int64 value);

  // repeated .milvus.grpc.KeyValuePair extra_params = 10;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 10;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.InsertOrDeleteMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::milvus::grpc::RowData* rows_data_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::internal::ArenaStringPtr partition_tag_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 segment_id_;
  ::google::protobuf::int64 channel_id_;
  ::google::protobuf::int64 client_id_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  int op_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static InsertOrDeleteMsg* default_instance_;
};
// -------------------------------------------------------------------

class SearchMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.SearchMsg) */ {
 public:
  SearchMsg();
  virtual ~SearchMsg();

  SearchMsg(const SearchMsg& from);

  inline SearchMsg& operator=(const SearchMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchMsg& default_instance();

  void Swap(SearchMsg* other);

  // implements Message ----------------------------------------------

  inline SearchMsg* New() const { return New(NULL); }

  SearchMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchMsg& from);
  void MergeFrom(const SearchMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // optional .milvus.grpc.VectorRowRecord records = 2;
  bool has_records() const;
  void clear_records();
  static const int kRecordsFieldNumber = 2;
  const ::milvus::grpc::VectorRowRecord& records() const;
  ::milvus::grpc::VectorRowRecord* mutable_records();
  ::milvus::grpc::VectorRowRecord* release_records();
  void set_allocated_records(::milvus::grpc::VectorRowRecord* records);

  // optional string partition_tag = 3;
  void clear_partition_tag();
  static const int kPartitionTagFieldNumber = 3;
  const ::std::string& partition_tag() const;
  void set_partition_tag(const ::std::string& value);
  void set_partition_tag(const char* value);
  void set_partition_tag(const char* value, size_t size);
  ::std::string* mutable_partition_tag();
  ::std::string* release_partition_tag();
  void set_allocated_partition_tag(::std::string* partition_tag);

  // optional int64 uid = 4;
  void clear_uid();
  static const int kUidFieldNumber = 4;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional int64 timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int64 client_id = 6;
  void clear_client_id();
  static const int kClientIdFieldNumber = 6;
  ::google::protobuf::int64 client_id() const;
  void set_client_id(::google::protobuf::int64 value);

  // repeated .milvus.grpc.KeyValuePair extra_params = 7;
  int extra_params_size() const;
  void clear_extra_params();
  static const int kExtraParamsFieldNumber = 7;
  const ::milvus::grpc::KeyValuePair& extra_params(int index) const;
  ::milvus::grpc::KeyValuePair* mutable_extra_params(int index);
  ::milvus::grpc::KeyValuePair* add_extra_params();
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
      mutable_extra_params();
  const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
      extra_params() const;

  // @@protoc_insertion_point(class_scope:milvus.grpc.SearchMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::milvus::grpc::VectorRowRecord* records_;
  ::google::protobuf::internal::ArenaStringPtr partition_tag_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 client_id_;
  ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair > extra_params_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static SearchMsg* default_instance_;
};
// -------------------------------------------------------------------

class TimeSyncMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.TimeSyncMsg) */ {
 public:
  TimeSyncMsg();
  virtual ~TimeSyncMsg();

  TimeSyncMsg(const TimeSyncMsg& from);

  inline TimeSyncMsg& operator=(const TimeSyncMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSyncMsg& default_instance();

  void Swap(TimeSyncMsg* other);

  // implements Message ----------------------------------------------

  inline TimeSyncMsg* New() const { return New(NULL); }

  TimeSyncMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeSyncMsg& from);
  void MergeFrom(const TimeSyncMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimeSyncMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 peer_Id = 1;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 1;
  ::google::protobuf::int64 peer_id() const;
  void set_peer_id(::google::protobuf::int64 value);

  // optional int64 Timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional .milvus.grpc.SyncType sync_type = 3;
  void clear_sync_type();
  static const int kSyncTypeFieldNumber = 3;
  ::milvus::grpc::SyncType sync_type() const;
  void set_sync_type(::milvus::grpc::SyncType value);

  // @@protoc_insertion_point(class_scope:milvus.grpc.TimeSyncMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 peer_id_;
  ::google::protobuf::int64 timestamp_;
  int sync_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static TimeSyncMsg* default_instance_;
};
// -------------------------------------------------------------------

class SegmentRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.SegmentRecord) */ {
 public:
  SegmentRecord();
  virtual ~SegmentRecord();

  SegmentRecord(const SegmentRecord& from);

  inline SegmentRecord& operator=(const SegmentRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentRecord& default_instance();

  void Swap(SegmentRecord* other);

  // implements Message ----------------------------------------------

  inline SegmentRecord* New() const { return New(NULL); }

  SegmentRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegmentRecord& from);
  void MergeFrom(const SegmentRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SegmentRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // repeated int64 segment_id = 2;
  int segment_id_size() const;
  void clear_segment_id();
  static const int kSegmentIdFieldNumber = 2;
  ::google::protobuf::int64 segment_id(int index) const;
  void set_segment_id(int index, ::google::protobuf::int64 value);
  void add_segment_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      segment_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_segment_id();

  // @@protoc_insertion_point(class_scope:milvus.grpc.SegmentRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > segment_id_;
  mutable int _segment_id_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static SegmentRecord* default_instance_;
};
// -------------------------------------------------------------------

class Key2SegMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.grpc.Key2SegMsg) */ {
 public:
  Key2SegMsg();
  virtual ~Key2SegMsg();

  Key2SegMsg(const Key2SegMsg& from);

  inline Key2SegMsg& operator=(const Key2SegMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Key2SegMsg& default_instance();

  void Swap(Key2SegMsg* other);

  // implements Message ----------------------------------------------

  inline Key2SegMsg* New() const { return New(NULL); }

  Key2SegMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Key2SegMsg& from);
  void MergeFrom(const Key2SegMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Key2SegMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  ::google::protobuf::int64 client_id() const;
  void set_client_id(::google::protobuf::int64 value);

  // optional .milvus.grpc.SegmentRecord records = 2;
  bool has_records() const;
  void clear_records();
  static const int kRecordsFieldNumber = 2;
  const ::milvus::grpc::SegmentRecord& records() const;
  ::milvus::grpc::SegmentRecord* mutable_records();
  ::milvus::grpc::SegmentRecord* release_records();
  void set_allocated_records(::milvus::grpc::SegmentRecord* records);

  // @@protoc_insertion_point(class_scope:milvus.grpc.Key2SegMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 client_id_;
  ::milvus::grpc::SegmentRecord* records_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_suvlim_2eproto();
  friend void protobuf_AssignDesc_suvlim_2eproto();
  friend void protobuf_ShutdownFile_suvlim_2eproto();

  void InitAsDefaultInstance();
  static Key2SegMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional .milvus.grpc.ErrorCode error_code = 1;
inline void Status::clear_error_code() {
  error_code_ = 0;
}
inline ::milvus::grpc::ErrorCode Status::error_code() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Status.error_code)
  return static_cast< ::milvus::grpc::ErrorCode >(error_code_);
}
inline void Status::set_error_code(::milvus::grpc::ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.Status.error_code)
}

// optional string reason = 2;
inline void Status::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::reason() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Status.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.Status.reason)
}
inline void Status::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.Status.reason)
}
inline void Status::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.Status.reason)
}
inline ::std::string* Status::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.Status.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_reason() {
  // @@protoc_insertion_point(field_release:milvus.grpc.Status.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.Status.reason)
}

// -------------------------------------------------------------------

// KeyValuePair

// optional string key = 1;
inline void KeyValuePair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.KeyValuePair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValuePair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.KeyValuePair.key)
}
inline ::std::string* KeyValuePair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.KeyValuePair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:milvus.grpc.KeyValuePair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValuePair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.KeyValuePair.key)
}

// optional string value = 2;
inline void KeyValuePair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.KeyValuePair.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValuePair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.KeyValuePair.value)
}
inline ::std::string* KeyValuePair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.KeyValuePair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:milvus.grpc.KeyValuePair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValuePair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.KeyValuePair.value)
}

// -------------------------------------------------------------------

// CollectionName

// optional string collection_name = 1;
inline void CollectionName::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CollectionName::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.CollectionName.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionName::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.CollectionName.collection_name)
}
inline void CollectionName::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.CollectionName.collection_name)
}
inline void CollectionName::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.CollectionName.collection_name)
}
inline ::std::string* CollectionName::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.CollectionName.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectionName::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.CollectionName.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionName::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.CollectionName.collection_name)
}

// -------------------------------------------------------------------

// CollectionNameList

// optional .milvus.grpc.Status status = 1;
inline bool CollectionNameList::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void CollectionNameList::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& CollectionNameList::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.CollectionNameList.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* CollectionNameList::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.CollectionNameList.status)
  return status_;
}
inline ::milvus::grpc::Status* CollectionNameList::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.CollectionNameList.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void CollectionNameList::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.CollectionNameList.status)
}

// repeated string collection_names = 2;
inline int CollectionNameList::collection_names_size() const {
  return collection_names_.size();
}
inline void CollectionNameList::clear_collection_names() {
  collection_names_.Clear();
}
inline const ::std::string& CollectionNameList::collection_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.CollectionNameList.collection_names)
  return collection_names_.Get(index);
}
inline ::std::string* CollectionNameList::mutable_collection_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.CollectionNameList.collection_names)
  return collection_names_.Mutable(index);
}
inline void CollectionNameList::set_collection_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.grpc.CollectionNameList.collection_names)
  collection_names_.Mutable(index)->assign(value);
}
inline void CollectionNameList::set_collection_names(int index, const char* value) {
  collection_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.grpc.CollectionNameList.collection_names)
}
inline void CollectionNameList::set_collection_names(int index, const char* value, size_t size) {
  collection_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.CollectionNameList.collection_names)
}
inline ::std::string* CollectionNameList::add_collection_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.grpc.CollectionNameList.collection_names)
  return collection_names_.Add();
}
inline void CollectionNameList::add_collection_names(const ::std::string& value) {
  collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.CollectionNameList.collection_names)
}
inline void CollectionNameList::add_collection_names(const char* value) {
  collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.grpc.CollectionNameList.collection_names)
}
inline void CollectionNameList::add_collection_names(const char* value, size_t size) {
  collection_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.grpc.CollectionNameList.collection_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CollectionNameList::collection_names() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.CollectionNameList.collection_names)
  return collection_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CollectionNameList::mutable_collection_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.CollectionNameList.collection_names)
  return &collection_names_;
}

// -------------------------------------------------------------------

// FieldName

// optional string collection_name = 1;
inline void FieldName::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FieldName::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldName.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldName::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.FieldName.collection_name)
}
inline void FieldName::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.FieldName.collection_name)
}
inline void FieldName::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.FieldName.collection_name)
}
inline ::std::string* FieldName::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.FieldName.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldName::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.FieldName.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldName::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.FieldName.collection_name)
}

// optional string field_name = 2;
inline void FieldName::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FieldName::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldName.field_name)
  return field_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldName::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.FieldName.field_name)
}
inline void FieldName::set_field_name(const char* value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.FieldName.field_name)
}
inline void FieldName::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.FieldName.field_name)
}
inline ::std::string* FieldName::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.FieldName.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldName::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.FieldName.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldName::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.FieldName.field_name)
}

// -------------------------------------------------------------------

// Mapping

// optional .milvus.grpc.Status status = 1;
inline bool Mapping::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void Mapping::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& Mapping::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Mapping.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* Mapping::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.Mapping.status)
  return status_;
}
inline ::milvus::grpc::Status* Mapping::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.Mapping.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void Mapping::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.Mapping.status)
}

// optional string collection_name = 2;
inline void Mapping::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mapping::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Mapping.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mapping::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.Mapping.collection_name)
}
inline void Mapping::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.Mapping.collection_name)
}
inline void Mapping::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.Mapping.collection_name)
}
inline ::std::string* Mapping::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.Mapping.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mapping::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.Mapping.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mapping::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.Mapping.collection_name)
}

// repeated .milvus.grpc.FieldParam fields = 3;
inline int Mapping::fields_size() const {
  return fields_.size();
}
inline void Mapping::clear_fields() {
  fields_.Clear();
}
inline const ::milvus::grpc::FieldParam& Mapping::fields(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Mapping.fields)
  return fields_.Get(index);
}
inline ::milvus::grpc::FieldParam* Mapping::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.Mapping.fields)
  return fields_.Mutable(index);
}
inline ::milvus::grpc::FieldParam* Mapping::add_fields() {
  // @@protoc_insertion_point(field_add:milvus.grpc.Mapping.fields)
  return fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::FieldParam >*
Mapping::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.Mapping.fields)
  return &fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::FieldParam >&
Mapping::fields() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.Mapping.fields)
  return fields_;
}

// repeated .milvus.grpc.KeyValuePair extra_params = 4;
inline int Mapping::extra_params_size() const {
  return extra_params_.size();
}
inline void Mapping::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& Mapping::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Mapping.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* Mapping::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.Mapping.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* Mapping::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.Mapping.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
Mapping::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.Mapping.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
Mapping::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.Mapping.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// MappingList

// optional .milvus.grpc.Status status = 1;
inline bool MappingList::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void MappingList::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& MappingList::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.MappingList.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* MappingList::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.MappingList.status)
  return status_;
}
inline ::milvus::grpc::Status* MappingList::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.MappingList.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void MappingList::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.MappingList.status)
}

// repeated .milvus.grpc.Mapping mapping_list = 2;
inline int MappingList::mapping_list_size() const {
  return mapping_list_.size();
}
inline void MappingList::clear_mapping_list() {
  mapping_list_.Clear();
}
inline const ::milvus::grpc::Mapping& MappingList::mapping_list(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.MappingList.mapping_list)
  return mapping_list_.Get(index);
}
inline ::milvus::grpc::Mapping* MappingList::mutable_mapping_list(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.MappingList.mapping_list)
  return mapping_list_.Mutable(index);
}
inline ::milvus::grpc::Mapping* MappingList::add_mapping_list() {
  // @@protoc_insertion_point(field_add:milvus.grpc.MappingList.mapping_list)
  return mapping_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::Mapping >*
MappingList::mutable_mapping_list() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.MappingList.mapping_list)
  return &mapping_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::Mapping >&
MappingList::mapping_list() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.MappingList.mapping_list)
  return mapping_list_;
}

// -------------------------------------------------------------------

// PartitionParam

// optional string collection_name = 1;
inline void PartitionParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PartitionParam::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.PartitionParam.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionParam::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.PartitionParam.collection_name)
}
inline void PartitionParam::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.PartitionParam.collection_name)
}
inline void PartitionParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.PartitionParam.collection_name)
}
inline ::std::string* PartitionParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.PartitionParam.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PartitionParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.PartitionParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionParam::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.PartitionParam.collection_name)
}

// optional string tag = 2;
inline void PartitionParam::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PartitionParam::tag() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.PartitionParam.tag)
  return tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionParam::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.PartitionParam.tag)
}
inline void PartitionParam::set_tag(const char* value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.PartitionParam.tag)
}
inline void PartitionParam::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.PartitionParam.tag)
}
inline ::std::string* PartitionParam::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.PartitionParam.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PartitionParam::release_tag() {
  // @@protoc_insertion_point(field_release:milvus.grpc.PartitionParam.tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionParam::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.PartitionParam.tag)
}

// -------------------------------------------------------------------

// PartitionList

// optional .milvus.grpc.Status status = 1;
inline bool PartitionList::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void PartitionList::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& PartitionList::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.PartitionList.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* PartitionList::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.PartitionList.status)
  return status_;
}
inline ::milvus::grpc::Status* PartitionList::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.PartitionList.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void PartitionList::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.PartitionList.status)
}

// repeated string partition_tag_array = 2;
inline int PartitionList::partition_tag_array_size() const {
  return partition_tag_array_.size();
}
inline void PartitionList::clear_partition_tag_array() {
  partition_tag_array_.Clear();
}
inline const ::std::string& PartitionList::partition_tag_array(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.PartitionList.partition_tag_array)
  return partition_tag_array_.Get(index);
}
inline ::std::string* PartitionList::mutable_partition_tag_array(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.PartitionList.partition_tag_array)
  return partition_tag_array_.Mutable(index);
}
inline void PartitionList::set_partition_tag_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.grpc.PartitionList.partition_tag_array)
  partition_tag_array_.Mutable(index)->assign(value);
}
inline void PartitionList::set_partition_tag_array(int index, const char* value) {
  partition_tag_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.grpc.PartitionList.partition_tag_array)
}
inline void PartitionList::set_partition_tag_array(int index, const char* value, size_t size) {
  partition_tag_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.PartitionList.partition_tag_array)
}
inline ::std::string* PartitionList::add_partition_tag_array() {
  // @@protoc_insertion_point(field_add_mutable:milvus.grpc.PartitionList.partition_tag_array)
  return partition_tag_array_.Add();
}
inline void PartitionList::add_partition_tag_array(const ::std::string& value) {
  partition_tag_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.PartitionList.partition_tag_array)
}
inline void PartitionList::add_partition_tag_array(const char* value) {
  partition_tag_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.grpc.PartitionList.partition_tag_array)
}
inline void PartitionList::add_partition_tag_array(const char* value, size_t size) {
  partition_tag_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.grpc.PartitionList.partition_tag_array)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PartitionList::partition_tag_array() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.PartitionList.partition_tag_array)
  return partition_tag_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PartitionList::mutable_partition_tag_array() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.PartitionList.partition_tag_array)
  return &partition_tag_array_;
}

// -------------------------------------------------------------------

// VectorRowRecord

// repeated float float_data = 1;
inline int VectorRowRecord::float_data_size() const {
  return float_data_.size();
}
inline void VectorRowRecord::clear_float_data() {
  float_data_.Clear();
}
inline float VectorRowRecord::float_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorRowRecord.float_data)
  return float_data_.Get(index);
}
inline void VectorRowRecord::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.VectorRowRecord.float_data)
}
inline void VectorRowRecord::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.VectorRowRecord.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
VectorRowRecord::float_data() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.VectorRowRecord.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
VectorRowRecord::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.VectorRowRecord.float_data)
  return &float_data_;
}

// optional bytes binary_data = 2;
inline void VectorRowRecord::clear_binary_data() {
  binary_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VectorRowRecord::binary_data() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorRowRecord.binary_data)
  return binary_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorRowRecord::set_binary_data(const ::std::string& value) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.VectorRowRecord.binary_data)
}
inline void VectorRowRecord::set_binary_data(const char* value) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.VectorRowRecord.binary_data)
}
inline void VectorRowRecord::set_binary_data(const void* value, size_t size) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.VectorRowRecord.binary_data)
}
inline ::std::string* VectorRowRecord::mutable_binary_data() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.VectorRowRecord.binary_data)
  return binary_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VectorRowRecord::release_binary_data() {
  // @@protoc_insertion_point(field_release:milvus.grpc.VectorRowRecord.binary_data)
  
  return binary_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorRowRecord::set_allocated_binary_data(::std::string* binary_data) {
  if (binary_data != NULL) {
    
  } else {
    
  }
  binary_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_data);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.VectorRowRecord.binary_data)
}

// -------------------------------------------------------------------

// EntityIds

// optional .milvus.grpc.Status status = 1;
inline bool EntityIds::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void EntityIds::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& EntityIds::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.EntityIds.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* EntityIds::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.EntityIds.status)
  return status_;
}
inline ::milvus::grpc::Status* EntityIds::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.EntityIds.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void EntityIds::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.EntityIds.status)
}

// repeated int64 entity_id_array = 2;
inline int EntityIds::entity_id_array_size() const {
  return entity_id_array_.size();
}
inline void EntityIds::clear_entity_id_array() {
  entity_id_array_.Clear();
}
inline ::google::protobuf::int64 EntityIds::entity_id_array(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.EntityIds.entity_id_array)
  return entity_id_array_.Get(index);
}
inline void EntityIds::set_entity_id_array(int index, ::google::protobuf::int64 value) {
  entity_id_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.EntityIds.entity_id_array)
}
inline void EntityIds::add_entity_id_array(::google::protobuf::int64 value) {
  entity_id_array_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.EntityIds.entity_id_array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
EntityIds::entity_id_array() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.EntityIds.entity_id_array)
  return entity_id_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
EntityIds::mutable_entity_id_array() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.EntityIds.entity_id_array)
  return &entity_id_array_;
}

// -------------------------------------------------------------------

// VectorRecord

// repeated .milvus.grpc.VectorRowRecord records = 1;
inline int VectorRecord::records_size() const {
  return records_.size();
}
inline void VectorRecord::clear_records() {
  records_.Clear();
}
inline const ::milvus::grpc::VectorRowRecord& VectorRecord::records(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorRecord.records)
  return records_.Get(index);
}
inline ::milvus::grpc::VectorRowRecord* VectorRecord::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.VectorRecord.records)
  return records_.Mutable(index);
}
inline ::milvus::grpc::VectorRowRecord* VectorRecord::add_records() {
  // @@protoc_insertion_point(field_add:milvus.grpc.VectorRecord.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >*
VectorRecord::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.VectorRecord.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >&
VectorRecord::records() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.VectorRecord.records)
  return records_;
}

// -------------------------------------------------------------------

// VectorParam

// optional string json = 1;
inline void VectorParam::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VectorParam::json() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorParam.json)
  return json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorParam::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.VectorParam.json)
}
inline void VectorParam::set_json(const char* value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.VectorParam.json)
}
inline void VectorParam::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.VectorParam.json)
}
inline ::std::string* VectorParam::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.VectorParam.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VectorParam::release_json() {
  // @@protoc_insertion_point(field_release:milvus.grpc.VectorParam.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorParam::set_allocated_json(::std::string* json) {
  if (json != NULL) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.VectorParam.json)
}

// optional .milvus.grpc.VectorRecord row_record = 2;
inline bool VectorParam::has_row_record() const {
  return !_is_default_instance_ && row_record_ != NULL;
}
inline void VectorParam::clear_row_record() {
  if (GetArenaNoVirtual() == NULL && row_record_ != NULL) delete row_record_;
  row_record_ = NULL;
}
inline const ::milvus::grpc::VectorRecord& VectorParam::row_record() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorParam.row_record)
  return row_record_ != NULL ? *row_record_ : *default_instance_->row_record_;
}
inline ::milvus::grpc::VectorRecord* VectorParam::mutable_row_record() {
  
  if (row_record_ == NULL) {
    row_record_ = new ::milvus::grpc::VectorRecord;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.VectorParam.row_record)
  return row_record_;
}
inline ::milvus::grpc::VectorRecord* VectorParam::release_row_record() {
  // @@protoc_insertion_point(field_release:milvus.grpc.VectorParam.row_record)
  
  ::milvus::grpc::VectorRecord* temp = row_record_;
  row_record_ = NULL;
  return temp;
}
inline void VectorParam::set_allocated_row_record(::milvus::grpc::VectorRecord* row_record) {
  delete row_record_;
  row_record_ = row_record;
  if (row_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.VectorParam.row_record)
}

// -------------------------------------------------------------------

// FieldMeta

// optional string field_name = 1;
inline void FieldMeta::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FieldMeta::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldMeta.field_name)
  return field_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldMeta::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.FieldMeta.field_name)
}
inline void FieldMeta::set_field_name(const char* value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.FieldMeta.field_name)
}
inline void FieldMeta::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.FieldMeta.field_name)
}
inline ::std::string* FieldMeta::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.FieldMeta.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldMeta::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.FieldMeta.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldMeta::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.FieldMeta.field_name)
}

// optional .milvus.grpc.DataType type = 2;
inline void FieldMeta::clear_type() {
  type_ = 0;
}
inline ::milvus::grpc::DataType FieldMeta::type() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldMeta.type)
  return static_cast< ::milvus::grpc::DataType >(type_);
}
inline void FieldMeta::set_type(::milvus::grpc::DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.FieldMeta.type)
}

// optional int64 dim = 3;
inline void FieldMeta::clear_dim() {
  dim_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FieldMeta::dim() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldMeta.dim)
  return dim_;
}
inline void FieldMeta::set_dim(::google::protobuf::int64 value) {
  
  dim_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.FieldMeta.dim)
}

// -------------------------------------------------------------------

// Schema

// repeated .milvus.grpc.FieldMeta field_metas = 1;
inline int Schema::field_metas_size() const {
  return field_metas_.size();
}
inline void Schema::clear_field_metas() {
  field_metas_.Clear();
}
inline const ::milvus::grpc::FieldMeta& Schema::field_metas(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Schema.field_metas)
  return field_metas_.Get(index);
}
inline ::milvus::grpc::FieldMeta* Schema::mutable_field_metas(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.Schema.field_metas)
  return field_metas_.Mutable(index);
}
inline ::milvus::grpc::FieldMeta* Schema::add_field_metas() {
  // @@protoc_insertion_point(field_add:milvus.grpc.Schema.field_metas)
  return field_metas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::FieldMeta >*
Schema::mutable_field_metas() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.Schema.field_metas)
  return &field_metas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::FieldMeta >&
Schema::field_metas() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.Schema.field_metas)
  return field_metas_;
}

// -------------------------------------------------------------------

// RowData

// optional bytes blob = 1;
inline void RowData::clear_blob() {
  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RowData::blob() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.RowData.blob)
  return blob_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RowData::set_blob(const ::std::string& value) {
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.RowData.blob)
}
inline void RowData::set_blob(const char* value) {
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.RowData.blob)
}
inline void RowData::set_blob(const void* value, size_t size) {
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.RowData.blob)
}
inline ::std::string* RowData::mutable_blob() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.RowData.blob)
  return blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RowData::release_blob() {
  // @@protoc_insertion_point(field_release:milvus.grpc.RowData.blob)
  
  return blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RowData::set_allocated_blob(::std::string* blob) {
  if (blob != NULL) {
    
  } else {
    
  }
  blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blob);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.RowData.blob)
}

// -------------------------------------------------------------------

// InsertParam

// optional string collection_name = 1;
inline void InsertParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertParam::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertParam.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertParam::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.InsertParam.collection_name)
}
inline void InsertParam::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.InsertParam.collection_name)
}
inline void InsertParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.InsertParam.collection_name)
}
inline ::std::string* InsertParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.InsertParam.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.InsertParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertParam::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.InsertParam.collection_name)
}

// optional .milvus.grpc.Schema schema = 2;
inline bool InsertParam::has_schema() const {
  return !_is_default_instance_ && schema_ != NULL;
}
inline void InsertParam::clear_schema() {
  if (GetArenaNoVirtual() == NULL && schema_ != NULL) delete schema_;
  schema_ = NULL;
}
inline const ::milvus::grpc::Schema& InsertParam::schema() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertParam.schema)
  return schema_ != NULL ? *schema_ : *default_instance_->schema_;
}
inline ::milvus::grpc::Schema* InsertParam::mutable_schema() {
  
  if (schema_ == NULL) {
    schema_ = new ::milvus::grpc::Schema;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.InsertParam.schema)
  return schema_;
}
inline ::milvus::grpc::Schema* InsertParam::release_schema() {
  // @@protoc_insertion_point(field_release:milvus.grpc.InsertParam.schema)
  
  ::milvus::grpc::Schema* temp = schema_;
  schema_ = NULL;
  return temp;
}
inline void InsertParam::set_allocated_schema(::milvus::grpc::Schema* schema) {
  delete schema_;
  schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.InsertParam.schema)
}

// repeated .milvus.grpc.RowData rows_data = 3;
inline int InsertParam::rows_data_size() const {
  return rows_data_.size();
}
inline void InsertParam::clear_rows_data() {
  rows_data_.Clear();
}
inline const ::milvus::grpc::RowData& InsertParam::rows_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertParam.rows_data)
  return rows_data_.Get(index);
}
inline ::milvus::grpc::RowData* InsertParam::mutable_rows_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.InsertParam.rows_data)
  return rows_data_.Mutable(index);
}
inline ::milvus::grpc::RowData* InsertParam::add_rows_data() {
  // @@protoc_insertion_point(field_add:milvus.grpc.InsertParam.rows_data)
  return rows_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::RowData >*
InsertParam::mutable_rows_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.InsertParam.rows_data)
  return &rows_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::RowData >&
InsertParam::rows_data() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.InsertParam.rows_data)
  return rows_data_;
}

// repeated int64 entity_id_array = 4;
inline int InsertParam::entity_id_array_size() const {
  return entity_id_array_.size();
}
inline void InsertParam::clear_entity_id_array() {
  entity_id_array_.Clear();
}
inline ::google::protobuf::int64 InsertParam::entity_id_array(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertParam.entity_id_array)
  return entity_id_array_.Get(index);
}
inline void InsertParam::set_entity_id_array(int index, ::google::protobuf::int64 value) {
  entity_id_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.InsertParam.entity_id_array)
}
inline void InsertParam::add_entity_id_array(::google::protobuf::int64 value) {
  entity_id_array_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.InsertParam.entity_id_array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
InsertParam::entity_id_array() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.InsertParam.entity_id_array)
  return entity_id_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
InsertParam::mutable_entity_id_array() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.InsertParam.entity_id_array)
  return &entity_id_array_;
}

// optional string partition_tag = 5;
inline void InsertParam::clear_partition_tag() {
  partition_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertParam::partition_tag() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertParam.partition_tag)
  return partition_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertParam::set_partition_tag(const ::std::string& value) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.InsertParam.partition_tag)
}
inline void InsertParam::set_partition_tag(const char* value) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.InsertParam.partition_tag)
}
inline void InsertParam::set_partition_tag(const char* value, size_t size) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.InsertParam.partition_tag)
}
inline ::std::string* InsertParam::mutable_partition_tag() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.InsertParam.partition_tag)
  return partition_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertParam::release_partition_tag() {
  // @@protoc_insertion_point(field_release:milvus.grpc.InsertParam.partition_tag)
  
  return partition_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertParam::set_allocated_partition_tag(::std::string* partition_tag) {
  if (partition_tag != NULL) {
    
  } else {
    
  }
  partition_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partition_tag);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.InsertParam.partition_tag)
}

// repeated .milvus.grpc.KeyValuePair extra_params = 6;
inline int InsertParam::extra_params_size() const {
  return extra_params_.size();
}
inline void InsertParam::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& InsertParam::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertParam.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* InsertParam::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.InsertParam.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* InsertParam::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.InsertParam.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
InsertParam::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.InsertParam.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
InsertParam::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.InsertParam.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// SearchParam

// optional string collection_name = 1;
inline void SearchParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchParam::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchParam.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchParam::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.SearchParam.collection_name)
}
inline void SearchParam::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.SearchParam.collection_name)
}
inline void SearchParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.SearchParam.collection_name)
}
inline ::std::string* SearchParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchParam.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.SearchParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchParam::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.SearchParam.collection_name)
}

// repeated .milvus.grpc.VectorParam vector_param = 2;
inline int SearchParam::vector_param_size() const {
  return vector_param_.size();
}
inline void SearchParam::clear_vector_param() {
  vector_param_.Clear();
}
inline const ::milvus::grpc::VectorParam& SearchParam::vector_param(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchParam.vector_param)
  return vector_param_.Get(index);
}
inline ::milvus::grpc::VectorParam* SearchParam::mutable_vector_param(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchParam.vector_param)
  return vector_param_.Mutable(index);
}
inline ::milvus::grpc::VectorParam* SearchParam::add_vector_param() {
  // @@protoc_insertion_point(field_add:milvus.grpc.SearchParam.vector_param)
  return vector_param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorParam >*
SearchParam::mutable_vector_param() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.SearchParam.vector_param)
  return &vector_param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorParam >&
SearchParam::vector_param() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.SearchParam.vector_param)
  return vector_param_;
}

// optional string dsl = 3;
inline void SearchParam::clear_dsl() {
  dsl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchParam::dsl() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchParam.dsl)
  return dsl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchParam::set_dsl(const ::std::string& value) {
  
  dsl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.SearchParam.dsl)
}
inline void SearchParam::set_dsl(const char* value) {
  
  dsl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.SearchParam.dsl)
}
inline void SearchParam::set_dsl(const char* value, size_t size) {
  
  dsl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.SearchParam.dsl)
}
inline ::std::string* SearchParam::mutable_dsl() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchParam.dsl)
  return dsl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchParam::release_dsl() {
  // @@protoc_insertion_point(field_release:milvus.grpc.SearchParam.dsl)
  
  return dsl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchParam::set_allocated_dsl(::std::string* dsl) {
  if (dsl != NULL) {
    
  } else {
    
  }
  dsl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dsl);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.SearchParam.dsl)
}

// repeated string partition_tag = 4;
inline int SearchParam::partition_tag_size() const {
  return partition_tag_.size();
}
inline void SearchParam::clear_partition_tag() {
  partition_tag_.Clear();
}
inline const ::std::string& SearchParam::partition_tag(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchParam.partition_tag)
  return partition_tag_.Get(index);
}
inline ::std::string* SearchParam::mutable_partition_tag(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchParam.partition_tag)
  return partition_tag_.Mutable(index);
}
inline void SearchParam::set_partition_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.grpc.SearchParam.partition_tag)
  partition_tag_.Mutable(index)->assign(value);
}
inline void SearchParam::set_partition_tag(int index, const char* value) {
  partition_tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.grpc.SearchParam.partition_tag)
}
inline void SearchParam::set_partition_tag(int index, const char* value, size_t size) {
  partition_tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.SearchParam.partition_tag)
}
inline ::std::string* SearchParam::add_partition_tag() {
  // @@protoc_insertion_point(field_add_mutable:milvus.grpc.SearchParam.partition_tag)
  return partition_tag_.Add();
}
inline void SearchParam::add_partition_tag(const ::std::string& value) {
  partition_tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.SearchParam.partition_tag)
}
inline void SearchParam::add_partition_tag(const char* value) {
  partition_tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.grpc.SearchParam.partition_tag)
}
inline void SearchParam::add_partition_tag(const char* value, size_t size) {
  partition_tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.grpc.SearchParam.partition_tag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchParam::partition_tag() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.SearchParam.partition_tag)
  return partition_tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchParam::mutable_partition_tag() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.SearchParam.partition_tag)
  return &partition_tag_;
}

// repeated .milvus.grpc.KeyValuePair extra_params = 5;
inline int SearchParam::extra_params_size() const {
  return extra_params_.size();
}
inline void SearchParam::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& SearchParam::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchParam.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* SearchParam::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchParam.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* SearchParam::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.SearchParam.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
SearchParam::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.SearchParam.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
SearchParam::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.SearchParam.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// SearchInSegmentParam

// repeated string file_id_array = 1;
inline int SearchInSegmentParam::file_id_array_size() const {
  return file_id_array_.size();
}
inline void SearchInSegmentParam::clear_file_id_array() {
  file_id_array_.Clear();
}
inline const ::std::string& SearchInSegmentParam::file_id_array(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchInSegmentParam.file_id_array)
  return file_id_array_.Get(index);
}
inline ::std::string* SearchInSegmentParam::mutable_file_id_array(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchInSegmentParam.file_id_array)
  return file_id_array_.Mutable(index);
}
inline void SearchInSegmentParam::set_file_id_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.grpc.SearchInSegmentParam.file_id_array)
  file_id_array_.Mutable(index)->assign(value);
}
inline void SearchInSegmentParam::set_file_id_array(int index, const char* value) {
  file_id_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.grpc.SearchInSegmentParam.file_id_array)
}
inline void SearchInSegmentParam::set_file_id_array(int index, const char* value, size_t size) {
  file_id_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.SearchInSegmentParam.file_id_array)
}
inline ::std::string* SearchInSegmentParam::add_file_id_array() {
  // @@protoc_insertion_point(field_add_mutable:milvus.grpc.SearchInSegmentParam.file_id_array)
  return file_id_array_.Add();
}
inline void SearchInSegmentParam::add_file_id_array(const ::std::string& value) {
  file_id_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.SearchInSegmentParam.file_id_array)
}
inline void SearchInSegmentParam::add_file_id_array(const char* value) {
  file_id_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.grpc.SearchInSegmentParam.file_id_array)
}
inline void SearchInSegmentParam::add_file_id_array(const char* value, size_t size) {
  file_id_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.grpc.SearchInSegmentParam.file_id_array)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchInSegmentParam::file_id_array() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.SearchInSegmentParam.file_id_array)
  return file_id_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchInSegmentParam::mutable_file_id_array() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.SearchInSegmentParam.file_id_array)
  return &file_id_array_;
}

// optional .milvus.grpc.SearchParam search_param = 2;
inline bool SearchInSegmentParam::has_search_param() const {
  return !_is_default_instance_ && search_param_ != NULL;
}
inline void SearchInSegmentParam::clear_search_param() {
  if (GetArenaNoVirtual() == NULL && search_param_ != NULL) delete search_param_;
  search_param_ = NULL;
}
inline const ::milvus::grpc::SearchParam& SearchInSegmentParam::search_param() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchInSegmentParam.search_param)
  return search_param_ != NULL ? *search_param_ : *default_instance_->search_param_;
}
inline ::milvus::grpc::SearchParam* SearchInSegmentParam::mutable_search_param() {
  
  if (search_param_ == NULL) {
    search_param_ = new ::milvus::grpc::SearchParam;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchInSegmentParam.search_param)
  return search_param_;
}
inline ::milvus::grpc::SearchParam* SearchInSegmentParam::release_search_param() {
  // @@protoc_insertion_point(field_release:milvus.grpc.SearchInSegmentParam.search_param)
  
  ::milvus::grpc::SearchParam* temp = search_param_;
  search_param_ = NULL;
  return temp;
}
inline void SearchInSegmentParam::set_allocated_search_param(::milvus::grpc::SearchParam* search_param) {
  delete search_param_;
  search_param_ = search_param;
  if (search_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.SearchInSegmentParam.search_param)
}

// -------------------------------------------------------------------

// Entities

// optional .milvus.grpc.Status status = 1;
inline bool Entities::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void Entities::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& Entities::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Entities.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* Entities::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.Entities.status)
  return status_;
}
inline ::milvus::grpc::Status* Entities::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.Entities.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void Entities::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.Entities.status)
}

// repeated int64 ids = 2;
inline int Entities::ids_size() const {
  return ids_.size();
}
inline void Entities::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::int64 Entities::ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Entities.ids)
  return ids_.Get(index);
}
inline void Entities::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.Entities.ids)
}
inline void Entities::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.Entities.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Entities::ids() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.Entities.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Entities::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.Entities.ids)
  return &ids_;
}

// repeated bool valid_row = 3;
inline int Entities::valid_row_size() const {
  return valid_row_.size();
}
inline void Entities::clear_valid_row() {
  valid_row_.Clear();
}
inline bool Entities::valid_row(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Entities.valid_row)
  return valid_row_.Get(index);
}
inline void Entities::set_valid_row(int index, bool value) {
  valid_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.Entities.valid_row)
}
inline void Entities::add_valid_row(bool value) {
  valid_row_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.Entities.valid_row)
}
inline const ::google::protobuf::RepeatedField< bool >&
Entities::valid_row() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.Entities.valid_row)
  return valid_row_;
}
inline ::google::protobuf::RepeatedField< bool >*
Entities::mutable_valid_row() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.Entities.valid_row)
  return &valid_row_;
}

// repeated .milvus.grpc.RowData rows_data = 4;
inline int Entities::rows_data_size() const {
  return rows_data_.size();
}
inline void Entities::clear_rows_data() {
  rows_data_.Clear();
}
inline const ::milvus::grpc::RowData& Entities::rows_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Entities.rows_data)
  return rows_data_.Get(index);
}
inline ::milvus::grpc::RowData* Entities::mutable_rows_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.Entities.rows_data)
  return rows_data_.Mutable(index);
}
inline ::milvus::grpc::RowData* Entities::add_rows_data() {
  // @@protoc_insertion_point(field_add:milvus.grpc.Entities.rows_data)
  return rows_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::RowData >*
Entities::mutable_rows_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.Entities.rows_data)
  return &rows_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::RowData >&
Entities::rows_data() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.Entities.rows_data)
  return rows_data_;
}

// -------------------------------------------------------------------

// QueryResult

// optional .milvus.grpc.Status status = 1;
inline bool QueryResult::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void QueryResult::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& QueryResult::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.QueryResult.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* QueryResult::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.QueryResult.status)
  return status_;
}
inline ::milvus::grpc::Status* QueryResult::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.QueryResult.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void QueryResult::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.QueryResult.status)
}

// optional .milvus.grpc.Entities entities = 2;
inline bool QueryResult::has_entities() const {
  return !_is_default_instance_ && entities_ != NULL;
}
inline void QueryResult::clear_entities() {
  if (GetArenaNoVirtual() == NULL && entities_ != NULL) delete entities_;
  entities_ = NULL;
}
inline const ::milvus::grpc::Entities& QueryResult::entities() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.QueryResult.entities)
  return entities_ != NULL ? *entities_ : *default_instance_->entities_;
}
inline ::milvus::grpc::Entities* QueryResult::mutable_entities() {
  
  if (entities_ == NULL) {
    entities_ = new ::milvus::grpc::Entities;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.QueryResult.entities)
  return entities_;
}
inline ::milvus::grpc::Entities* QueryResult::release_entities() {
  // @@protoc_insertion_point(field_release:milvus.grpc.QueryResult.entities)
  
  ::milvus::grpc::Entities* temp = entities_;
  entities_ = NULL;
  return temp;
}
inline void QueryResult::set_allocated_entities(::milvus::grpc::Entities* entities) {
  delete entities_;
  entities_ = entities;
  if (entities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.QueryResult.entities)
}

// optional int64 row_num = 3;
inline void QueryResult::clear_row_num() {
  row_num_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryResult::row_num() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.QueryResult.row_num)
  return row_num_;
}
inline void QueryResult::set_row_num(::google::protobuf::int64 value) {
  
  row_num_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.QueryResult.row_num)
}

// repeated float scores = 4;
inline int QueryResult::scores_size() const {
  return scores_.size();
}
inline void QueryResult::clear_scores() {
  scores_.Clear();
}
inline float QueryResult::scores(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.QueryResult.scores)
  return scores_.Get(index);
}
inline void QueryResult::set_scores(int index, float value) {
  scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.QueryResult.scores)
}
inline void QueryResult::add_scores(float value) {
  scores_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.QueryResult.scores)
}
inline const ::google::protobuf::RepeatedField< float >&
QueryResult::scores() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.QueryResult.scores)
  return scores_;
}
inline ::google::protobuf::RepeatedField< float >*
QueryResult::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.QueryResult.scores)
  return &scores_;
}

// repeated float distances = 5;
inline int QueryResult::distances_size() const {
  return distances_.size();
}
inline void QueryResult::clear_distances() {
  distances_.Clear();
}
inline float QueryResult::distances(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.QueryResult.distances)
  return distances_.Get(index);
}
inline void QueryResult::set_distances(int index, float value) {
  distances_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.QueryResult.distances)
}
inline void QueryResult::add_distances(float value) {
  distances_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.QueryResult.distances)
}
inline const ::google::protobuf::RepeatedField< float >&
QueryResult::distances() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.QueryResult.distances)
  return distances_;
}
inline ::google::protobuf::RepeatedField< float >*
QueryResult::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.QueryResult.distances)
  return &distances_;
}

// repeated .milvus.grpc.KeyValuePair extra_params = 6;
inline int QueryResult::extra_params_size() const {
  return extra_params_.size();
}
inline void QueryResult::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& QueryResult::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.QueryResult.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* QueryResult::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.QueryResult.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* QueryResult::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.QueryResult.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
QueryResult::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.QueryResult.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
QueryResult::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.QueryResult.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// StringReply

// optional .milvus.grpc.Status status = 1;
inline bool StringReply::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void StringReply::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& StringReply::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.StringReply.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* StringReply::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.StringReply.status)
  return status_;
}
inline ::milvus::grpc::Status* StringReply::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.StringReply.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void StringReply::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.StringReply.status)
}

// optional string string_reply = 2;
inline void StringReply::clear_string_reply() {
  string_reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StringReply::string_reply() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.StringReply.string_reply)
  return string_reply_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StringReply::set_string_reply(const ::std::string& value) {
  
  string_reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.StringReply.string_reply)
}
inline void StringReply::set_string_reply(const char* value) {
  
  string_reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.StringReply.string_reply)
}
inline void StringReply::set_string_reply(const char* value, size_t size) {
  
  string_reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.StringReply.string_reply)
}
inline ::std::string* StringReply::mutable_string_reply() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.StringReply.string_reply)
  return string_reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringReply::release_string_reply() {
  // @@protoc_insertion_point(field_release:milvus.grpc.StringReply.string_reply)
  
  return string_reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StringReply::set_allocated_string_reply(::std::string* string_reply) {
  if (string_reply != NULL) {
    
  } else {
    
  }
  string_reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_reply);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.StringReply.string_reply)
}

// -------------------------------------------------------------------

// BoolReply

// optional .milvus.grpc.Status status = 1;
inline bool BoolReply::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void BoolReply::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& BoolReply::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.BoolReply.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* BoolReply::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.BoolReply.status)
  return status_;
}
inline ::milvus::grpc::Status* BoolReply::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.BoolReply.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void BoolReply::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.BoolReply.status)
}

// optional bool bool_reply = 2;
inline void BoolReply::clear_bool_reply() {
  bool_reply_ = false;
}
inline bool BoolReply::bool_reply() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.BoolReply.bool_reply)
  return bool_reply_;
}
inline void BoolReply::set_bool_reply(bool value) {
  
  bool_reply_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.BoolReply.bool_reply)
}

// -------------------------------------------------------------------

// CollectionRowCount

// optional .milvus.grpc.Status status = 1;
inline bool CollectionRowCount::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void CollectionRowCount::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& CollectionRowCount::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.CollectionRowCount.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* CollectionRowCount::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.CollectionRowCount.status)
  return status_;
}
inline ::milvus::grpc::Status* CollectionRowCount::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.CollectionRowCount.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void CollectionRowCount::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.CollectionRowCount.status)
}

// optional int64 collection_row_count = 2;
inline void CollectionRowCount::clear_collection_row_count() {
  collection_row_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CollectionRowCount::collection_row_count() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.CollectionRowCount.collection_row_count)
  return collection_row_count_;
}
inline void CollectionRowCount::set_collection_row_count(::google::protobuf::int64 value) {
  
  collection_row_count_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.CollectionRowCount.collection_row_count)
}

// -------------------------------------------------------------------

// Command

// optional string cmd = 1;
inline void Command::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::cmd() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Command.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.Command.cmd)
}
inline void Command::set_cmd(const char* value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.Command.cmd)
}
inline void Command::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.Command.cmd)
}
inline ::std::string* Command::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.Command.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_cmd() {
  // @@protoc_insertion_point(field_release:milvus.grpc.Command.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.Command.cmd)
}

// -------------------------------------------------------------------

// IndexParam

// optional .milvus.grpc.Status status = 1;
inline bool IndexParam::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void IndexParam::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& IndexParam::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.IndexParam.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* IndexParam::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.IndexParam.status)
  return status_;
}
inline ::milvus::grpc::Status* IndexParam::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.IndexParam.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void IndexParam::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.IndexParam.status)
}

// optional string collection_name = 2;
inline void IndexParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexParam::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.IndexParam.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexParam::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.IndexParam.collection_name)
}
inline void IndexParam::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.IndexParam.collection_name)
}
inline void IndexParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.IndexParam.collection_name)
}
inline ::std::string* IndexParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.IndexParam.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.IndexParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexParam::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.IndexParam.collection_name)
}

// optional string field_name = 3;
inline void IndexParam::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexParam::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.IndexParam.field_name)
  return field_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexParam::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.IndexParam.field_name)
}
inline void IndexParam::set_field_name(const char* value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.IndexParam.field_name)
}
inline void IndexParam::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.IndexParam.field_name)
}
inline ::std::string* IndexParam::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.IndexParam.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexParam::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.IndexParam.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexParam::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.IndexParam.field_name)
}

// optional string index_name = 4;
inline void IndexParam::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexParam::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.IndexParam.index_name)
  return index_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexParam::set_index_name(const ::std::string& value) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.IndexParam.index_name)
}
inline void IndexParam::set_index_name(const char* value) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.IndexParam.index_name)
}
inline void IndexParam::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.IndexParam.index_name)
}
inline ::std::string* IndexParam::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.IndexParam.index_name)
  return index_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexParam::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.IndexParam.index_name)
  
  return index_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexParam::set_allocated_index_name(::std::string* index_name) {
  if (index_name != NULL) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.IndexParam.index_name)
}

// repeated .milvus.grpc.KeyValuePair extra_params = 5;
inline int IndexParam::extra_params_size() const {
  return extra_params_.size();
}
inline void IndexParam::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& IndexParam::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.IndexParam.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* IndexParam::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.IndexParam.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* IndexParam::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.IndexParam.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
IndexParam::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.IndexParam.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
IndexParam::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.IndexParam.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// FlushParam

// repeated string collection_name_array = 1;
inline int FlushParam::collection_name_array_size() const {
  return collection_name_array_.size();
}
inline void FlushParam::clear_collection_name_array() {
  collection_name_array_.Clear();
}
inline const ::std::string& FlushParam::collection_name_array(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FlushParam.collection_name_array)
  return collection_name_array_.Get(index);
}
inline ::std::string* FlushParam::mutable_collection_name_array(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.FlushParam.collection_name_array)
  return collection_name_array_.Mutable(index);
}
inline void FlushParam::set_collection_name_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.grpc.FlushParam.collection_name_array)
  collection_name_array_.Mutable(index)->assign(value);
}
inline void FlushParam::set_collection_name_array(int index, const char* value) {
  collection_name_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.grpc.FlushParam.collection_name_array)
}
inline void FlushParam::set_collection_name_array(int index, const char* value, size_t size) {
  collection_name_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.FlushParam.collection_name_array)
}
inline ::std::string* FlushParam::add_collection_name_array() {
  // @@protoc_insertion_point(field_add_mutable:milvus.grpc.FlushParam.collection_name_array)
  return collection_name_array_.Add();
}
inline void FlushParam::add_collection_name_array(const ::std::string& value) {
  collection_name_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.FlushParam.collection_name_array)
}
inline void FlushParam::add_collection_name_array(const char* value) {
  collection_name_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.grpc.FlushParam.collection_name_array)
}
inline void FlushParam::add_collection_name_array(const char* value, size_t size) {
  collection_name_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.grpc.FlushParam.collection_name_array)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FlushParam::collection_name_array() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.FlushParam.collection_name_array)
  return collection_name_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FlushParam::mutable_collection_name_array() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.FlushParam.collection_name_array)
  return &collection_name_array_;
}

// -------------------------------------------------------------------

// CompactParam

// optional string collection_name = 1;
inline void CompactParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompactParam::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.CompactParam.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompactParam::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.CompactParam.collection_name)
}
inline void CompactParam::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.CompactParam.collection_name)
}
inline void CompactParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.CompactParam.collection_name)
}
inline ::std::string* CompactParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.CompactParam.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompactParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.CompactParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompactParam::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.CompactParam.collection_name)
}

// optional double threshold = 2;
inline void CompactParam::clear_threshold() {
  threshold_ = 0;
}
inline double CompactParam::threshold() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.CompactParam.threshold)
  return threshold_;
}
inline void CompactParam::set_threshold(double value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.CompactParam.threshold)
}

// -------------------------------------------------------------------

// DeleteByIDParam

// optional string collection_name = 1;
inline void DeleteByIDParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteByIDParam::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.DeleteByIDParam.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteByIDParam::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.DeleteByIDParam.collection_name)
}
inline void DeleteByIDParam::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.DeleteByIDParam.collection_name)
}
inline void DeleteByIDParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.DeleteByIDParam.collection_name)
}
inline ::std::string* DeleteByIDParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.DeleteByIDParam.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteByIDParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.DeleteByIDParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteByIDParam::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.DeleteByIDParam.collection_name)
}

// repeated int64 id_array = 2;
inline int DeleteByIDParam::id_array_size() const {
  return id_array_.size();
}
inline void DeleteByIDParam::clear_id_array() {
  id_array_.Clear();
}
inline ::google::protobuf::int64 DeleteByIDParam::id_array(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.DeleteByIDParam.id_array)
  return id_array_.Get(index);
}
inline void DeleteByIDParam::set_id_array(int index, ::google::protobuf::int64 value) {
  id_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.DeleteByIDParam.id_array)
}
inline void DeleteByIDParam::add_id_array(::google::protobuf::int64 value) {
  id_array_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.DeleteByIDParam.id_array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DeleteByIDParam::id_array() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.DeleteByIDParam.id_array)
  return id_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DeleteByIDParam::mutable_id_array() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.DeleteByIDParam.id_array)
  return &id_array_;
}

// -------------------------------------------------------------------

// CollectionInfo

// optional .milvus.grpc.Status status = 1;
inline bool CollectionInfo::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void CollectionInfo::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::milvus::grpc::Status& CollectionInfo::status() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.CollectionInfo.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::milvus::grpc::Status* CollectionInfo::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::milvus::grpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.CollectionInfo.status)
  return status_;
}
inline ::milvus::grpc::Status* CollectionInfo::release_status() {
  // @@protoc_insertion_point(field_release:milvus.grpc.CollectionInfo.status)
  
  ::milvus::grpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void CollectionInfo::set_allocated_status(::milvus::grpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.CollectionInfo.status)
}

// optional string json_info = 2;
inline void CollectionInfo::clear_json_info() {
  json_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CollectionInfo::json_info() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.CollectionInfo.json_info)
  return json_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionInfo::set_json_info(const ::std::string& value) {
  
  json_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.CollectionInfo.json_info)
}
inline void CollectionInfo::set_json_info(const char* value) {
  
  json_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.CollectionInfo.json_info)
}
inline void CollectionInfo::set_json_info(const char* value, size_t size) {
  
  json_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.CollectionInfo.json_info)
}
inline ::std::string* CollectionInfo::mutable_json_info() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.CollectionInfo.json_info)
  return json_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectionInfo::release_json_info() {
  // @@protoc_insertion_point(field_release:milvus.grpc.CollectionInfo.json_info)
  
  return json_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionInfo::set_allocated_json_info(::std::string* json_info) {
  if (json_info != NULL) {
    
  } else {
    
  }
  json_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_info);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.CollectionInfo.json_info)
}

// -------------------------------------------------------------------

// GetEntityIDsParam

// optional string collection_name = 1;
inline void GetEntityIDsParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetEntityIDsParam::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.GetEntityIDsParam.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetEntityIDsParam::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.GetEntityIDsParam.collection_name)
}
inline void GetEntityIDsParam::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.GetEntityIDsParam.collection_name)
}
inline void GetEntityIDsParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.GetEntityIDsParam.collection_name)
}
inline ::std::string* GetEntityIDsParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.GetEntityIDsParam.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetEntityIDsParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.GetEntityIDsParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetEntityIDsParam::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.GetEntityIDsParam.collection_name)
}

// optional int64 segment_id = 2;
inline void GetEntityIDsParam::clear_segment_id() {
  segment_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetEntityIDsParam::segment_id() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.GetEntityIDsParam.segment_id)
  return segment_id_;
}
inline void GetEntityIDsParam::set_segment_id(::google::protobuf::int64 value) {
  
  segment_id_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.GetEntityIDsParam.segment_id)
}

// -------------------------------------------------------------------

// EntityIdentity

// optional string collection_name = 1;
inline void EntityIdentity::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityIdentity::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.EntityIdentity.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityIdentity::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.EntityIdentity.collection_name)
}
inline void EntityIdentity::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.EntityIdentity.collection_name)
}
inline void EntityIdentity::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.EntityIdentity.collection_name)
}
inline ::std::string* EntityIdentity::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.EntityIdentity.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityIdentity::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.EntityIdentity.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityIdentity::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.EntityIdentity.collection_name)
}

// repeated int64 id_array = 2;
inline int EntityIdentity::id_array_size() const {
  return id_array_.size();
}
inline void EntityIdentity::clear_id_array() {
  id_array_.Clear();
}
inline ::google::protobuf::int64 EntityIdentity::id_array(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.EntityIdentity.id_array)
  return id_array_.Get(index);
}
inline void EntityIdentity::set_id_array(int index, ::google::protobuf::int64 value) {
  id_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.EntityIdentity.id_array)
}
inline void EntityIdentity::add_id_array(::google::protobuf::int64 value) {
  id_array_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.EntityIdentity.id_array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
EntityIdentity::id_array() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.EntityIdentity.id_array)
  return id_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
EntityIdentity::mutable_id_array() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.EntityIdentity.id_array)
  return &id_array_;
}

// repeated string field_names = 3;
inline int EntityIdentity::field_names_size() const {
  return field_names_.size();
}
inline void EntityIdentity::clear_field_names() {
  field_names_.Clear();
}
inline const ::std::string& EntityIdentity::field_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.EntityIdentity.field_names)
  return field_names_.Get(index);
}
inline ::std::string* EntityIdentity::mutable_field_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.EntityIdentity.field_names)
  return field_names_.Mutable(index);
}
inline void EntityIdentity::set_field_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.grpc.EntityIdentity.field_names)
  field_names_.Mutable(index)->assign(value);
}
inline void EntityIdentity::set_field_names(int index, const char* value) {
  field_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.grpc.EntityIdentity.field_names)
}
inline void EntityIdentity::set_field_names(int index, const char* value, size_t size) {
  field_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.EntityIdentity.field_names)
}
inline ::std::string* EntityIdentity::add_field_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.grpc.EntityIdentity.field_names)
  return field_names_.Add();
}
inline void EntityIdentity::add_field_names(const ::std::string& value) {
  field_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.EntityIdentity.field_names)
}
inline void EntityIdentity::add_field_names(const char* value) {
  field_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.grpc.EntityIdentity.field_names)
}
inline void EntityIdentity::add_field_names(const char* value, size_t size) {
  field_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.grpc.EntityIdentity.field_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntityIdentity::field_names() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.EntityIdentity.field_names)
  return field_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EntityIdentity::mutable_field_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.EntityIdentity.field_names)
  return &field_names_;
}

// -------------------------------------------------------------------

// VectorFieldParam

// optional int64 dimension = 1;
inline void VectorFieldParam::clear_dimension() {
  dimension_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VectorFieldParam::dimension() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorFieldParam.dimension)
  return dimension_;
}
inline void VectorFieldParam::set_dimension(::google::protobuf::int64 value) {
  
  dimension_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.VectorFieldParam.dimension)
}

// -------------------------------------------------------------------

// FieldType

// optional .milvus.grpc.DataType data_type = 1;
inline bool FieldType::has_data_type() const {
  return value_case() == kDataType;
}
inline void FieldType::set_has_data_type() {
  _oneof_case_[0] = kDataType;
}
inline void FieldType::clear_data_type() {
  if (has_data_type()) {
    value_.data_type_ = 0;
    clear_has_value();
  }
}
inline ::milvus::grpc::DataType FieldType::data_type() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldType.data_type)
  if (has_data_type()) {
    return static_cast< ::milvus::grpc::DataType >(value_.data_type_);
  }
  return static_cast< ::milvus::grpc::DataType >(0);
}
inline void FieldType::set_data_type(::milvus::grpc::DataType value) {
  if (!has_data_type()) {
    clear_value();
    set_has_data_type();
  }
  value_.data_type_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.FieldType.data_type)
}

// optional .milvus.grpc.VectorFieldParam vector_param = 2;
inline bool FieldType::has_vector_param() const {
  return value_case() == kVectorParam;
}
inline void FieldType::set_has_vector_param() {
  _oneof_case_[0] = kVectorParam;
}
inline void FieldType::clear_vector_param() {
  if (has_vector_param()) {
    delete value_.vector_param_;
    clear_has_value();
  }
}
inline  const ::milvus::grpc::VectorFieldParam& FieldType::vector_param() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldType.vector_param)
  return has_vector_param()
      ? *value_.vector_param_
      : ::milvus::grpc::VectorFieldParam::default_instance();
}
inline ::milvus::grpc::VectorFieldParam* FieldType::mutable_vector_param() {
  if (!has_vector_param()) {
    clear_value();
    set_has_vector_param();
    value_.vector_param_ = new ::milvus::grpc::VectorFieldParam;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.FieldType.vector_param)
  return value_.vector_param_;
}
inline ::milvus::grpc::VectorFieldParam* FieldType::release_vector_param() {
  // @@protoc_insertion_point(field_release:milvus.grpc.FieldType.vector_param)
  if (has_vector_param()) {
    clear_has_value();
    ::milvus::grpc::VectorFieldParam* temp = value_.vector_param_;
    value_.vector_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void FieldType::set_allocated_vector_param(::milvus::grpc::VectorFieldParam* vector_param) {
  clear_value();
  if (vector_param) {
    set_has_vector_param();
    value_.vector_param_ = vector_param;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.FieldType.vector_param)
}

inline bool FieldType::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void FieldType::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline FieldType::ValueCase FieldType::value_case() const {
  return FieldType::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FieldParam

// optional uint64 id = 1;
inline void FieldParam::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FieldParam::id() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldParam.id)
  return id_;
}
inline void FieldParam::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.FieldParam.id)
}

// optional string name = 2;
inline void FieldParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FieldParam::name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldParam.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.FieldParam.name)
}
inline void FieldParam::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.FieldParam.name)
}
inline void FieldParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.FieldParam.name)
}
inline ::std::string* FieldParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.FieldParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldParam::release_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.FieldParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.FieldParam.name)
}

// optional .milvus.grpc.DataType type = 3;
inline void FieldParam::clear_type() {
  type_ = 0;
}
inline ::milvus::grpc::DataType FieldParam::type() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldParam.type)
  return static_cast< ::milvus::grpc::DataType >(type_);
}
inline void FieldParam::set_type(::milvus::grpc::DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.FieldParam.type)
}

// repeated .milvus.grpc.KeyValuePair index_params = 4;
inline int FieldParam::index_params_size() const {
  return index_params_.size();
}
inline void FieldParam::clear_index_params() {
  index_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& FieldParam::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldParam.index_params)
  return index_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* FieldParam::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.FieldParam.index_params)
  return index_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* FieldParam::add_index_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.FieldParam.index_params)
  return index_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
FieldParam::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.FieldParam.index_params)
  return &index_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
FieldParam::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.FieldParam.index_params)
  return index_params_;
}

// repeated .milvus.grpc.KeyValuePair extra_params = 5;
inline int FieldParam::extra_params_size() const {
  return extra_params_.size();
}
inline void FieldParam::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& FieldParam::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.FieldParam.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* FieldParam::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.FieldParam.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* FieldParam::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.FieldParam.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
FieldParam::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.FieldParam.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
FieldParam::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.FieldParam.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// VectorFieldRecord

// repeated .milvus.grpc.VectorRowRecord value = 1;
inline int VectorFieldRecord::value_size() const {
  return value_.size();
}
inline void VectorFieldRecord::clear_value() {
  value_.Clear();
}
inline const ::milvus::grpc::VectorRowRecord& VectorFieldRecord::value(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorFieldRecord.value)
  return value_.Get(index);
}
inline ::milvus::grpc::VectorRowRecord* VectorFieldRecord::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.VectorFieldRecord.value)
  return value_.Mutable(index);
}
inline ::milvus::grpc::VectorRowRecord* VectorFieldRecord::add_value() {
  // @@protoc_insertion_point(field_add:milvus.grpc.VectorFieldRecord.value)
  return value_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >*
VectorFieldRecord::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.VectorFieldRecord.value)
  return &value_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >&
VectorFieldRecord::value() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.VectorFieldRecord.value)
  return value_;
}

// -------------------------------------------------------------------

// TermQuery

// optional string field_name = 1;
inline void TermQuery::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TermQuery::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.TermQuery.field_name)
  return field_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TermQuery::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.TermQuery.field_name)
}
inline void TermQuery::set_field_name(const char* value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.TermQuery.field_name)
}
inline void TermQuery::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.TermQuery.field_name)
}
inline ::std::string* TermQuery::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.TermQuery.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TermQuery::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.TermQuery.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TermQuery::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.TermQuery.field_name)
}

// repeated int64 int_value = 2;
inline int TermQuery::int_value_size() const {
  return int_value_.size();
}
inline void TermQuery::clear_int_value() {
  int_value_.Clear();
}
inline ::google::protobuf::int64 TermQuery::int_value(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.TermQuery.int_value)
  return int_value_.Get(index);
}
inline void TermQuery::set_int_value(int index, ::google::protobuf::int64 value) {
  int_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.TermQuery.int_value)
}
inline void TermQuery::add_int_value(::google::protobuf::int64 value) {
  int_value_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.TermQuery.int_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TermQuery::int_value() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.TermQuery.int_value)
  return int_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TermQuery::mutable_int_value() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.TermQuery.int_value)
  return &int_value_;
}

// repeated double double_value = 3;
inline int TermQuery::double_value_size() const {
  return double_value_.size();
}
inline void TermQuery::clear_double_value() {
  double_value_.Clear();
}
inline double TermQuery::double_value(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.TermQuery.double_value)
  return double_value_.Get(index);
}
inline void TermQuery::set_double_value(int index, double value) {
  double_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.TermQuery.double_value)
}
inline void TermQuery::add_double_value(double value) {
  double_value_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.TermQuery.double_value)
}
inline const ::google::protobuf::RepeatedField< double >&
TermQuery::double_value() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.TermQuery.double_value)
  return double_value_;
}
inline ::google::protobuf::RepeatedField< double >*
TermQuery::mutable_double_value() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.TermQuery.double_value)
  return &double_value_;
}

// optional int64 value_num = 4;
inline void TermQuery::clear_value_num() {
  value_num_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TermQuery::value_num() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.TermQuery.value_num)
  return value_num_;
}
inline void TermQuery::set_value_num(::google::protobuf::int64 value) {
  
  value_num_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.TermQuery.value_num)
}

// optional float boost = 5;
inline void TermQuery::clear_boost() {
  boost_ = 0;
}
inline float TermQuery::boost() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.TermQuery.boost)
  return boost_;
}
inline void TermQuery::set_boost(float value) {
  
  boost_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.TermQuery.boost)
}

// repeated .milvus.grpc.KeyValuePair extra_params = 6;
inline int TermQuery::extra_params_size() const {
  return extra_params_.size();
}
inline void TermQuery::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& TermQuery::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.TermQuery.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* TermQuery::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.TermQuery.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* TermQuery::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.TermQuery.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
TermQuery::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.TermQuery.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
TermQuery::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.TermQuery.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// CompareExpr

// optional .milvus.grpc.CompareOperator operator = 1;
inline void CompareExpr::clear_operator_() {
  operator__ = 0;
}
inline ::milvus::grpc::CompareOperator CompareExpr::operator_() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.CompareExpr.operator)
  return static_cast< ::milvus::grpc::CompareOperator >(operator__);
}
inline void CompareExpr::set_operator_(::milvus::grpc::CompareOperator value) {
  
  operator__ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.CompareExpr.operator)
}

// optional string operand = 2;
inline void CompareExpr::clear_operand() {
  operand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompareExpr::operand() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.CompareExpr.operand)
  return operand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompareExpr::set_operand(const ::std::string& value) {
  
  operand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.CompareExpr.operand)
}
inline void CompareExpr::set_operand(const char* value) {
  
  operand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.CompareExpr.operand)
}
inline void CompareExpr::set_operand(const char* value, size_t size) {
  
  operand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.CompareExpr.operand)
}
inline ::std::string* CompareExpr::mutable_operand() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.CompareExpr.operand)
  return operand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompareExpr::release_operand() {
  // @@protoc_insertion_point(field_release:milvus.grpc.CompareExpr.operand)
  
  return operand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompareExpr::set_allocated_operand(::std::string* operand) {
  if (operand != NULL) {
    
  } else {
    
  }
  operand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operand);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.CompareExpr.operand)
}

// -------------------------------------------------------------------

// RangeQuery

// optional string field_name = 1;
inline void RangeQuery::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RangeQuery::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.RangeQuery.field_name)
  return field_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeQuery::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.RangeQuery.field_name)
}
inline void RangeQuery::set_field_name(const char* value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.RangeQuery.field_name)
}
inline void RangeQuery::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.RangeQuery.field_name)
}
inline ::std::string* RangeQuery::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.RangeQuery.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeQuery::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.RangeQuery.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeQuery::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.RangeQuery.field_name)
}

// repeated .milvus.grpc.CompareExpr operand = 2;
inline int RangeQuery::operand_size() const {
  return operand_.size();
}
inline void RangeQuery::clear_operand() {
  operand_.Clear();
}
inline const ::milvus::grpc::CompareExpr& RangeQuery::operand(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.RangeQuery.operand)
  return operand_.Get(index);
}
inline ::milvus::grpc::CompareExpr* RangeQuery::mutable_operand(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.RangeQuery.operand)
  return operand_.Mutable(index);
}
inline ::milvus::grpc::CompareExpr* RangeQuery::add_operand() {
  // @@protoc_insertion_point(field_add:milvus.grpc.RangeQuery.operand)
  return operand_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::CompareExpr >*
RangeQuery::mutable_operand() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.RangeQuery.operand)
  return &operand_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::CompareExpr >&
RangeQuery::operand() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.RangeQuery.operand)
  return operand_;
}

// optional float boost = 3;
inline void RangeQuery::clear_boost() {
  boost_ = 0;
}
inline float RangeQuery::boost() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.RangeQuery.boost)
  return boost_;
}
inline void RangeQuery::set_boost(float value) {
  
  boost_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.RangeQuery.boost)
}

// repeated .milvus.grpc.KeyValuePair extra_params = 4;
inline int RangeQuery::extra_params_size() const {
  return extra_params_.size();
}
inline void RangeQuery::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& RangeQuery::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.RangeQuery.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* RangeQuery::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.RangeQuery.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* RangeQuery::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.RangeQuery.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
RangeQuery::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.RangeQuery.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
RangeQuery::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.RangeQuery.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// VectorQuery

// optional string field_name = 1;
inline void VectorQuery::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VectorQuery::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorQuery.field_name)
  return field_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorQuery::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.VectorQuery.field_name)
}
inline void VectorQuery::set_field_name(const char* value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.VectorQuery.field_name)
}
inline void VectorQuery::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.VectorQuery.field_name)
}
inline ::std::string* VectorQuery::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.VectorQuery.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VectorQuery::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.VectorQuery.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorQuery::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.VectorQuery.field_name)
}

// optional float query_boost = 2;
inline void VectorQuery::clear_query_boost() {
  query_boost_ = 0;
}
inline float VectorQuery::query_boost() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorQuery.query_boost)
  return query_boost_;
}
inline void VectorQuery::set_query_boost(float value) {
  
  query_boost_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.VectorQuery.query_boost)
}

// repeated .milvus.grpc.VectorRowRecord records = 3;
inline int VectorQuery::records_size() const {
  return records_.size();
}
inline void VectorQuery::clear_records() {
  records_.Clear();
}
inline const ::milvus::grpc::VectorRowRecord& VectorQuery::records(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorQuery.records)
  return records_.Get(index);
}
inline ::milvus::grpc::VectorRowRecord* VectorQuery::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.VectorQuery.records)
  return records_.Mutable(index);
}
inline ::milvus::grpc::VectorRowRecord* VectorQuery::add_records() {
  // @@protoc_insertion_point(field_add:milvus.grpc.VectorQuery.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >*
VectorQuery::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.VectorQuery.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::VectorRowRecord >&
VectorQuery::records() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.VectorQuery.records)
  return records_;
}

// optional int64 topk = 4;
inline void VectorQuery::clear_topk() {
  topk_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VectorQuery::topk() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorQuery.topk)
  return topk_;
}
inline void VectorQuery::set_topk(::google::protobuf::int64 value) {
  
  topk_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.VectorQuery.topk)
}

// repeated .milvus.grpc.KeyValuePair extra_params = 5;
inline int VectorQuery::extra_params_size() const {
  return extra_params_.size();
}
inline void VectorQuery::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& VectorQuery::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.VectorQuery.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* VectorQuery::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.VectorQuery.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* VectorQuery::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.VectorQuery.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
VectorQuery::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.VectorQuery.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
VectorQuery::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.VectorQuery.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// BooleanQuery

// optional .milvus.grpc.Occur occur = 1;
inline void BooleanQuery::clear_occur() {
  occur_ = 0;
}
inline ::milvus::grpc::Occur BooleanQuery::occur() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.BooleanQuery.occur)
  return static_cast< ::milvus::grpc::Occur >(occur_);
}
inline void BooleanQuery::set_occur(::milvus::grpc::Occur value) {
  
  occur_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.BooleanQuery.occur)
}

// repeated .milvus.grpc.GeneralQuery general_query = 2;
inline int BooleanQuery::general_query_size() const {
  return general_query_.size();
}
inline void BooleanQuery::clear_general_query() {
  general_query_.Clear();
}
inline const ::milvus::grpc::GeneralQuery& BooleanQuery::general_query(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.BooleanQuery.general_query)
  return general_query_.Get(index);
}
inline ::milvus::grpc::GeneralQuery* BooleanQuery::mutable_general_query(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.BooleanQuery.general_query)
  return general_query_.Mutable(index);
}
inline ::milvus::grpc::GeneralQuery* BooleanQuery::add_general_query() {
  // @@protoc_insertion_point(field_add:milvus.grpc.BooleanQuery.general_query)
  return general_query_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::GeneralQuery >*
BooleanQuery::mutable_general_query() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.BooleanQuery.general_query)
  return &general_query_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::GeneralQuery >&
BooleanQuery::general_query() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.BooleanQuery.general_query)
  return general_query_;
}

// -------------------------------------------------------------------

// GeneralQuery

// optional .milvus.grpc.BooleanQuery boolean_query = 1;
inline bool GeneralQuery::has_boolean_query() const {
  return query_case() == kBooleanQuery;
}
inline void GeneralQuery::set_has_boolean_query() {
  _oneof_case_[0] = kBooleanQuery;
}
inline void GeneralQuery::clear_boolean_query() {
  if (has_boolean_query()) {
    delete query_.boolean_query_;
    clear_has_query();
  }
}
inline  const ::milvus::grpc::BooleanQuery& GeneralQuery::boolean_query() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.GeneralQuery.boolean_query)
  return has_boolean_query()
      ? *query_.boolean_query_
      : ::milvus::grpc::BooleanQuery::default_instance();
}
inline ::milvus::grpc::BooleanQuery* GeneralQuery::mutable_boolean_query() {
  if (!has_boolean_query()) {
    clear_query();
    set_has_boolean_query();
    query_.boolean_query_ = new ::milvus::grpc::BooleanQuery;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.GeneralQuery.boolean_query)
  return query_.boolean_query_;
}
inline ::milvus::grpc::BooleanQuery* GeneralQuery::release_boolean_query() {
  // @@protoc_insertion_point(field_release:milvus.grpc.GeneralQuery.boolean_query)
  if (has_boolean_query()) {
    clear_has_query();
    ::milvus::grpc::BooleanQuery* temp = query_.boolean_query_;
    query_.boolean_query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GeneralQuery::set_allocated_boolean_query(::milvus::grpc::BooleanQuery* boolean_query) {
  clear_query();
  if (boolean_query) {
    set_has_boolean_query();
    query_.boolean_query_ = boolean_query;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.GeneralQuery.boolean_query)
}

// optional .milvus.grpc.TermQuery term_query = 2;
inline bool GeneralQuery::has_term_query() const {
  return query_case() == kTermQuery;
}
inline void GeneralQuery::set_has_term_query() {
  _oneof_case_[0] = kTermQuery;
}
inline void GeneralQuery::clear_term_query() {
  if (has_term_query()) {
    delete query_.term_query_;
    clear_has_query();
  }
}
inline  const ::milvus::grpc::TermQuery& GeneralQuery::term_query() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.GeneralQuery.term_query)
  return has_term_query()
      ? *query_.term_query_
      : ::milvus::grpc::TermQuery::default_instance();
}
inline ::milvus::grpc::TermQuery* GeneralQuery::mutable_term_query() {
  if (!has_term_query()) {
    clear_query();
    set_has_term_query();
    query_.term_query_ = new ::milvus::grpc::TermQuery;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.GeneralQuery.term_query)
  return query_.term_query_;
}
inline ::milvus::grpc::TermQuery* GeneralQuery::release_term_query() {
  // @@protoc_insertion_point(field_release:milvus.grpc.GeneralQuery.term_query)
  if (has_term_query()) {
    clear_has_query();
    ::milvus::grpc::TermQuery* temp = query_.term_query_;
    query_.term_query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GeneralQuery::set_allocated_term_query(::milvus::grpc::TermQuery* term_query) {
  clear_query();
  if (term_query) {
    set_has_term_query();
    query_.term_query_ = term_query;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.GeneralQuery.term_query)
}

// optional .milvus.grpc.RangeQuery range_query = 3;
inline bool GeneralQuery::has_range_query() const {
  return query_case() == kRangeQuery;
}
inline void GeneralQuery::set_has_range_query() {
  _oneof_case_[0] = kRangeQuery;
}
inline void GeneralQuery::clear_range_query() {
  if (has_range_query()) {
    delete query_.range_query_;
    clear_has_query();
  }
}
inline  const ::milvus::grpc::RangeQuery& GeneralQuery::range_query() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.GeneralQuery.range_query)
  return has_range_query()
      ? *query_.range_query_
      : ::milvus::grpc::RangeQuery::default_instance();
}
inline ::milvus::grpc::RangeQuery* GeneralQuery::mutable_range_query() {
  if (!has_range_query()) {
    clear_query();
    set_has_range_query();
    query_.range_query_ = new ::milvus::grpc::RangeQuery;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.GeneralQuery.range_query)
  return query_.range_query_;
}
inline ::milvus::grpc::RangeQuery* GeneralQuery::release_range_query() {
  // @@protoc_insertion_point(field_release:milvus.grpc.GeneralQuery.range_query)
  if (has_range_query()) {
    clear_has_query();
    ::milvus::grpc::RangeQuery* temp = query_.range_query_;
    query_.range_query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GeneralQuery::set_allocated_range_query(::milvus::grpc::RangeQuery* range_query) {
  clear_query();
  if (range_query) {
    set_has_range_query();
    query_.range_query_ = range_query;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.GeneralQuery.range_query)
}

// optional .milvus.grpc.VectorQuery vector_query = 4;
inline bool GeneralQuery::has_vector_query() const {
  return query_case() == kVectorQuery;
}
inline void GeneralQuery::set_has_vector_query() {
  _oneof_case_[0] = kVectorQuery;
}
inline void GeneralQuery::clear_vector_query() {
  if (has_vector_query()) {
    delete query_.vector_query_;
    clear_has_query();
  }
}
inline  const ::milvus::grpc::VectorQuery& GeneralQuery::vector_query() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.GeneralQuery.vector_query)
  return has_vector_query()
      ? *query_.vector_query_
      : ::milvus::grpc::VectorQuery::default_instance();
}
inline ::milvus::grpc::VectorQuery* GeneralQuery::mutable_vector_query() {
  if (!has_vector_query()) {
    clear_query();
    set_has_vector_query();
    query_.vector_query_ = new ::milvus::grpc::VectorQuery;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.GeneralQuery.vector_query)
  return query_.vector_query_;
}
inline ::milvus::grpc::VectorQuery* GeneralQuery::release_vector_query() {
  // @@protoc_insertion_point(field_release:milvus.grpc.GeneralQuery.vector_query)
  if (has_vector_query()) {
    clear_has_query();
    ::milvus::grpc::VectorQuery* temp = query_.vector_query_;
    query_.vector_query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GeneralQuery::set_allocated_vector_query(::milvus::grpc::VectorQuery* vector_query) {
  clear_query();
  if (vector_query) {
    set_has_vector_query();
    query_.vector_query_ = vector_query;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.GeneralQuery.vector_query)
}

inline bool GeneralQuery::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void GeneralQuery::clear_has_query() {
  _oneof_case_[0] = QUERY_NOT_SET;
}
inline GeneralQuery::QueryCase GeneralQuery::query_case() const {
  return GeneralQuery::QueryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SearchParamPB

// optional string collection_name = 1;
inline void SearchParamPB::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchParamPB::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchParamPB.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchParamPB::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.SearchParamPB.collection_name)
}
inline void SearchParamPB::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.SearchParamPB.collection_name)
}
inline void SearchParamPB::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.SearchParamPB.collection_name)
}
inline ::std::string* SearchParamPB::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchParamPB.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchParamPB::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.SearchParamPB.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchParamPB::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.SearchParamPB.collection_name)
}

// repeated string partition_tag_array = 2;
inline int SearchParamPB::partition_tag_array_size() const {
  return partition_tag_array_.size();
}
inline void SearchParamPB::clear_partition_tag_array() {
  partition_tag_array_.Clear();
}
inline const ::std::string& SearchParamPB::partition_tag_array(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchParamPB.partition_tag_array)
  return partition_tag_array_.Get(index);
}
inline ::std::string* SearchParamPB::mutable_partition_tag_array(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchParamPB.partition_tag_array)
  return partition_tag_array_.Mutable(index);
}
inline void SearchParamPB::set_partition_tag_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.grpc.SearchParamPB.partition_tag_array)
  partition_tag_array_.Mutable(index)->assign(value);
}
inline void SearchParamPB::set_partition_tag_array(int index, const char* value) {
  partition_tag_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.grpc.SearchParamPB.partition_tag_array)
}
inline void SearchParamPB::set_partition_tag_array(int index, const char* value, size_t size) {
  partition_tag_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.SearchParamPB.partition_tag_array)
}
inline ::std::string* SearchParamPB::add_partition_tag_array() {
  // @@protoc_insertion_point(field_add_mutable:milvus.grpc.SearchParamPB.partition_tag_array)
  return partition_tag_array_.Add();
}
inline void SearchParamPB::add_partition_tag_array(const ::std::string& value) {
  partition_tag_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.SearchParamPB.partition_tag_array)
}
inline void SearchParamPB::add_partition_tag_array(const char* value) {
  partition_tag_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.grpc.SearchParamPB.partition_tag_array)
}
inline void SearchParamPB::add_partition_tag_array(const char* value, size_t size) {
  partition_tag_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.grpc.SearchParamPB.partition_tag_array)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchParamPB::partition_tag_array() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.SearchParamPB.partition_tag_array)
  return partition_tag_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchParamPB::mutable_partition_tag_array() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.SearchParamPB.partition_tag_array)
  return &partition_tag_array_;
}

// optional .milvus.grpc.GeneralQuery general_query = 3;
inline bool SearchParamPB::has_general_query() const {
  return !_is_default_instance_ && general_query_ != NULL;
}
inline void SearchParamPB::clear_general_query() {
  if (GetArenaNoVirtual() == NULL && general_query_ != NULL) delete general_query_;
  general_query_ = NULL;
}
inline const ::milvus::grpc::GeneralQuery& SearchParamPB::general_query() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchParamPB.general_query)
  return general_query_ != NULL ? *general_query_ : *default_instance_->general_query_;
}
inline ::milvus::grpc::GeneralQuery* SearchParamPB::mutable_general_query() {
  
  if (general_query_ == NULL) {
    general_query_ = new ::milvus::grpc::GeneralQuery;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchParamPB.general_query)
  return general_query_;
}
inline ::milvus::grpc::GeneralQuery* SearchParamPB::release_general_query() {
  // @@protoc_insertion_point(field_release:milvus.grpc.SearchParamPB.general_query)
  
  ::milvus::grpc::GeneralQuery* temp = general_query_;
  general_query_ = NULL;
  return temp;
}
inline void SearchParamPB::set_allocated_general_query(::milvus::grpc::GeneralQuery* general_query) {
  delete general_query_;
  general_query_ = general_query;
  if (general_query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.SearchParamPB.general_query)
}

// repeated .milvus.grpc.KeyValuePair extra_params = 4;
inline int SearchParamPB::extra_params_size() const {
  return extra_params_.size();
}
inline void SearchParamPB::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& SearchParamPB::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchParamPB.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* SearchParamPB::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchParamPB.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* SearchParamPB::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.SearchParamPB.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
SearchParamPB::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.SearchParamPB.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
SearchParamPB::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.SearchParamPB.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// InsertOrDeleteMsg

// optional string collection_name = 1;
inline void InsertOrDeleteMsg::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertOrDeleteMsg::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertOrDeleteMsg.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertOrDeleteMsg::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.InsertOrDeleteMsg.collection_name)
}
inline void InsertOrDeleteMsg::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.InsertOrDeleteMsg.collection_name)
}
inline void InsertOrDeleteMsg::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.InsertOrDeleteMsg.collection_name)
}
inline ::std::string* InsertOrDeleteMsg::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.InsertOrDeleteMsg.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertOrDeleteMsg::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.InsertOrDeleteMsg.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertOrDeleteMsg::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.InsertOrDeleteMsg.collection_name)
}

// optional .milvus.grpc.RowData rows_data = 2;
inline bool InsertOrDeleteMsg::has_rows_data() const {
  return !_is_default_instance_ && rows_data_ != NULL;
}
inline void InsertOrDeleteMsg::clear_rows_data() {
  if (GetArenaNoVirtual() == NULL && rows_data_ != NULL) delete rows_data_;
  rows_data_ = NULL;
}
inline const ::milvus::grpc::RowData& InsertOrDeleteMsg::rows_data() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertOrDeleteMsg.rows_data)
  return rows_data_ != NULL ? *rows_data_ : *default_instance_->rows_data_;
}
inline ::milvus::grpc::RowData* InsertOrDeleteMsg::mutable_rows_data() {
  
  if (rows_data_ == NULL) {
    rows_data_ = new ::milvus::grpc::RowData;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.InsertOrDeleteMsg.rows_data)
  return rows_data_;
}
inline ::milvus::grpc::RowData* InsertOrDeleteMsg::release_rows_data() {
  // @@protoc_insertion_point(field_release:milvus.grpc.InsertOrDeleteMsg.rows_data)
  
  ::milvus::grpc::RowData* temp = rows_data_;
  rows_data_ = NULL;
  return temp;
}
inline void InsertOrDeleteMsg::set_allocated_rows_data(::milvus::grpc::RowData* rows_data) {
  delete rows_data_;
  rows_data_ = rows_data;
  if (rows_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.InsertOrDeleteMsg.rows_data)
}

// optional int64 uid = 3;
inline void InsertOrDeleteMsg::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InsertOrDeleteMsg::uid() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertOrDeleteMsg.uid)
  return uid_;
}
inline void InsertOrDeleteMsg::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.InsertOrDeleteMsg.uid)
}

// optional string partition_tag = 4;
inline void InsertOrDeleteMsg::clear_partition_tag() {
  partition_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertOrDeleteMsg::partition_tag() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertOrDeleteMsg.partition_tag)
  return partition_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertOrDeleteMsg::set_partition_tag(const ::std::string& value) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.InsertOrDeleteMsg.partition_tag)
}
inline void InsertOrDeleteMsg::set_partition_tag(const char* value) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.InsertOrDeleteMsg.partition_tag)
}
inline void InsertOrDeleteMsg::set_partition_tag(const char* value, size_t size) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.InsertOrDeleteMsg.partition_tag)
}
inline ::std::string* InsertOrDeleteMsg::mutable_partition_tag() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.InsertOrDeleteMsg.partition_tag)
  return partition_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertOrDeleteMsg::release_partition_tag() {
  // @@protoc_insertion_point(field_release:milvus.grpc.InsertOrDeleteMsg.partition_tag)
  
  return partition_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertOrDeleteMsg::set_allocated_partition_tag(::std::string* partition_tag) {
  if (partition_tag != NULL) {
    
  } else {
    
  }
  partition_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partition_tag);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.InsertOrDeleteMsg.partition_tag)
}

// optional int64 timestamp = 5;
inline void InsertOrDeleteMsg::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InsertOrDeleteMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertOrDeleteMsg.timestamp)
  return timestamp_;
}
inline void InsertOrDeleteMsg::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.InsertOrDeleteMsg.timestamp)
}

// optional int64 segment_id = 6;
inline void InsertOrDeleteMsg::clear_segment_id() {
  segment_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InsertOrDeleteMsg::segment_id() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertOrDeleteMsg.segment_id)
  return segment_id_;
}
inline void InsertOrDeleteMsg::set_segment_id(::google::protobuf::int64 value) {
  
  segment_id_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.InsertOrDeleteMsg.segment_id)
}

// optional int64 channel_id = 7;
inline void InsertOrDeleteMsg::clear_channel_id() {
  channel_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InsertOrDeleteMsg::channel_id() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertOrDeleteMsg.channel_id)
  return channel_id_;
}
inline void InsertOrDeleteMsg::set_channel_id(::google::protobuf::int64 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.InsertOrDeleteMsg.channel_id)
}

// optional .milvus.grpc.OpType op = 8;
inline void InsertOrDeleteMsg::clear_op() {
  op_ = 0;
}
inline ::milvus::grpc::OpType InsertOrDeleteMsg::op() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertOrDeleteMsg.op)
  return static_cast< ::milvus::grpc::OpType >(op_);
}
inline void InsertOrDeleteMsg::set_op(::milvus::grpc::OpType value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.InsertOrDeleteMsg.op)
}

// optional int64 client_id = 9;
inline void InsertOrDeleteMsg::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InsertOrDeleteMsg::client_id() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertOrDeleteMsg.client_id)
  return client_id_;
}
inline void InsertOrDeleteMsg::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.InsertOrDeleteMsg.client_id)
}

// repeated .milvus.grpc.KeyValuePair extra_params = 10;
inline int InsertOrDeleteMsg::extra_params_size() const {
  return extra_params_.size();
}
inline void InsertOrDeleteMsg::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& InsertOrDeleteMsg::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.InsertOrDeleteMsg.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* InsertOrDeleteMsg::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.InsertOrDeleteMsg.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* InsertOrDeleteMsg::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.InsertOrDeleteMsg.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
InsertOrDeleteMsg::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.InsertOrDeleteMsg.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
InsertOrDeleteMsg::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.InsertOrDeleteMsg.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// SearchMsg

// optional string collection_name = 1;
inline void SearchMsg::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchMsg::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchMsg.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchMsg::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.SearchMsg.collection_name)
}
inline void SearchMsg::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.SearchMsg.collection_name)
}
inline void SearchMsg::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.SearchMsg.collection_name)
}
inline ::std::string* SearchMsg::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchMsg.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchMsg::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.grpc.SearchMsg.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchMsg::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.SearchMsg.collection_name)
}

// optional .milvus.grpc.VectorRowRecord records = 2;
inline bool SearchMsg::has_records() const {
  return !_is_default_instance_ && records_ != NULL;
}
inline void SearchMsg::clear_records() {
  if (GetArenaNoVirtual() == NULL && records_ != NULL) delete records_;
  records_ = NULL;
}
inline const ::milvus::grpc::VectorRowRecord& SearchMsg::records() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchMsg.records)
  return records_ != NULL ? *records_ : *default_instance_->records_;
}
inline ::milvus::grpc::VectorRowRecord* SearchMsg::mutable_records() {
  
  if (records_ == NULL) {
    records_ = new ::milvus::grpc::VectorRowRecord;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchMsg.records)
  return records_;
}
inline ::milvus::grpc::VectorRowRecord* SearchMsg::release_records() {
  // @@protoc_insertion_point(field_release:milvus.grpc.SearchMsg.records)
  
  ::milvus::grpc::VectorRowRecord* temp = records_;
  records_ = NULL;
  return temp;
}
inline void SearchMsg::set_allocated_records(::milvus::grpc::VectorRowRecord* records) {
  delete records_;
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.SearchMsg.records)
}

// optional string partition_tag = 3;
inline void SearchMsg::clear_partition_tag() {
  partition_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchMsg::partition_tag() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchMsg.partition_tag)
  return partition_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchMsg::set_partition_tag(const ::std::string& value) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.grpc.SearchMsg.partition_tag)
}
inline void SearchMsg::set_partition_tag(const char* value) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.grpc.SearchMsg.partition_tag)
}
inline void SearchMsg::set_partition_tag(const char* value, size_t size) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.grpc.SearchMsg.partition_tag)
}
inline ::std::string* SearchMsg::mutable_partition_tag() {
  
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchMsg.partition_tag)
  return partition_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchMsg::release_partition_tag() {
  // @@protoc_insertion_point(field_release:milvus.grpc.SearchMsg.partition_tag)
  
  return partition_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchMsg::set_allocated_partition_tag(::std::string* partition_tag) {
  if (partition_tag != NULL) {
    
  } else {
    
  }
  partition_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partition_tag);
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.SearchMsg.partition_tag)
}

// optional int64 uid = 4;
inline void SearchMsg::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SearchMsg::uid() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchMsg.uid)
  return uid_;
}
inline void SearchMsg::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.SearchMsg.uid)
}

// optional int64 timestamp = 5;
inline void SearchMsg::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SearchMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchMsg.timestamp)
  return timestamp_;
}
inline void SearchMsg::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.SearchMsg.timestamp)
}

// optional int64 client_id = 6;
inline void SearchMsg::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SearchMsg::client_id() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchMsg.client_id)
  return client_id_;
}
inline void SearchMsg::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.SearchMsg.client_id)
}

// repeated .milvus.grpc.KeyValuePair extra_params = 7;
inline int SearchMsg::extra_params_size() const {
  return extra_params_.size();
}
inline void SearchMsg::clear_extra_params() {
  extra_params_.Clear();
}
inline const ::milvus::grpc::KeyValuePair& SearchMsg::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SearchMsg.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::grpc::KeyValuePair* SearchMsg::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.grpc.SearchMsg.extra_params)
  return extra_params_.Mutable(index);
}
inline ::milvus::grpc::KeyValuePair* SearchMsg::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.grpc.SearchMsg.extra_params)
  return extra_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >*
SearchMsg::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.SearchMsg.extra_params)
  return &extra_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::milvus::grpc::KeyValuePair >&
SearchMsg::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.SearchMsg.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// TimeSyncMsg

// optional int64 peer_Id = 1;
inline void TimeSyncMsg::clear_peer_id() {
  peer_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TimeSyncMsg::peer_id() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.TimeSyncMsg.peer_Id)
  return peer_id_;
}
inline void TimeSyncMsg::set_peer_id(::google::protobuf::int64 value) {
  
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.TimeSyncMsg.peer_Id)
}

// optional int64 Timestamp = 2;
inline void TimeSyncMsg::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TimeSyncMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.TimeSyncMsg.Timestamp)
  return timestamp_;
}
inline void TimeSyncMsg::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.TimeSyncMsg.Timestamp)
}

// optional .milvus.grpc.SyncType sync_type = 3;
inline void TimeSyncMsg::clear_sync_type() {
  sync_type_ = 0;
}
inline ::milvus::grpc::SyncType TimeSyncMsg::sync_type() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.TimeSyncMsg.sync_type)
  return static_cast< ::milvus::grpc::SyncType >(sync_type_);
}
inline void TimeSyncMsg::set_sync_type(::milvus::grpc::SyncType value) {
  
  sync_type_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.TimeSyncMsg.sync_type)
}

// -------------------------------------------------------------------

// SegmentRecord

// optional int64 uid = 1;
inline void SegmentRecord::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SegmentRecord::uid() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SegmentRecord.uid)
  return uid_;
}
inline void SegmentRecord::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.SegmentRecord.uid)
}

// repeated int64 segment_id = 2;
inline int SegmentRecord::segment_id_size() const {
  return segment_id_.size();
}
inline void SegmentRecord::clear_segment_id() {
  segment_id_.Clear();
}
inline ::google::protobuf::int64 SegmentRecord::segment_id(int index) const {
  // @@protoc_insertion_point(field_get:milvus.grpc.SegmentRecord.segment_id)
  return segment_id_.Get(index);
}
inline void SegmentRecord::set_segment_id(int index, ::google::protobuf::int64 value) {
  segment_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.grpc.SegmentRecord.segment_id)
}
inline void SegmentRecord::add_segment_id(::google::protobuf::int64 value) {
  segment_id_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.grpc.SegmentRecord.segment_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SegmentRecord::segment_id() const {
  // @@protoc_insertion_point(field_list:milvus.grpc.SegmentRecord.segment_id)
  return segment_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SegmentRecord::mutable_segment_id() {
  // @@protoc_insertion_point(field_mutable_list:milvus.grpc.SegmentRecord.segment_id)
  return &segment_id_;
}

// -------------------------------------------------------------------

// Key2SegMsg

// optional int64 client_id = 1;
inline void Key2SegMsg::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Key2SegMsg::client_id() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Key2SegMsg.client_id)
  return client_id_;
}
inline void Key2SegMsg::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:milvus.grpc.Key2SegMsg.client_id)
}

// optional .milvus.grpc.SegmentRecord records = 2;
inline bool Key2SegMsg::has_records() const {
  return !_is_default_instance_ && records_ != NULL;
}
inline void Key2SegMsg::clear_records() {
  if (GetArenaNoVirtual() == NULL && records_ != NULL) delete records_;
  records_ = NULL;
}
inline const ::milvus::grpc::SegmentRecord& Key2SegMsg::records() const {
  // @@protoc_insertion_point(field_get:milvus.grpc.Key2SegMsg.records)
  return records_ != NULL ? *records_ : *default_instance_->records_;
}
inline ::milvus::grpc::SegmentRecord* Key2SegMsg::mutable_records() {
  
  if (records_ == NULL) {
    records_ = new ::milvus::grpc::SegmentRecord;
  }
  // @@protoc_insertion_point(field_mutable:milvus.grpc.Key2SegMsg.records)
  return records_;
}
inline ::milvus::grpc::SegmentRecord* Key2SegMsg::release_records() {
  // @@protoc_insertion_point(field_release:milvus.grpc.Key2SegMsg.records)
  
  ::milvus::grpc::SegmentRecord* temp = records_;
  records_ = NULL;
  return temp;
}
inline void Key2SegMsg::set_allocated_records(::milvus::grpc::SegmentRecord* records) {
  delete records_;
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.grpc.Key2SegMsg.records)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc
}  // namespace milvus

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::milvus::grpc::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::grpc::ErrorCode>() {
  return ::milvus::grpc::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::milvus::grpc::DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::grpc::DataType>() {
  return ::milvus::grpc::DataType_descriptor();
}
template <> struct is_proto_enum< ::milvus::grpc::CompareOperator> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::grpc::CompareOperator>() {
  return ::milvus::grpc::CompareOperator_descriptor();
}
template <> struct is_proto_enum< ::milvus::grpc::Occur> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::grpc::Occur>() {
  return ::milvus::grpc::Occur_descriptor();
}
template <> struct is_proto_enum< ::milvus::grpc::OpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::grpc::OpType>() {
  return ::milvus::grpc::OpType_descriptor();
}
template <> struct is_proto_enum< ::milvus::grpc::SyncType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::grpc::SyncType>() {
  return ::milvus::grpc::SyncType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_suvlim_2eproto__INCLUDED
