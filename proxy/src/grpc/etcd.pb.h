// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etcd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_etcd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_etcd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_etcd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_etcd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_etcd_2eproto;
namespace etcdserverpb {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class ResponseHeader;
class ResponseHeaderDefaultTypeInternal;
extern ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
class WatchCancelRequest;
class WatchCancelRequestDefaultTypeInternal;
extern WatchCancelRequestDefaultTypeInternal _WatchCancelRequest_default_instance_;
class WatchCreateRequest;
class WatchCreateRequestDefaultTypeInternal;
extern WatchCreateRequestDefaultTypeInternal _WatchCreateRequest_default_instance_;
class WatchProgressRequest;
class WatchProgressRequestDefaultTypeInternal;
extern WatchProgressRequestDefaultTypeInternal _WatchProgressRequest_default_instance_;
class WatchRequest;
class WatchRequestDefaultTypeInternal;
extern WatchRequestDefaultTypeInternal _WatchRequest_default_instance_;
class WatchResponse;
class WatchResponseDefaultTypeInternal;
extern WatchResponseDefaultTypeInternal _WatchResponse_default_instance_;
}  // namespace etcdserverpb
PROTOBUF_NAMESPACE_OPEN
template<> ::etcdserverpb::Event* Arena::CreateMaybeMessage<::etcdserverpb::Event>(Arena*);
template<> ::etcdserverpb::KeyValue* Arena::CreateMaybeMessage<::etcdserverpb::KeyValue>(Arena*);
template<> ::etcdserverpb::ResponseHeader* Arena::CreateMaybeMessage<::etcdserverpb::ResponseHeader>(Arena*);
template<> ::etcdserverpb::WatchCancelRequest* Arena::CreateMaybeMessage<::etcdserverpb::WatchCancelRequest>(Arena*);
template<> ::etcdserverpb::WatchCreateRequest* Arena::CreateMaybeMessage<::etcdserverpb::WatchCreateRequest>(Arena*);
template<> ::etcdserverpb::WatchProgressRequest* Arena::CreateMaybeMessage<::etcdserverpb::WatchProgressRequest>(Arena*);
template<> ::etcdserverpb::WatchRequest* Arena::CreateMaybeMessage<::etcdserverpb::WatchRequest>(Arena*);
template<> ::etcdserverpb::WatchResponse* Arena::CreateMaybeMessage<::etcdserverpb::WatchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace etcdserverpb {

enum WatchCreateRequest_FilterType : int {
  WatchCreateRequest_FilterType_NOPUT = 0,
  WatchCreateRequest_FilterType_NODELETE = 1,
  WatchCreateRequest_FilterType_WatchCreateRequest_FilterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WatchCreateRequest_FilterType_WatchCreateRequest_FilterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WatchCreateRequest_FilterType_IsValid(int value);
constexpr WatchCreateRequest_FilterType WatchCreateRequest_FilterType_FilterType_MIN = WatchCreateRequest_FilterType_NOPUT;
constexpr WatchCreateRequest_FilterType WatchCreateRequest_FilterType_FilterType_MAX = WatchCreateRequest_FilterType_NODELETE;
constexpr int WatchCreateRequest_FilterType_FilterType_ARRAYSIZE = WatchCreateRequest_FilterType_FilterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WatchCreateRequest_FilterType_descriptor();
template<typename T>
inline const std::string& WatchCreateRequest_FilterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WatchCreateRequest_FilterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WatchCreateRequest_FilterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WatchCreateRequest_FilterType_descriptor(), enum_t_value);
}
inline bool WatchCreateRequest_FilterType_Parse(
    const std::string& name, WatchCreateRequest_FilterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WatchCreateRequest_FilterType>(
    WatchCreateRequest_FilterType_descriptor(), name, value);
}
enum Event_EventType : int {
  Event_EventType_PUT = 0,
  Event_EventType_DELETE = 1,
  Event_EventType_Event_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Event_EventType_Event_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Event_EventType_IsValid(int value);
constexpr Event_EventType Event_EventType_EventType_MIN = Event_EventType_PUT;
constexpr Event_EventType Event_EventType_EventType_MAX = Event_EventType_DELETE;
constexpr int Event_EventType_EventType_ARRAYSIZE = Event_EventType_EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_EventType_descriptor();
template<typename T>
inline const std::string& Event_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Event_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Event_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Event_EventType_descriptor(), enum_t_value);
}
inline bool Event_EventType_Parse(
    const std::string& name, Event_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Event_EventType>(
    Event_EventType_descriptor(), name, value);
}
// ===================================================================

class WatchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.WatchRequest) */ {
 public:
  WatchRequest();
  virtual ~WatchRequest();

  WatchRequest(const WatchRequest& from);
  WatchRequest(WatchRequest&& from) noexcept
    : WatchRequest() {
    *this = ::std::move(from);
  }

  inline WatchRequest& operator=(const WatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchRequest& operator=(WatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchRequest& default_instance();

  enum RequestUnionCase {
    kCreateRequest = 1,
    kCancelRequest = 2,
    kProgressRequest = 3,
    REQUEST_UNION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchRequest* internal_default_instance() {
    return reinterpret_cast<const WatchRequest*>(
               &_WatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WatchRequest& a, WatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchRequest* New() const final {
    return CreateMaybeMessage<WatchRequest>(nullptr);
  }

  WatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchRequest& from);
  void MergeFrom(const WatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.WatchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_2eproto);
    return ::descriptor_table_etcd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateRequestFieldNumber = 1,
    kCancelRequestFieldNumber = 2,
    kProgressRequestFieldNumber = 3,
  };
  // .etcdserverpb.WatchCreateRequest create_request = 1;
  bool has_create_request() const;
  void clear_create_request();
  const ::etcdserverpb::WatchCreateRequest& create_request() const;
  ::etcdserverpb::WatchCreateRequest* release_create_request();
  ::etcdserverpb::WatchCreateRequest* mutable_create_request();
  void set_allocated_create_request(::etcdserverpb::WatchCreateRequest* create_request);

  // .etcdserverpb.WatchCancelRequest cancel_request = 2;
  bool has_cancel_request() const;
  void clear_cancel_request();
  const ::etcdserverpb::WatchCancelRequest& cancel_request() const;
  ::etcdserverpb::WatchCancelRequest* release_cancel_request();
  ::etcdserverpb::WatchCancelRequest* mutable_cancel_request();
  void set_allocated_cancel_request(::etcdserverpb::WatchCancelRequest* cancel_request);

  // .etcdserverpb.WatchProgressRequest progress_request = 3;
  bool has_progress_request() const;
  void clear_progress_request();
  const ::etcdserverpb::WatchProgressRequest& progress_request() const;
  ::etcdserverpb::WatchProgressRequest* release_progress_request();
  ::etcdserverpb::WatchProgressRequest* mutable_progress_request();
  void set_allocated_progress_request(::etcdserverpb::WatchProgressRequest* progress_request);

  void clear_request_union();
  RequestUnionCase request_union_case() const;
  // @@protoc_insertion_point(class_scope:etcdserverpb.WatchRequest)
 private:
  class _Internal;
  void set_has_create_request();
  void set_has_cancel_request();
  void set_has_progress_request();

  inline bool has_request_union() const;
  inline void clear_has_request_union();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union RequestUnionUnion {
    RequestUnionUnion() {}
    ::etcdserverpb::WatchCreateRequest* create_request_;
    ::etcdserverpb::WatchCancelRequest* cancel_request_;
    ::etcdserverpb::WatchProgressRequest* progress_request_;
  } request_union_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_etcd_2eproto;
};
// -------------------------------------------------------------------

class WatchCreateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.WatchCreateRequest) */ {
 public:
  WatchCreateRequest();
  virtual ~WatchCreateRequest();

  WatchCreateRequest(const WatchCreateRequest& from);
  WatchCreateRequest(WatchCreateRequest&& from) noexcept
    : WatchCreateRequest() {
    *this = ::std::move(from);
  }

  inline WatchCreateRequest& operator=(const WatchCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchCreateRequest& operator=(WatchCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchCreateRequest* internal_default_instance() {
    return reinterpret_cast<const WatchCreateRequest*>(
               &_WatchCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WatchCreateRequest& a, WatchCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchCreateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchCreateRequest* New() const final {
    return CreateMaybeMessage<WatchCreateRequest>(nullptr);
  }

  WatchCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchCreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchCreateRequest& from);
  void MergeFrom(const WatchCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchCreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.WatchCreateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_2eproto);
    return ::descriptor_table_etcd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WatchCreateRequest_FilterType FilterType;
  static constexpr FilterType NOPUT =
    WatchCreateRequest_FilterType_NOPUT;
  static constexpr FilterType NODELETE =
    WatchCreateRequest_FilterType_NODELETE;
  static inline bool FilterType_IsValid(int value) {
    return WatchCreateRequest_FilterType_IsValid(value);
  }
  static constexpr FilterType FilterType_MIN =
    WatchCreateRequest_FilterType_FilterType_MIN;
  static constexpr FilterType FilterType_MAX =
    WatchCreateRequest_FilterType_FilterType_MAX;
  static constexpr int FilterType_ARRAYSIZE =
    WatchCreateRequest_FilterType_FilterType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FilterType_descriptor() {
    return WatchCreateRequest_FilterType_descriptor();
  }
  template<typename T>
  static inline const std::string& FilterType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FilterType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FilterType_Name.");
    return WatchCreateRequest_FilterType_Name(enum_t_value);
  }
  static inline bool FilterType_Parse(const std::string& name,
      FilterType* value) {
    return WatchCreateRequest_FilterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 5,
    kKeyFieldNumber = 1,
    kRangeEndFieldNumber = 2,
    kStartRevisionFieldNumber = 3,
    kWatchIdFieldNumber = 7,
    kProgressNotifyFieldNumber = 4,
    kPrevKvFieldNumber = 6,
    kFragmentFieldNumber = 8,
  };
  // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
  int filters_size() const;
  void clear_filters();
  ::etcdserverpb::WatchCreateRequest_FilterType filters(int index) const;
  void set_filters(int index, ::etcdserverpb::WatchCreateRequest_FilterType value);
  void add_filters(::etcdserverpb::WatchCreateRequest_FilterType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& filters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_filters();

  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // bytes range_end = 2;
  void clear_range_end();
  const std::string& range_end() const;
  void set_range_end(const std::string& value);
  void set_range_end(std::string&& value);
  void set_range_end(const char* value);
  void set_range_end(const void* value, size_t size);
  std::string* mutable_range_end();
  std::string* release_range_end();
  void set_allocated_range_end(std::string* range_end);

  // int64 start_revision = 3;
  void clear_start_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 start_revision() const;
  void set_start_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 watch_id = 7;
  void clear_watch_id();
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id() const;
  void set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool progress_notify = 4;
  void clear_progress_notify();
  bool progress_notify() const;
  void set_progress_notify(bool value);

  // bool prev_kv = 6;
  void clear_prev_kv();
  bool prev_kv() const;
  void set_prev_kv(bool value);

  // bool fragment = 8;
  void clear_fragment();
  bool fragment() const;
  void set_fragment(bool value);

  // @@protoc_insertion_point(class_scope:etcdserverpb.WatchCreateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> filters_;
  mutable std::atomic<int> _filters_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_end_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id_;
  bool progress_notify_;
  bool prev_kv_;
  bool fragment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_2eproto;
};
// -------------------------------------------------------------------

class WatchCancelRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.WatchCancelRequest) */ {
 public:
  WatchCancelRequest();
  virtual ~WatchCancelRequest();

  WatchCancelRequest(const WatchCancelRequest& from);
  WatchCancelRequest(WatchCancelRequest&& from) noexcept
    : WatchCancelRequest() {
    *this = ::std::move(from);
  }

  inline WatchCancelRequest& operator=(const WatchCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchCancelRequest& operator=(WatchCancelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchCancelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchCancelRequest* internal_default_instance() {
    return reinterpret_cast<const WatchCancelRequest*>(
               &_WatchCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WatchCancelRequest& a, WatchCancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchCancelRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchCancelRequest* New() const final {
    return CreateMaybeMessage<WatchCancelRequest>(nullptr);
  }

  WatchCancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchCancelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchCancelRequest& from);
  void MergeFrom(const WatchCancelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchCancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.WatchCancelRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_2eproto);
    return ::descriptor_table_etcd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWatchIdFieldNumber = 1,
  };
  // int64 watch_id = 1;
  void clear_watch_id();
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id() const;
  void set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:etcdserverpb.WatchCancelRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_2eproto;
};
// -------------------------------------------------------------------

class WatchProgressRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.WatchProgressRequest) */ {
 public:
  WatchProgressRequest();
  virtual ~WatchProgressRequest();

  WatchProgressRequest(const WatchProgressRequest& from);
  WatchProgressRequest(WatchProgressRequest&& from) noexcept
    : WatchProgressRequest() {
    *this = ::std::move(from);
  }

  inline WatchProgressRequest& operator=(const WatchProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchProgressRequest& operator=(WatchProgressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchProgressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchProgressRequest* internal_default_instance() {
    return reinterpret_cast<const WatchProgressRequest*>(
               &_WatchProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WatchProgressRequest& a, WatchProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchProgressRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchProgressRequest* New() const final {
    return CreateMaybeMessage<WatchProgressRequest>(nullptr);
  }

  WatchProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchProgressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchProgressRequest& from);
  void MergeFrom(const WatchProgressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchProgressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.WatchProgressRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_2eproto);
    return ::descriptor_table_etcd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.WatchProgressRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_2eproto;
};
// -------------------------------------------------------------------

class WatchResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.WatchResponse) */ {
 public:
  WatchResponse();
  virtual ~WatchResponse();

  WatchResponse(const WatchResponse& from);
  WatchResponse(WatchResponse&& from) noexcept
    : WatchResponse() {
    *this = ::std::move(from);
  }

  inline WatchResponse& operator=(const WatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchResponse& operator=(WatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchResponse* internal_default_instance() {
    return reinterpret_cast<const WatchResponse*>(
               &_WatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WatchResponse& a, WatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchResponse* New() const final {
    return CreateMaybeMessage<WatchResponse>(nullptr);
  }

  WatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchResponse& from);
  void MergeFrom(const WatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.WatchResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_2eproto);
    return ::descriptor_table_etcd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 11,
    kCancelReasonFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kWatchIdFieldNumber = 2,
    kCompactRevisionFieldNumber = 5,
    kCreatedFieldNumber = 3,
    kCanceledFieldNumber = 4,
    kFragmentFieldNumber = 7,
  };
  // repeated .etcdserverpb.Event events = 11;
  int events_size() const;
  void clear_events();
  ::etcdserverpb::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Event >*
      mutable_events();
  const ::etcdserverpb::Event& events(int index) const;
  ::etcdserverpb::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Event >&
      events() const;

  // string cancel_reason = 6;
  void clear_cancel_reason();
  const std::string& cancel_reason() const;
  void set_cancel_reason(const std::string& value);
  void set_cancel_reason(std::string&& value);
  void set_cancel_reason(const char* value);
  void set_cancel_reason(const char* value, size_t size);
  std::string* mutable_cancel_reason();
  std::string* release_cancel_reason();
  void set_allocated_cancel_reason(std::string* cancel_reason);

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);

  // int64 watch_id = 2;
  void clear_watch_id();
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id() const;
  void set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 compact_revision = 5;
  void clear_compact_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 compact_revision() const;
  void set_compact_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool created = 3;
  void clear_created();
  bool created() const;
  void set_created(bool value);

  // bool canceled = 4;
  void clear_canceled();
  bool canceled() const;
  void set_canceled(bool value);

  // bool fragment = 7;
  void clear_fragment();
  bool fragment() const;
  void set_fragment(bool value);

  // @@protoc_insertion_point(class_scope:etcdserverpb.WatchResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Event > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_reason_;
  ::etcdserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 compact_revision_;
  bool created_;
  bool canceled_;
  bool fragment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_2eproto;
};
// -------------------------------------------------------------------

class ResponseHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.ResponseHeader) */ {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);
  ResponseHeader(ResponseHeader&& from) noexcept
    : ResponseHeader() {
    *this = ::std::move(from);
  }

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseHeader& operator=(ResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseHeader* internal_default_instance() {
    return reinterpret_cast<const ResponseHeader*>(
               &_ResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResponseHeader& a, ResponseHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseHeader* New() const final {
    return CreateMaybeMessage<ResponseHeader>(nullptr);
  }

  ResponseHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.ResponseHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_2eproto);
    return ::descriptor_table_etcd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusterIdFieldNumber = 1,
    kMemberIdFieldNumber = 2,
    kRevisionFieldNumber = 3,
    kRaftTermFieldNumber = 4,
  };
  // uint64 cluster_id = 1;
  void clear_cluster_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id() const;
  void set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 member_id = 2;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int64 revision = 3;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // uint64 raft_term = 4;
  void clear_raft_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 raft_term() const;
  void set_raft_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:etcdserverpb.ResponseHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 revision_;
  ::PROTOBUF_NAMESPACE_ID::uint64 raft_term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_2eproto;
};
// -------------------------------------------------------------------

class KeyValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.KeyValue) */ {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.KeyValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_2eproto);
    return ::descriptor_table_etcd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 5,
    kCreateRevisionFieldNumber = 2,
    kModRevisionFieldNumber = 3,
    kVersionFieldNumber = 4,
    kLeaseFieldNumber = 6,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // bytes value = 5;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // int64 create_revision = 2;
  void clear_create_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 create_revision() const;
  void set_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 mod_revision = 3;
  void clear_mod_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 mod_revision() const;
  void set_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 version = 4;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 lease = 6;
  void clear_lease();
  ::PROTOBUF_NAMESPACE_ID::int64 lease() const;
  void set_lease(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:etcdserverpb.KeyValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 mod_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 lease_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.Event";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcd_2eproto);
    return ::descriptor_table_etcd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Event_EventType EventType;
  static constexpr EventType PUT =
    Event_EventType_PUT;
  static constexpr EventType DELETE =
    Event_EventType_DELETE;
  static inline bool EventType_IsValid(int value) {
    return Event_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    Event_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    Event_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    Event_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return Event_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return Event_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(const std::string& name,
      EventType* value) {
    return Event_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKvFieldNumber = 2,
    kPrevKvFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .etcdserverpb.KeyValue kv = 2;
  bool has_kv() const;
  void clear_kv();
  const ::etcdserverpb::KeyValue& kv() const;
  ::etcdserverpb::KeyValue* release_kv();
  ::etcdserverpb::KeyValue* mutable_kv();
  void set_allocated_kv(::etcdserverpb::KeyValue* kv);

  // .etcdserverpb.KeyValue prev_kv = 3;
  bool has_prev_kv() const;
  void clear_prev_kv();
  const ::etcdserverpb::KeyValue& prev_kv() const;
  ::etcdserverpb::KeyValue* release_prev_kv();
  ::etcdserverpb::KeyValue* mutable_prev_kv();
  void set_allocated_prev_kv(::etcdserverpb::KeyValue* prev_kv);

  // .etcdserverpb.Event.EventType type = 1;
  void clear_type();
  ::etcdserverpb::Event_EventType type() const;
  void set_type(::etcdserverpb::Event_EventType value);

  // @@protoc_insertion_point(class_scope:etcdserverpb.Event)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::KeyValue* kv_;
  ::etcdserverpb::KeyValue* prev_kv_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etcd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WatchRequest

// .etcdserverpb.WatchCreateRequest create_request = 1;
inline bool WatchRequest::has_create_request() const {
  return request_union_case() == kCreateRequest;
}
inline void WatchRequest::set_has_create_request() {
  _oneof_case_[0] = kCreateRequest;
}
inline void WatchRequest::clear_create_request() {
  if (has_create_request()) {
    delete request_union_.create_request_;
    clear_has_request_union();
  }
}
inline ::etcdserverpb::WatchCreateRequest* WatchRequest::release_create_request() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchRequest.create_request)
  if (has_create_request()) {
    clear_has_request_union();
      ::etcdserverpb::WatchCreateRequest* temp = request_union_.create_request_;
    request_union_.create_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::WatchCreateRequest& WatchRequest::create_request() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchRequest.create_request)
  return has_create_request()
      ? *request_union_.create_request_
      : *reinterpret_cast< ::etcdserverpb::WatchCreateRequest*>(&::etcdserverpb::_WatchCreateRequest_default_instance_);
}
inline ::etcdserverpb::WatchCreateRequest* WatchRequest::mutable_create_request() {
  if (!has_create_request()) {
    clear_request_union();
    set_has_create_request();
    request_union_.create_request_ = CreateMaybeMessage< ::etcdserverpb::WatchCreateRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchRequest.create_request)
  return request_union_.create_request_;
}

// .etcdserverpb.WatchCancelRequest cancel_request = 2;
inline bool WatchRequest::has_cancel_request() const {
  return request_union_case() == kCancelRequest;
}
inline void WatchRequest::set_has_cancel_request() {
  _oneof_case_[0] = kCancelRequest;
}
inline void WatchRequest::clear_cancel_request() {
  if (has_cancel_request()) {
    delete request_union_.cancel_request_;
    clear_has_request_union();
  }
}
inline ::etcdserverpb::WatchCancelRequest* WatchRequest::release_cancel_request() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchRequest.cancel_request)
  if (has_cancel_request()) {
    clear_has_request_union();
      ::etcdserverpb::WatchCancelRequest* temp = request_union_.cancel_request_;
    request_union_.cancel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::WatchCancelRequest& WatchRequest::cancel_request() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchRequest.cancel_request)
  return has_cancel_request()
      ? *request_union_.cancel_request_
      : *reinterpret_cast< ::etcdserverpb::WatchCancelRequest*>(&::etcdserverpb::_WatchCancelRequest_default_instance_);
}
inline ::etcdserverpb::WatchCancelRequest* WatchRequest::mutable_cancel_request() {
  if (!has_cancel_request()) {
    clear_request_union();
    set_has_cancel_request();
    request_union_.cancel_request_ = CreateMaybeMessage< ::etcdserverpb::WatchCancelRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchRequest.cancel_request)
  return request_union_.cancel_request_;
}

// .etcdserverpb.WatchProgressRequest progress_request = 3;
inline bool WatchRequest::has_progress_request() const {
  return request_union_case() == kProgressRequest;
}
inline void WatchRequest::set_has_progress_request() {
  _oneof_case_[0] = kProgressRequest;
}
inline void WatchRequest::clear_progress_request() {
  if (has_progress_request()) {
    delete request_union_.progress_request_;
    clear_has_request_union();
  }
}
inline ::etcdserverpb::WatchProgressRequest* WatchRequest::release_progress_request() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchRequest.progress_request)
  if (has_progress_request()) {
    clear_has_request_union();
      ::etcdserverpb::WatchProgressRequest* temp = request_union_.progress_request_;
    request_union_.progress_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::WatchProgressRequest& WatchRequest::progress_request() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchRequest.progress_request)
  return has_progress_request()
      ? *request_union_.progress_request_
      : *reinterpret_cast< ::etcdserverpb::WatchProgressRequest*>(&::etcdserverpb::_WatchProgressRequest_default_instance_);
}
inline ::etcdserverpb::WatchProgressRequest* WatchRequest::mutable_progress_request() {
  if (!has_progress_request()) {
    clear_request_union();
    set_has_progress_request();
    request_union_.progress_request_ = CreateMaybeMessage< ::etcdserverpb::WatchProgressRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchRequest.progress_request)
  return request_union_.progress_request_;
}

inline bool WatchRequest::has_request_union() const {
  return request_union_case() != REQUEST_UNION_NOT_SET;
}
inline void WatchRequest::clear_has_request_union() {
  _oneof_case_[0] = REQUEST_UNION_NOT_SET;
}
inline WatchRequest::RequestUnionCase WatchRequest::request_union_case() const {
  return WatchRequest::RequestUnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WatchCreateRequest

// bytes key = 1;
inline void WatchCreateRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WatchCreateRequest::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.key)
  return key_.GetNoArena();
}
inline void WatchCreateRequest::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.key)
}
inline void WatchCreateRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.WatchCreateRequest.key)
}
inline void WatchCreateRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.WatchCreateRequest.key)
}
inline void WatchCreateRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.WatchCreateRequest.key)
}
inline std::string* WatchCreateRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchCreateRequest.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WatchCreateRequest::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchCreateRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WatchCreateRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchCreateRequest.key)
}

// bytes range_end = 2;
inline void WatchCreateRequest::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WatchCreateRequest::range_end() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.range_end)
  return range_end_.GetNoArena();
}
inline void WatchCreateRequest::set_range_end(const std::string& value) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.range_end)
}
inline void WatchCreateRequest::set_range_end(std::string&& value) {
  
  range_end_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.WatchCreateRequest.range_end)
}
inline void WatchCreateRequest::set_range_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.WatchCreateRequest.range_end)
}
inline void WatchCreateRequest::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.WatchCreateRequest.range_end)
}
inline std::string* WatchCreateRequest::mutable_range_end() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchCreateRequest.range_end)
  return range_end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WatchCreateRequest::release_range_end() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchCreateRequest.range_end)
  
  return range_end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WatchCreateRequest::set_allocated_range_end(std::string* range_end) {
  if (range_end != nullptr) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchCreateRequest.range_end)
}

// int64 start_revision = 3;
inline void WatchCreateRequest::clear_start_revision() {
  start_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchCreateRequest::start_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.start_revision)
  return start_revision_;
}
inline void WatchCreateRequest::set_start_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.start_revision)
}

// bool progress_notify = 4;
inline void WatchCreateRequest::clear_progress_notify() {
  progress_notify_ = false;
}
inline bool WatchCreateRequest::progress_notify() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.progress_notify)
  return progress_notify_;
}
inline void WatchCreateRequest::set_progress_notify(bool value) {
  
  progress_notify_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.progress_notify)
}

// repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
inline int WatchCreateRequest::filters_size() const {
  return filters_.size();
}
inline void WatchCreateRequest::clear_filters() {
  filters_.Clear();
}
inline ::etcdserverpb::WatchCreateRequest_FilterType WatchCreateRequest::filters(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.filters)
  return static_cast< ::etcdserverpb::WatchCreateRequest_FilterType >(filters_.Get(index));
}
inline void WatchCreateRequest::set_filters(int index, ::etcdserverpb::WatchCreateRequest_FilterType value) {
  filters_.Set(index, value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.filters)
}
inline void WatchCreateRequest::add_filters(::etcdserverpb::WatchCreateRequest_FilterType value) {
  filters_.Add(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.WatchCreateRequest.filters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
WatchCreateRequest::filters() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.WatchCreateRequest.filters)
  return filters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
WatchCreateRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.WatchCreateRequest.filters)
  return &filters_;
}

// bool prev_kv = 6;
inline void WatchCreateRequest::clear_prev_kv() {
  prev_kv_ = false;
}
inline bool WatchCreateRequest::prev_kv() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.prev_kv)
  return prev_kv_;
}
inline void WatchCreateRequest::set_prev_kv(bool value) {
  
  prev_kv_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.prev_kv)
}

// int64 watch_id = 7;
inline void WatchCreateRequest::clear_watch_id() {
  watch_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchCreateRequest::watch_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.watch_id)
  return watch_id_;
}
inline void WatchCreateRequest::set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  watch_id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.watch_id)
}

// bool fragment = 8;
inline void WatchCreateRequest::clear_fragment() {
  fragment_ = false;
}
inline bool WatchCreateRequest::fragment() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.fragment)
  return fragment_;
}
inline void WatchCreateRequest::set_fragment(bool value) {
  
  fragment_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.fragment)
}

// -------------------------------------------------------------------

// WatchCancelRequest

// int64 watch_id = 1;
inline void WatchCancelRequest::clear_watch_id() {
  watch_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchCancelRequest::watch_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCancelRequest.watch_id)
  return watch_id_;
}
inline void WatchCancelRequest::set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  watch_id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCancelRequest.watch_id)
}

// -------------------------------------------------------------------

// WatchProgressRequest

// -------------------------------------------------------------------

// WatchResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool WatchResponse::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void WatchResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& WatchResponse::header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline ::etcdserverpb::ResponseHeader* WatchResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* WatchResponse::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchResponse.header)
  return header_;
}
inline void WatchResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchResponse.header)
}

// int64 watch_id = 2;
inline void WatchResponse::clear_watch_id() {
  watch_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchResponse::watch_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.watch_id)
  return watch_id_;
}
inline void WatchResponse::set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  watch_id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.watch_id)
}

// bool created = 3;
inline void WatchResponse::clear_created() {
  created_ = false;
}
inline bool WatchResponse::created() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.created)
  return created_;
}
inline void WatchResponse::set_created(bool value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.created)
}

// bool canceled = 4;
inline void WatchResponse::clear_canceled() {
  canceled_ = false;
}
inline bool WatchResponse::canceled() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.canceled)
  return canceled_;
}
inline void WatchResponse::set_canceled(bool value) {
  
  canceled_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.canceled)
}

// int64 compact_revision = 5;
inline void WatchResponse::clear_compact_revision() {
  compact_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchResponse::compact_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.compact_revision)
  return compact_revision_;
}
inline void WatchResponse::set_compact_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  compact_revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.compact_revision)
}

// string cancel_reason = 6;
inline void WatchResponse::clear_cancel_reason() {
  cancel_reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WatchResponse::cancel_reason() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.cancel_reason)
  return cancel_reason_.GetNoArena();
}
inline void WatchResponse::set_cancel_reason(const std::string& value) {
  
  cancel_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.cancel_reason)
}
inline void WatchResponse::set_cancel_reason(std::string&& value) {
  
  cancel_reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.WatchResponse.cancel_reason)
}
inline void WatchResponse::set_cancel_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cancel_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.WatchResponse.cancel_reason)
}
inline void WatchResponse::set_cancel_reason(const char* value, size_t size) {
  
  cancel_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.WatchResponse.cancel_reason)
}
inline std::string* WatchResponse::mutable_cancel_reason() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchResponse.cancel_reason)
  return cancel_reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WatchResponse::release_cancel_reason() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchResponse.cancel_reason)
  
  return cancel_reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WatchResponse::set_allocated_cancel_reason(std::string* cancel_reason) {
  if (cancel_reason != nullptr) {
    
  } else {
    
  }
  cancel_reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cancel_reason);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchResponse.cancel_reason)
}

// bool fragment = 7;
inline void WatchResponse::clear_fragment() {
  fragment_ = false;
}
inline bool WatchResponse::fragment() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.fragment)
  return fragment_;
}
inline void WatchResponse::set_fragment(bool value) {
  
  fragment_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.fragment)
}

// repeated .etcdserverpb.Event events = 11;
inline int WatchResponse::events_size() const {
  return events_.size();
}
inline void WatchResponse::clear_events() {
  events_.Clear();
}
inline ::etcdserverpb::Event* WatchResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchResponse.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Event >*
WatchResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.WatchResponse.events)
  return &events_;
}
inline const ::etcdserverpb::Event& WatchResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.events)
  return events_.Get(index);
}
inline ::etcdserverpb::Event* WatchResponse::add_events() {
  // @@protoc_insertion_point(field_add:etcdserverpb.WatchResponse.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Event >&
WatchResponse::events() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.WatchResponse.events)
  return events_;
}

// -------------------------------------------------------------------

// ResponseHeader

// uint64 cluster_id = 1;
inline void ResponseHeader::clear_cluster_id() {
  cluster_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.cluster_id)
  return cluster_id_;
}
inline void ResponseHeader::set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.cluster_id)
}

// uint64 member_id = 2;
inline void ResponseHeader::clear_member_id() {
  member_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::member_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.member_id)
  return member_id_;
}
inline void ResponseHeader::set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  member_id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.member_id)
}

// int64 revision = 3;
inline void ResponseHeader::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseHeader::revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.revision)
  return revision_;
}
inline void ResponseHeader::set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.revision)
}

// uint64 raft_term = 4;
inline void ResponseHeader::clear_raft_term() {
  raft_term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::raft_term() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.raft_term)
  return raft_term_;
}
inline void ResponseHeader::set_raft_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  raft_term_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.raft_term)
}

// -------------------------------------------------------------------

// KeyValue

// bytes key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.KeyValue.key)
  return key_.GetNoArena();
}
inline void KeyValue::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.KeyValue.key)
}
inline void KeyValue::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.KeyValue.key)
}
inline void KeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.KeyValue.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.KeyValue.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.KeyValue.key)
}

// int64 create_revision = 2;
inline void KeyValue::clear_create_revision() {
  create_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::create_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.KeyValue.create_revision)
  return create_revision_;
}
inline void KeyValue::set_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  create_revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.KeyValue.create_revision)
}

// int64 mod_revision = 3;
inline void KeyValue::clear_mod_revision() {
  mod_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::mod_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.KeyValue.mod_revision)
  return mod_revision_;
}
inline void KeyValue::set_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mod_revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.KeyValue.mod_revision)
}

// int64 version = 4;
inline void KeyValue::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::version() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.KeyValue.version)
  return version_;
}
inline void KeyValue::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.KeyValue.version)
}

// bytes value = 5;
inline void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.KeyValue.value)
  return value_.GetNoArena();
}
inline void KeyValue::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.KeyValue.value)
}
inline void KeyValue::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.KeyValue.value)
}
inline void KeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.KeyValue.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:etcdserverpb.KeyValue.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.KeyValue.value)
}

// int64 lease = 6;
inline void KeyValue::clear_lease() {
  lease_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::lease() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.KeyValue.lease)
  return lease_;
}
inline void KeyValue::set_lease(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lease_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.KeyValue.lease)
}

// -------------------------------------------------------------------

// Event

// .etcdserverpb.Event.EventType type = 1;
inline void Event::clear_type() {
  type_ = 0;
}
inline ::etcdserverpb::Event_EventType Event::type() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Event.type)
  return static_cast< ::etcdserverpb::Event_EventType >(type_);
}
inline void Event::set_type(::etcdserverpb::Event_EventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.Event.type)
}

// .etcdserverpb.KeyValue kv = 2;
inline bool Event::has_kv() const {
  return this != internal_default_instance() && kv_ != nullptr;
}
inline void Event::clear_kv() {
  if (GetArenaNoVirtual() == nullptr && kv_ != nullptr) {
    delete kv_;
  }
  kv_ = nullptr;
}
inline const ::etcdserverpb::KeyValue& Event::kv() const {
  const ::etcdserverpb::KeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:etcdserverpb.Event.kv)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::KeyValue*>(
      &::etcdserverpb::_KeyValue_default_instance_);
}
inline ::etcdserverpb::KeyValue* Event::release_kv() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Event.kv)
  
  ::etcdserverpb::KeyValue* temp = kv_;
  kv_ = nullptr;
  return temp;
}
inline ::etcdserverpb::KeyValue* Event::mutable_kv() {
  
  if (kv_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::KeyValue>(GetArenaNoVirtual());
    kv_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Event.kv)
  return kv_;
}
inline void Event::set_allocated_kv(::etcdserverpb::KeyValue* kv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kv_;
  }
  if (kv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kv, submessage_arena);
    }
    
  } else {
    
  }
  kv_ = kv;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Event.kv)
}

// .etcdserverpb.KeyValue prev_kv = 3;
inline bool Event::has_prev_kv() const {
  return this != internal_default_instance() && prev_kv_ != nullptr;
}
inline void Event::clear_prev_kv() {
  if (GetArenaNoVirtual() == nullptr && prev_kv_ != nullptr) {
    delete prev_kv_;
  }
  prev_kv_ = nullptr;
}
inline const ::etcdserverpb::KeyValue& Event::prev_kv() const {
  const ::etcdserverpb::KeyValue* p = prev_kv_;
  // @@protoc_insertion_point(field_get:etcdserverpb.Event.prev_kv)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::KeyValue*>(
      &::etcdserverpb::_KeyValue_default_instance_);
}
inline ::etcdserverpb::KeyValue* Event::release_prev_kv() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Event.prev_kv)
  
  ::etcdserverpb::KeyValue* temp = prev_kv_;
  prev_kv_ = nullptr;
  return temp;
}
inline ::etcdserverpb::KeyValue* Event::mutable_prev_kv() {
  
  if (prev_kv_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::KeyValue>(GetArenaNoVirtual());
    prev_kv_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Event.prev_kv)
  return prev_kv_;
}
inline void Event::set_allocated_prev_kv(::etcdserverpb::KeyValue* prev_kv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prev_kv_;
  }
  if (prev_kv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prev_kv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_kv, submessage_arena);
    }
    
  } else {
    
  }
  prev_kv_ = prev_kv;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Event.prev_kv)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace etcdserverpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::etcdserverpb::WatchCreateRequest_FilterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etcdserverpb::WatchCreateRequest_FilterType>() {
  return ::etcdserverpb::WatchCreateRequest_FilterType_descriptor();
}
template <> struct is_proto_enum< ::etcdserverpb::Event_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etcdserverpb::Event_EventType>() {
  return ::etcdserverpb::Event_EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_etcd_2eproto
