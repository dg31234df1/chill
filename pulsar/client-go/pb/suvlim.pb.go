// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        (unknown)
// source: suvlim.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ErrorCode int32

const (
	ErrorCode_SUCCESS                 ErrorCode = 0
	ErrorCode_UNEXPECTED_ERROR        ErrorCode = 1
	ErrorCode_CONNECT_FAILED          ErrorCode = 2
	ErrorCode_PERMISSION_DENIED       ErrorCode = 3
	ErrorCode_COLLECTION_NOT_EXISTS   ErrorCode = 4
	ErrorCode_ILLEGAL_ARGUMENT        ErrorCode = 5
	ErrorCode_ILLEGAL_DIMENSION       ErrorCode = 7
	ErrorCode_ILLEGAL_INDEX_TYPE      ErrorCode = 8
	ErrorCode_ILLEGAL_COLLECTION_NAME ErrorCode = 9
	ErrorCode_ILLEGAL_TOPK            ErrorCode = 10
	ErrorCode_ILLEGAL_ROWRECORD       ErrorCode = 11
	ErrorCode_ILLEGAL_VECTOR_ID       ErrorCode = 12
	ErrorCode_ILLEGAL_SEARCH_RESULT   ErrorCode = 13
	ErrorCode_FILE_NOT_FOUND          ErrorCode = 14
	ErrorCode_META_FAILED             ErrorCode = 15
	ErrorCode_CACHE_FAILED            ErrorCode = 16
	ErrorCode_CANNOT_CREATE_FOLDER    ErrorCode = 17
	ErrorCode_CANNOT_CREATE_FILE      ErrorCode = 18
	ErrorCode_CANNOT_DELETE_FOLDER    ErrorCode = 19
	ErrorCode_CANNOT_DELETE_FILE      ErrorCode = 20
	ErrorCode_BUILD_INDEX_ERROR       ErrorCode = 21
	ErrorCode_ILLEGAL_NLIST           ErrorCode = 22
	ErrorCode_ILLEGAL_METRIC_TYPE     ErrorCode = 23
	ErrorCode_OUT_OF_MEMORY           ErrorCode = 24
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "UNEXPECTED_ERROR",
		2:  "CONNECT_FAILED",
		3:  "PERMISSION_DENIED",
		4:  "COLLECTION_NOT_EXISTS",
		5:  "ILLEGAL_ARGUMENT",
		7:  "ILLEGAL_DIMENSION",
		8:  "ILLEGAL_INDEX_TYPE",
		9:  "ILLEGAL_COLLECTION_NAME",
		10: "ILLEGAL_TOPK",
		11: "ILLEGAL_ROWRECORD",
		12: "ILLEGAL_VECTOR_ID",
		13: "ILLEGAL_SEARCH_RESULT",
		14: "FILE_NOT_FOUND",
		15: "META_FAILED",
		16: "CACHE_FAILED",
		17: "CANNOT_CREATE_FOLDER",
		18: "CANNOT_CREATE_FILE",
		19: "CANNOT_DELETE_FOLDER",
		20: "CANNOT_DELETE_FILE",
		21: "BUILD_INDEX_ERROR",
		22: "ILLEGAL_NLIST",
		23: "ILLEGAL_METRIC_TYPE",
		24: "OUT_OF_MEMORY",
	}
	ErrorCode_value = map[string]int32{
		"SUCCESS":                 0,
		"UNEXPECTED_ERROR":        1,
		"CONNECT_FAILED":          2,
		"PERMISSION_DENIED":       3,
		"COLLECTION_NOT_EXISTS":   4,
		"ILLEGAL_ARGUMENT":        5,
		"ILLEGAL_DIMENSION":       7,
		"ILLEGAL_INDEX_TYPE":      8,
		"ILLEGAL_COLLECTION_NAME": 9,
		"ILLEGAL_TOPK":            10,
		"ILLEGAL_ROWRECORD":       11,
		"ILLEGAL_VECTOR_ID":       12,
		"ILLEGAL_SEARCH_RESULT":   13,
		"FILE_NOT_FOUND":          14,
		"META_FAILED":             15,
		"CACHE_FAILED":            16,
		"CANNOT_CREATE_FOLDER":    17,
		"CANNOT_CREATE_FILE":      18,
		"CANNOT_DELETE_FOLDER":    19,
		"CANNOT_DELETE_FILE":      20,
		"BUILD_INDEX_ERROR":       21,
		"ILLEGAL_NLIST":           22,
		"ILLEGAL_METRIC_TYPE":     23,
		"OUT_OF_MEMORY":           24,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_suvlim_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_suvlim_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{0}
}

//*
// @brief Field data type
type DataType int32

const (
	DataType_NONE          DataType = 0
	DataType_BOOL          DataType = 1
	DataType_INT8          DataType = 2
	DataType_INT16         DataType = 3
	DataType_INT32         DataType = 4
	DataType_INT64         DataType = 5
	DataType_FLOAT         DataType = 10
	DataType_DOUBLE        DataType = 11
	DataType_STRING        DataType = 20
	DataType_VECTOR_BINARY DataType = 100
	DataType_VECTOR_FLOAT  DataType = 101
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:   "NONE",
		1:   "BOOL",
		2:   "INT8",
		3:   "INT16",
		4:   "INT32",
		5:   "INT64",
		10:  "FLOAT",
		11:  "DOUBLE",
		20:  "STRING",
		100: "VECTOR_BINARY",
		101: "VECTOR_FLOAT",
	}
	DataType_value = map[string]int32{
		"NONE":          0,
		"BOOL":          1,
		"INT8":          2,
		"INT16":         3,
		"INT32":         4,
		"INT64":         5,
		"FLOAT":         10,
		"DOUBLE":        11,
		"STRING":        20,
		"VECTOR_BINARY": 100,
		"VECTOR_FLOAT":  101,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_suvlim_proto_enumTypes[1].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_suvlim_proto_enumTypes[1]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{1}
}

type CompareOperator int32

const (
	CompareOperator_LT  CompareOperator = 0
	CompareOperator_LTE CompareOperator = 1
	CompareOperator_EQ  CompareOperator = 2
	CompareOperator_GT  CompareOperator = 3
	CompareOperator_GTE CompareOperator = 4
	CompareOperator_NE  CompareOperator = 5
)

// Enum value maps for CompareOperator.
var (
	CompareOperator_name = map[int32]string{
		0: "LT",
		1: "LTE",
		2: "EQ",
		3: "GT",
		4: "GTE",
		5: "NE",
	}
	CompareOperator_value = map[string]int32{
		"LT":  0,
		"LTE": 1,
		"EQ":  2,
		"GT":  3,
		"GTE": 4,
		"NE":  5,
	}
)

func (x CompareOperator) Enum() *CompareOperator {
	p := new(CompareOperator)
	*p = x
	return p
}

func (x CompareOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompareOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_suvlim_proto_enumTypes[2].Descriptor()
}

func (CompareOperator) Type() protoreflect.EnumType {
	return &file_suvlim_proto_enumTypes[2]
}

func (x CompareOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompareOperator.Descriptor instead.
func (CompareOperator) EnumDescriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{2}
}

type Occur int32

const (
	Occur_INVALID  Occur = 0
	Occur_MUST     Occur = 1
	Occur_SHOULD   Occur = 2
	Occur_MUST_NOT Occur = 3
)

// Enum value maps for Occur.
var (
	Occur_name = map[int32]string{
		0: "INVALID",
		1: "MUST",
		2: "SHOULD",
		3: "MUST_NOT",
	}
	Occur_value = map[string]int32{
		"INVALID":  0,
		"MUST":     1,
		"SHOULD":   2,
		"MUST_NOT": 3,
	}
)

func (x Occur) Enum() *Occur {
	p := new(Occur)
	*p = x
	return p
}

func (x Occur) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Occur) Descriptor() protoreflect.EnumDescriptor {
	return file_suvlim_proto_enumTypes[3].Descriptor()
}

func (Occur) Type() protoreflect.EnumType {
	return &file_suvlim_proto_enumTypes[3]
}

func (x Occur) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Occur.Descriptor instead.
func (Occur) EnumDescriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{3}
}

////////////////////pulsar//////////////////////////////////////
type OpType int32

const (
	OpType_INSERT        OpType = 0
	OpType_DELETE        OpType = 1
	OpType_SEARCH        OpType = 2
	OpType_SEARCH_RESULT OpType = 3
)

// Enum value maps for OpType.
var (
	OpType_name = map[int32]string{
		0: "INSERT",
		1: "DELETE",
		2: "SEARCH",
		3: "SEARCH_RESULT",
	}
	OpType_value = map[string]int32{
		"INSERT":        0,
		"DELETE":        1,
		"SEARCH":        2,
		"SEARCH_RESULT": 3,
	}
)

func (x OpType) Enum() *OpType {
	p := new(OpType)
	*p = x
	return p
}

func (x OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_suvlim_proto_enumTypes[4].Descriptor()
}

func (OpType) Type() protoreflect.EnumType {
	return &file_suvlim_proto_enumTypes[4]
}

func (x OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpType.Descriptor instead.
func (OpType) EnumDescriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{4}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=milvus.grpc.ErrorCode" json:"error_code,omitempty"`
	Reason    string    `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_SUCCESS
}

func (x *Status) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//*
// @brief General usage
type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{1}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//*
// @brief Collection name
type CollectionName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
}

func (x *CollectionName) Reset() {
	*x = CollectionName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionName) ProtoMessage() {}

func (x *CollectionName) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionName.ProtoReflect.Descriptor instead.
func (*CollectionName) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{2}
}

func (x *CollectionName) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

//*
// @brief Collection name list
type CollectionNameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionNames []string `protobuf:"bytes,2,rep,name=collection_names,json=collectionNames,proto3" json:"collection_names,omitempty"`
}

func (x *CollectionNameList) Reset() {
	*x = CollectionNameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionNameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionNameList) ProtoMessage() {}

func (x *CollectionNameList) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionNameList.ProtoReflect.Descriptor instead.
func (*CollectionNameList) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{3}
}

func (x *CollectionNameList) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CollectionNameList) GetCollectionNames() []string {
	if x != nil {
		return x.CollectionNames
	}
	return nil
}

//*
// @brief Field name
type FieldName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	FieldName      string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *FieldName) Reset() {
	*x = FieldName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldName) ProtoMessage() {}

func (x *FieldName) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldName.ProtoReflect.Descriptor instead.
func (*FieldName) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{4}
}

func (x *FieldName) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *FieldName) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

//*
// @brief Collection mapping
// @extra_params: key-value pair for extra parameters of the collection
//    typically usage:
//        extra_params["params"] = {segment_row_count: 1000000, auto_id: true}
//    Note:
//        the segment_row_count specify segment row count limit for merging
//        the auto_id = true means entity id is auto-generated by milvus
type Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Fields         []*FieldParam   `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	ExtraParams    []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *Mapping) Reset() {
	*x = Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mapping) ProtoMessage() {}

func (x *Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mapping.ProtoReflect.Descriptor instead.
func (*Mapping) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{5}
}

func (x *Mapping) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Mapping) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *Mapping) GetFields() []*FieldParam {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Mapping) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

//*
// @brief Collection mapping list
type MappingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	MappingList []*Mapping `protobuf:"bytes,2,rep,name=mapping_list,json=mappingList,proto3" json:"mapping_list,omitempty"`
}

func (x *MappingList) Reset() {
	*x = MappingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MappingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingList) ProtoMessage() {}

func (x *MappingList) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingList.ProtoReflect.Descriptor instead.
func (*MappingList) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{6}
}

func (x *MappingList) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MappingList) GetMappingList() []*Mapping {
	if x != nil {
		return x.MappingList
	}
	return nil
}

//*
// @brief Parameters of partition
type PartitionParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Tag            string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *PartitionParam) Reset() {
	*x = PartitionParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionParam) ProtoMessage() {}

func (x *PartitionParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionParam.ProtoReflect.Descriptor instead.
func (*PartitionParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{7}
}

func (x *PartitionParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *PartitionParam) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

//*
// @brief Partition list
type PartitionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionTagArray []string `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
}

func (x *PartitionList) Reset() {
	*x = PartitionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionList) ProtoMessage() {}

func (x *PartitionList) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionList.ProtoReflect.Descriptor instead.
func (*PartitionList) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{8}
}

func (x *PartitionList) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PartitionList) GetPartitionTagArray() []string {
	if x != nil {
		return x.PartitionTagArray
	}
	return nil
}

//*
// @brief Vector row record
type VectorRowRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatData  []float32 `protobuf:"fixed32,1,rep,packed,name=float_data,json=floatData,proto3" json:"float_data,omitempty"` //float vector data
	BinaryData []byte    `protobuf:"bytes,2,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`       //binary vector data
}

func (x *VectorRowRecord) Reset() {
	*x = VectorRowRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorRowRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorRowRecord) ProtoMessage() {}

func (x *VectorRowRecord) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorRowRecord.ProtoReflect.Descriptor instead.
func (*VectorRowRecord) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{9}
}

func (x *VectorRowRecord) GetFloatData() []float32 {
	if x != nil {
		return x.FloatData
	}
	return nil
}

func (x *VectorRowRecord) GetBinaryData() []byte {
	if x != nil {
		return x.BinaryData
	}
	return nil
}

type EntityIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntityIdArray []int64 `protobuf:"varint,2,rep,packed,name=entity_id_array,json=entityIdArray,proto3" json:"entity_id_array,omitempty"`
}

func (x *EntityIds) Reset() {
	*x = EntityIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityIds) ProtoMessage() {}

func (x *EntityIds) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityIds.ProtoReflect.Descriptor instead.
func (*EntityIds) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{10}
}

func (x *EntityIds) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EntityIds) GetEntityIdArray() []int64 {
	if x != nil {
		return x.EntityIdArray
	}
	return nil
}

type VectorRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*VectorRowRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VectorRecord) Reset() {
	*x = VectorRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorRecord) ProtoMessage() {}

func (x *VectorRecord) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorRecord.ProtoReflect.Descriptor instead.
func (*VectorRecord) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{11}
}

func (x *VectorRecord) GetRecords() []*VectorRowRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type VectorParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json      string        `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
	RowRecord *VectorRecord `protobuf:"bytes,2,opt,name=row_record,json=rowRecord,proto3" json:"row_record,omitempty"`
}

func (x *VectorParam) Reset() {
	*x = VectorParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorParam) ProtoMessage() {}

func (x *VectorParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorParam.ProtoReflect.Descriptor instead.
func (*VectorParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{12}
}

func (x *VectorParam) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

func (x *VectorParam) GetRowRecord() *VectorRecord {
	if x != nil {
		return x.RowRecord
	}
	return nil
}

//*
// @brief schema
type FieldMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Type      DataType `protobuf:"varint,2,opt,name=type,proto3,enum=milvus.grpc.DataType" json:"type,omitempty"`
	Dim       int64    `protobuf:"varint,3,opt,name=dim,proto3" json:"dim,omitempty"`
}

func (x *FieldMeta) Reset() {
	*x = FieldMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMeta) ProtoMessage() {}

func (x *FieldMeta) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMeta.ProtoReflect.Descriptor instead.
func (*FieldMeta) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{13}
}

func (x *FieldMeta) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FieldMeta) GetType() DataType {
	if x != nil {
		return x.Type
	}
	return DataType_NONE
}

func (x *FieldMeta) GetDim() int64 {
	if x != nil {
		return x.Dim
	}
	return 0
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldMetas []*FieldMeta `protobuf:"bytes,1,rep,name=field_metas,json=fieldMetas,proto3" json:"field_metas,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{14}
}

func (x *Schema) GetFieldMetas() []*FieldMeta {
	if x != nil {
		return x.FieldMetas
	}
	return nil
}

type RowData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *RowData) Reset() {
	*x = RowData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowData) ProtoMessage() {}

func (x *RowData) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowData.ProtoReflect.Descriptor instead.
func (*RowData) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{15}
}

func (x *RowData) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

//////////////////////suvlim-proxy///////////////////////////////////
type InsertParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Schema         *Schema         `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	RowsData       []*RowData      `protobuf:"bytes,3,rep,name=rows_data,json=rowsData,proto3" json:"rows_data,omitempty"`
	EntityIdArray  []int64         `protobuf:"varint,4,rep,packed,name=entity_id_array,json=entityIdArray,proto3" json:"entity_id_array,omitempty"` //optional
	PartitionTag   string          `protobuf:"bytes,5,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	ExtraParams    []*KeyValuePair `protobuf:"bytes,6,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *InsertParam) Reset() {
	*x = InsertParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertParam) ProtoMessage() {}

func (x *InsertParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertParam.ProtoReflect.Descriptor instead.
func (*InsertParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{16}
}

func (x *InsertParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *InsertParam) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *InsertParam) GetRowsData() []*RowData {
	if x != nil {
		return x.RowsData
	}
	return nil
}

func (x *InsertParam) GetEntityIdArray() []int64 {
	if x != nil {
		return x.EntityIdArray
	}
	return nil
}

func (x *InsertParam) GetPartitionTag() string {
	if x != nil {
		return x.PartitionTag
	}
	return ""
}

func (x *InsertParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type SearchParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	VectorParam    []*VectorParam  `protobuf:"bytes,2,rep,name=vector_param,json=vectorParam,proto3" json:"vector_param,omitempty"`
	Dsl            string          `protobuf:"bytes,3,opt,name=dsl,proto3" json:"dsl,omitempty"`                                       //optional
	PartitionTag   []string        `protobuf:"bytes,4,rep,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"` //why
	ExtraParams    []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *SearchParam) Reset() {
	*x = SearchParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParam) ProtoMessage() {}

func (x *SearchParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParam.ProtoReflect.Descriptor instead.
func (*SearchParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{17}
}

func (x *SearchParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchParam) GetVectorParam() []*VectorParam {
	if x != nil {
		return x.VectorParam
	}
	return nil
}

func (x *SearchParam) GetDsl() string {
	if x != nil {
		return x.Dsl
	}
	return ""
}

func (x *SearchParam) GetPartitionTag() []string {
	if x != nil {
		return x.PartitionTag
	}
	return nil
}

func (x *SearchParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type SearchInSegmentParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdArray []string     `protobuf:"bytes,1,rep,name=file_id_array,json=fileIdArray,proto3" json:"file_id_array,omitempty"`
	SearchParam *SearchParam `protobuf:"bytes,2,opt,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
}

func (x *SearchInSegmentParam) Reset() {
	*x = SearchInSegmentParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInSegmentParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInSegmentParam) ProtoMessage() {}

func (x *SearchInSegmentParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInSegmentParam.ProtoReflect.Descriptor instead.
func (*SearchInSegmentParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{18}
}

func (x *SearchInSegmentParam) GetFileIdArray() []string {
	if x != nil {
		return x.FileIdArray
	}
	return nil
}

func (x *SearchInSegmentParam) GetSearchParam() *SearchParam {
	if x != nil {
		return x.SearchParam
	}
	return nil
}

type Entities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Ids      []int64    `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	ValidRow []bool     `protobuf:"varint,3,rep,packed,name=valid_row,json=validRow,proto3" json:"valid_row,omitempty"`
	RowsData []*RowData `protobuf:"bytes,4,rep,name=rows_data,json=rowsData,proto3" json:"rows_data,omitempty"`
}

func (x *Entities) Reset() {
	*x = Entities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entities) ProtoMessage() {}

func (x *Entities) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entities.ProtoReflect.Descriptor instead.
func (*Entities) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{19}
}

func (x *Entities) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Entities) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *Entities) GetValidRow() []bool {
	if x != nil {
		return x.ValidRow
	}
	return nil
}

func (x *Entities) GetRowsData() []*RowData {
	if x != nil {
		return x.RowsData
	}
	return nil
}

//*
// @brief Query result
type QueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Entities    *Entities       `protobuf:"bytes,2,opt,name=entities,proto3" json:"entities,omitempty"`
	RowNum      int64           `protobuf:"varint,3,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	Scores      []float32       `protobuf:"fixed32,4,rep,packed,name=scores,proto3" json:"scores,omitempty"`
	Distances   []float32       `protobuf:"fixed32,5,rep,packed,name=distances,proto3" json:"distances,omitempty"`
	ExtraParams []*KeyValuePair `protobuf:"bytes,6,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult.ProtoReflect.Descriptor instead.
func (*QueryResult) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{20}
}

func (x *QueryResult) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryResult) GetEntities() *Entities {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *QueryResult) GetRowNum() int64 {
	if x != nil {
		return x.RowNum
	}
	return 0
}

func (x *QueryResult) GetScores() []float32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *QueryResult) GetDistances() []float32 {
	if x != nil {
		return x.Distances
	}
	return nil
}

func (x *QueryResult) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

//*
// @brief Server string Reply
type StringReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StringReply string  `protobuf:"bytes,2,opt,name=string_reply,json=stringReply,proto3" json:"string_reply,omitempty"`
}

func (x *StringReply) Reset() {
	*x = StringReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringReply) ProtoMessage() {}

func (x *StringReply) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringReply.ProtoReflect.Descriptor instead.
func (*StringReply) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{21}
}

func (x *StringReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StringReply) GetStringReply() string {
	if x != nil {
		return x.StringReply
	}
	return ""
}

//*
// @brief Server bool Reply
type BoolReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BoolReply bool    `protobuf:"varint,2,opt,name=bool_reply,json=boolReply,proto3" json:"bool_reply,omitempty"`
}

func (x *BoolReply) Reset() {
	*x = BoolReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolReply) ProtoMessage() {}

func (x *BoolReply) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolReply.ProtoReflect.Descriptor instead.
func (*BoolReply) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{22}
}

func (x *BoolReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BoolReply) GetBoolReply() bool {
	if x != nil {
		return x.BoolReply
	}
	return false
}

//*
// @brief Return collection row count
type CollectionRowCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionRowCount int64   `protobuf:"varint,2,opt,name=collection_row_count,json=collectionRowCount,proto3" json:"collection_row_count,omitempty"`
}

func (x *CollectionRowCount) Reset() {
	*x = CollectionRowCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionRowCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionRowCount) ProtoMessage() {}

func (x *CollectionRowCount) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionRowCount.ProtoReflect.Descriptor instead.
func (*CollectionRowCount) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{23}
}

func (x *CollectionRowCount) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CollectionRowCount) GetCollectionRowCount() int64 {
	if x != nil {
		return x.CollectionRowCount
	}
	return 0
}

//*
// @brief Server command parameters
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{24}
}

func (x *Command) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

//*
// @brief Index params
// @collection_name: target collection
// @field_name: target field
// @index_name: a name for index provided by user, unique within this field
// @extra_params: index parameters in json format
//    for vector field:
//        extra_params["index_type"] = one of the values: FLAT, IVF_LAT, IVF_SQ8, NSGMIX, IVFSQ8H,
//                                                        PQ, HNSW, HNSW_SQ8NM, ANNOY
//        extra_params["metric_type"] = one of the values: L2, IP, HAMMING, JACCARD, TANIMOTO
//                                                         SUBSTRUCTURE, SUPERSTRUCTURE
//        extra_params["params"] = extra parameters for index, for example ivflat: {nlist: 2048}
//    for structured field:
//        extra_params["index_type"] = one of the values: SORTED
type IndexParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	FieldName      string          `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	IndexName      string          `protobuf:"bytes,4,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	ExtraParams    []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *IndexParam) Reset() {
	*x = IndexParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexParam) ProtoMessage() {}

func (x *IndexParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexParam.ProtoReflect.Descriptor instead.
func (*IndexParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{25}
}

func (x *IndexParam) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IndexParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *IndexParam) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *IndexParam) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *IndexParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

//*
// @brief Parameters for flush action
type FlushParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionNameArray []string `protobuf:"bytes,1,rep,name=collection_name_array,json=collectionNameArray,proto3" json:"collection_name_array,omitempty"`
}

func (x *FlushParam) Reset() {
	*x = FlushParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushParam) ProtoMessage() {}

func (x *FlushParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushParam.ProtoReflect.Descriptor instead.
func (*FlushParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{26}
}

func (x *FlushParam) GetCollectionNameArray() []string {
	if x != nil {
		return x.CollectionNameArray
	}
	return nil
}

//*
// @brief Parameters for flush action
type CompactParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string  `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Threshold      float64 `protobuf:"fixed64,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *CompactParam) Reset() {
	*x = CompactParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactParam) ProtoMessage() {}

func (x *CompactParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactParam.ProtoReflect.Descriptor instead.
func (*CompactParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{27}
}

func (x *CompactParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CompactParam) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

//*
// @brief Parameters for deleting entities by id
type DeleteByIDParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string  `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IdArray        []int64 `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
}

func (x *DeleteByIDParam) Reset() {
	*x = DeleteByIDParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteByIDParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteByIDParam) ProtoMessage() {}

func (x *DeleteByIDParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteByIDParam.ProtoReflect.Descriptor instead.
func (*DeleteByIDParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteByIDParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DeleteByIDParam) GetIdArray() []int64 {
	if x != nil {
		return x.IdArray
	}
	return nil
}

//*
// @brief Return collection stats
// @json_info: collection stats in json format, typically, the format is like:
//     {
//        row_count: xxx,
//        data_size: xxx,
//        partitions: [
//          {
//            tag: xxx,
//            id: xxx,
//            row_count: xxx,
//            data_size: xxx,
//            segments: [
//              {
//                 id: xxx,
//                 row_count: xxx,
//                 data_size: xxx,
//                 files: [
//                    {
//                       field: xxx,
//                       name: xxx,
//                       index_type: xxx,
//                       path: xxx,
//                       data_size: xxx,
//                    }
//                 ]
//              }
//            ]
//          }
//        ]
//     }
type CollectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	JsonInfo string  `protobuf:"bytes,2,opt,name=json_info,json=jsonInfo,proto3" json:"json_info,omitempty"`
}

func (x *CollectionInfo) Reset() {
	*x = CollectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfo) ProtoMessage() {}

func (x *CollectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInfo.ProtoReflect.Descriptor instead.
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{29}
}

func (x *CollectionInfo) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CollectionInfo) GetJsonInfo() string {
	if x != nil {
		return x.JsonInfo
	}
	return ""
}

//*
// @brief Parameters for returning entities id of a segment
type GetEntityIDsParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	SegmentId      int64  `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
}

func (x *GetEntityIDsParam) Reset() {
	*x = GetEntityIDsParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntityIDsParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityIDsParam) ProtoMessage() {}

func (x *GetEntityIDsParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityIDsParam.ProtoReflect.Descriptor instead.
func (*GetEntityIDsParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{30}
}

func (x *GetEntityIDsParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *GetEntityIDsParam) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

//*
// @brief Entities identity
type EntityIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IdArray        []int64  `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
	FieldNames     []string `protobuf:"bytes,3,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
}

func (x *EntityIdentity) Reset() {
	*x = EntityIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityIdentity) ProtoMessage() {}

func (x *EntityIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityIdentity.ProtoReflect.Descriptor instead.
func (*EntityIdentity) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{31}
}

func (x *EntityIdentity) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *EntityIdentity) GetIdArray() []int64 {
	if x != nil {
		return x.IdArray
	}
	return nil
}

func (x *EntityIdentity) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

//*
// @brief Vector field parameters
type VectorFieldParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimension int64 `protobuf:"varint,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
}

func (x *VectorFieldParam) Reset() {
	*x = VectorFieldParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorFieldParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorFieldParam) ProtoMessage() {}

func (x *VectorFieldParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorFieldParam.ProtoReflect.Descriptor instead.
func (*VectorFieldParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{32}
}

func (x *VectorFieldParam) GetDimension() int64 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

//*
// @brief Field type
type FieldType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*FieldType_DataType
	//	*FieldType_VectorParam
	Value isFieldType_Value `protobuf_oneof:"value"`
}

func (x *FieldType) Reset() {
	*x = FieldType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldType) ProtoMessage() {}

func (x *FieldType) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldType.ProtoReflect.Descriptor instead.
func (*FieldType) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{33}
}

func (m *FieldType) GetValue() isFieldType_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FieldType) GetDataType() DataType {
	if x, ok := x.GetValue().(*FieldType_DataType); ok {
		return x.DataType
	}
	return DataType_NONE
}

func (x *FieldType) GetVectorParam() *VectorFieldParam {
	if x, ok := x.GetValue().(*FieldType_VectorParam); ok {
		return x.VectorParam
	}
	return nil
}

type isFieldType_Value interface {
	isFieldType_Value()
}

type FieldType_DataType struct {
	DataType DataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=milvus.grpc.DataType,oneof"`
}

type FieldType_VectorParam struct {
	VectorParam *VectorFieldParam `protobuf:"bytes,2,opt,name=vector_param,json=vectorParam,proto3,oneof"`
}

func (*FieldType_DataType) isFieldType_Value() {}

func (*FieldType_VectorParam) isFieldType_Value() {}

//*
// @brief Field parameters
type FieldParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type        DataType        `protobuf:"varint,3,opt,name=type,proto3,enum=milvus.grpc.DataType" json:"type,omitempty"`
	IndexParams []*KeyValuePair `protobuf:"bytes,4,rep,name=index_params,json=indexParams,proto3" json:"index_params,omitempty"`
	ExtraParams []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *FieldParam) Reset() {
	*x = FieldParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldParam) ProtoMessage() {}

func (x *FieldParam) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldParam.ProtoReflect.Descriptor instead.
func (*FieldParam) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{34}
}

func (x *FieldParam) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FieldParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldParam) GetType() DataType {
	if x != nil {
		return x.Type
	}
	return DataType_NONE
}

func (x *FieldParam) GetIndexParams() []*KeyValuePair {
	if x != nil {
		return x.IndexParams
	}
	return nil
}

func (x *FieldParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

//*
// @brief Vector field record
type VectorFieldRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*VectorRowRecord `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *VectorFieldRecord) Reset() {
	*x = VectorFieldRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorFieldRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorFieldRecord) ProtoMessage() {}

func (x *VectorFieldRecord) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorFieldRecord.ProtoReflect.Descriptor instead.
func (*VectorFieldRecord) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{35}
}

func (x *VectorFieldRecord) GetValue() []*VectorRowRecord {
	if x != nil {
		return x.Value
	}
	return nil
}

type TermQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName   string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	IntValue    []int64         `protobuf:"varint,2,rep,packed,name=int_value,json=intValue,proto3" json:"int_value,omitempty"`
	DoubleValue []float64       `protobuf:"fixed64,3,rep,packed,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	ValueNum    int64           `protobuf:"varint,4,opt,name=value_num,json=valueNum,proto3" json:"value_num,omitempty"`
	Boost       float32         `protobuf:"fixed32,5,opt,name=boost,proto3" json:"boost,omitempty"`
	ExtraParams []*KeyValuePair `protobuf:"bytes,6,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *TermQuery) Reset() {
	*x = TermQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermQuery) ProtoMessage() {}

func (x *TermQuery) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermQuery.ProtoReflect.Descriptor instead.
func (*TermQuery) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{36}
}

func (x *TermQuery) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *TermQuery) GetIntValue() []int64 {
	if x != nil {
		return x.IntValue
	}
	return nil
}

func (x *TermQuery) GetDoubleValue() []float64 {
	if x != nil {
		return x.DoubleValue
	}
	return nil
}

func (x *TermQuery) GetValueNum() int64 {
	if x != nil {
		return x.ValueNum
	}
	return 0
}

func (x *TermQuery) GetBoost() float32 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (x *TermQuery) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type CompareExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator CompareOperator `protobuf:"varint,1,opt,name=operator,proto3,enum=milvus.grpc.CompareOperator" json:"operator,omitempty"`
	Operand  string          `protobuf:"bytes,2,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (x *CompareExpr) Reset() {
	*x = CompareExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareExpr) ProtoMessage() {}

func (x *CompareExpr) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareExpr.ProtoReflect.Descriptor instead.
func (*CompareExpr) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{37}
}

func (x *CompareExpr) GetOperator() CompareOperator {
	if x != nil {
		return x.Operator
	}
	return CompareOperator_LT
}

func (x *CompareExpr) GetOperand() string {
	if x != nil {
		return x.Operand
	}
	return ""
}

type RangeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName   string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Operand     []*CompareExpr  `protobuf:"bytes,2,rep,name=operand,proto3" json:"operand,omitempty"`
	Boost       float32         `protobuf:"fixed32,3,opt,name=boost,proto3" json:"boost,omitempty"`
	ExtraParams []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *RangeQuery) Reset() {
	*x = RangeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeQuery) ProtoMessage() {}

func (x *RangeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeQuery.ProtoReflect.Descriptor instead.
func (*RangeQuery) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{38}
}

func (x *RangeQuery) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *RangeQuery) GetOperand() []*CompareExpr {
	if x != nil {
		return x.Operand
	}
	return nil
}

func (x *RangeQuery) GetBoost() float32 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (x *RangeQuery) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type VectorQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName   string             `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	QueryBoost  float32            `protobuf:"fixed32,2,opt,name=query_boost,json=queryBoost,proto3" json:"query_boost,omitempty"`
	Records     []*VectorRowRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	Topk        int64              `protobuf:"varint,4,opt,name=topk,proto3" json:"topk,omitempty"`
	ExtraParams []*KeyValuePair    `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *VectorQuery) Reset() {
	*x = VectorQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorQuery) ProtoMessage() {}

func (x *VectorQuery) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorQuery.ProtoReflect.Descriptor instead.
func (*VectorQuery) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{39}
}

func (x *VectorQuery) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *VectorQuery) GetQueryBoost() float32 {
	if x != nil {
		return x.QueryBoost
	}
	return 0
}

func (x *VectorQuery) GetRecords() []*VectorRowRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *VectorQuery) GetTopk() int64 {
	if x != nil {
		return x.Topk
	}
	return 0
}

func (x *VectorQuery) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type BooleanQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Occur        Occur           `protobuf:"varint,1,opt,name=occur,proto3,enum=milvus.grpc.Occur" json:"occur,omitempty"`
	GeneralQuery []*GeneralQuery `protobuf:"bytes,2,rep,name=general_query,json=generalQuery,proto3" json:"general_query,omitempty"`
}

func (x *BooleanQuery) Reset() {
	*x = BooleanQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanQuery) ProtoMessage() {}

func (x *BooleanQuery) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanQuery.ProtoReflect.Descriptor instead.
func (*BooleanQuery) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{40}
}

func (x *BooleanQuery) GetOccur() Occur {
	if x != nil {
		return x.Occur
	}
	return Occur_INVALID
}

func (x *BooleanQuery) GetGeneralQuery() []*GeneralQuery {
	if x != nil {
		return x.GeneralQuery
	}
	return nil
}

type GeneralQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//	*GeneralQuery_BooleanQuery
	//	*GeneralQuery_TermQuery
	//	*GeneralQuery_RangeQuery
	//	*GeneralQuery_VectorQuery
	Query isGeneralQuery_Query `protobuf_oneof:"query"`
}

func (x *GeneralQuery) Reset() {
	*x = GeneralQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralQuery) ProtoMessage() {}

func (x *GeneralQuery) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralQuery.ProtoReflect.Descriptor instead.
func (*GeneralQuery) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{41}
}

func (m *GeneralQuery) GetQuery() isGeneralQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *GeneralQuery) GetBooleanQuery() *BooleanQuery {
	if x, ok := x.GetQuery().(*GeneralQuery_BooleanQuery); ok {
		return x.BooleanQuery
	}
	return nil
}

func (x *GeneralQuery) GetTermQuery() *TermQuery {
	if x, ok := x.GetQuery().(*GeneralQuery_TermQuery); ok {
		return x.TermQuery
	}
	return nil
}

func (x *GeneralQuery) GetRangeQuery() *RangeQuery {
	if x, ok := x.GetQuery().(*GeneralQuery_RangeQuery); ok {
		return x.RangeQuery
	}
	return nil
}

func (x *GeneralQuery) GetVectorQuery() *VectorQuery {
	if x, ok := x.GetQuery().(*GeneralQuery_VectorQuery); ok {
		return x.VectorQuery
	}
	return nil
}

type isGeneralQuery_Query interface {
	isGeneralQuery_Query()
}

type GeneralQuery_BooleanQuery struct {
	BooleanQuery *BooleanQuery `protobuf:"bytes,1,opt,name=boolean_query,json=booleanQuery,proto3,oneof"`
}

type GeneralQuery_TermQuery struct {
	TermQuery *TermQuery `protobuf:"bytes,2,opt,name=term_query,json=termQuery,proto3,oneof"`
}

type GeneralQuery_RangeQuery struct {
	RangeQuery *RangeQuery `protobuf:"bytes,3,opt,name=range_query,json=rangeQuery,proto3,oneof"`
}

type GeneralQuery_VectorQuery struct {
	VectorQuery *VectorQuery `protobuf:"bytes,4,opt,name=vector_query,json=vectorQuery,proto3,oneof"`
}

func (*GeneralQuery_BooleanQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_TermQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_RangeQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_VectorQuery) isGeneralQuery_Query() {}

type SearchParamPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName    string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray []string        `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	GeneralQuery      *GeneralQuery   `protobuf:"bytes,3,opt,name=general_query,json=generalQuery,proto3" json:"general_query,omitempty"`
	ExtraParams       []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *SearchParamPB) Reset() {
	*x = SearchParamPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParamPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParamPB) ProtoMessage() {}

func (x *SearchParamPB) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParamPB.ProtoReflect.Descriptor instead.
func (*SearchParamPB) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{42}
}

func (x *SearchParamPB) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchParamPB) GetPartitionTagArray() []string {
	if x != nil {
		return x.PartitionTagArray
	}
	return nil
}

func (x *SearchParamPB) GetGeneralQuery() *GeneralQuery {
	if x != nil {
		return x.GeneralQuery
	}
	return nil
}

func (x *SearchParamPB) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type InsertOrDeleteMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	RowsData       *RowData        `protobuf:"bytes,2,opt,name=rows_data,json=rowsData,proto3" json:"rows_data,omitempty"`
	Uid            int64           `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"` //optional
	PartitionTag   string          `protobuf:"bytes,4,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	Timestamp      int64           `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SegmentId      int64           `protobuf:"varint,6,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	ChannelId      int64           `protobuf:"varint,7,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Op             OpType          `protobuf:"varint,8,opt,name=op,proto3,enum=milvus.grpc.OpType" json:"op,omitempty"`
	ClientId       int64           `protobuf:"varint,9,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ExtraParams    []*KeyValuePair `protobuf:"bytes,10,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *InsertOrDeleteMsg) Reset() {
	*x = InsertOrDeleteMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertOrDeleteMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertOrDeleteMsg) ProtoMessage() {}

func (x *InsertOrDeleteMsg) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertOrDeleteMsg.ProtoReflect.Descriptor instead.
func (*InsertOrDeleteMsg) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{43}
}

func (x *InsertOrDeleteMsg) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *InsertOrDeleteMsg) GetRowsData() *RowData {
	if x != nil {
		return x.RowsData
	}
	return nil
}

func (x *InsertOrDeleteMsg) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *InsertOrDeleteMsg) GetPartitionTag() string {
	if x != nil {
		return x.PartitionTag
	}
	return ""
}

func (x *InsertOrDeleteMsg) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *InsertOrDeleteMsg) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *InsertOrDeleteMsg) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *InsertOrDeleteMsg) GetOp() OpType {
	if x != nil {
		return x.Op
	}
	return OpType_INSERT
}

func (x *InsertOrDeleteMsg) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *InsertOrDeleteMsg) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type SearchMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string           `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Records        *VectorRowRecord `protobuf:"bytes,2,opt,name=records,proto3" json:"records,omitempty"`
	PartitionTag   string           `protobuf:"bytes,3,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	Uid            int64            `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Timestamp      int64            `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ClientId       int64            `protobuf:"varint,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ExtraParams    []*KeyValuePair  `protobuf:"bytes,7,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *SearchMsg) Reset() {
	*x = SearchMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMsg) ProtoMessage() {}

func (x *SearchMsg) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMsg.ProtoReflect.Descriptor instead.
func (*SearchMsg) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{44}
}

func (x *SearchMsg) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchMsg) GetRecords() *VectorRowRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *SearchMsg) GetPartitionTag() string {
	if x != nil {
		return x.PartitionTag
	}
	return ""
}

func (x *SearchMsg) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SearchMsg) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SearchMsg) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *SearchMsg) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type TimeSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  int64  `protobuf:"varint,1,opt,name=ClientId,json=clientId,proto3" json:"ClientId,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=Timestamp,json=timestamp,proto3" json:"Timestamp,omitempty"`
	MsgType   OpType `protobuf:"varint,3,opt,name=MsgType,json=msgType,proto3,enum=milvus.grpc.OpType" json:"MsgType,omitempty"`
}

func (x *TimeSyncMsg) Reset() {
	*x = TimeSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSyncMsg) ProtoMessage() {}

func (x *TimeSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSyncMsg.ProtoReflect.Descriptor instead.
func (*TimeSyncMsg) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{45}
}

func (x *TimeSyncMsg) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *TimeSyncMsg) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TimeSyncMsg) GetMsgType() OpType {
	if x != nil {
		return x.MsgType
	}
	return OpType_INSERT
}

type SegmentRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       int64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	SegmentId []int64 `protobuf:"varint,2,rep,packed,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
}

func (x *SegmentRecord) Reset() {
	*x = SegmentRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentRecord) ProtoMessage() {}

func (x *SegmentRecord) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentRecord.ProtoReflect.Descriptor instead.
func (*SegmentRecord) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{46}
}

func (x *SegmentRecord) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SegmentRecord) GetSegmentId() []int64 {
	if x != nil {
		return x.SegmentId
	}
	return nil
}

type Key2SegMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId int64          `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Records  *SegmentRecord `protobuf:"bytes,2,opt,name=records,proto3" json:"records,omitempty"`
	MsgType  OpType         `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3,enum=milvus.grpc.OpType" json:"msg_type,omitempty"`
}

func (x *Key2SegMsg) Reset() {
	*x = Key2SegMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suvlim_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key2SegMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key2SegMsg) ProtoMessage() {}

func (x *Key2SegMsg) ProtoReflect() protoreflect.Message {
	mi := &file_suvlim_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key2SegMsg.ProtoReflect.Descriptor instead.
func (*Key2SegMsg) Descriptor() ([]byte, []int) {
	return file_suvlim_proto_rawDescGZIP(), []int{47}
}

func (x *Key2SegMsg) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *Key2SegMsg) GetRecords() *SegmentRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *Key2SegMsg) GetMsgType() OpType {
	if x != nil {
		return x.MsgType
	}
	return OpType_INSERT
}

var File_suvlim_proto protoreflect.FileDescriptor

var file_suvlim_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x75, 0x76, 0x6c, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x22, 0x57, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x0e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x07, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3c, 0x0a,
	0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x73, 0x0a, 0x0b, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x4b, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x6c, 0x0a,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x51, 0x0a, 0x0f, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x60,
	0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x22, 0x46, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x5b, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x72,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x67, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x22, 0x41,
	0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x73, 0x22, 0x1d, 0x0a, 0x07, 0x52, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62,
	0x22, 0xa1, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x72, 0x6f, 0x77, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0b, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x77, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x99, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f,
	0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f,
	0x77, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x5d, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x57, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x73, 0x0a, 0x12, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x0a,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x40, 0x0a, 0x0a,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x55,
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x55, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x5a, 0x0a, 0x0e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6a, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x10,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8e,
	0x01, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xd7, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a,
	0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x47, 0x0a, 0x11, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x32,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x61, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x38, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x0b, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x78, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x52, 0x05, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x12, 0x3e, 0x0a,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x8d, 0x02,
	0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x40,
	0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x37, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x65, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xe6, 0x01,
	0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50, 0x42, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x82, 0x03, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x72, 0x6f, 0x77, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x09,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x76, 0x0a, 0x0b, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x40, 0x0a, 0x0d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x32, 0x53, 0x65, 0x67,
	0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2a, 0xa2, 0x04, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x44,
	0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4c,
	0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x09, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x50, 0x4b, 0x10,
	0x0a, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x57,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4c, 0x4c, 0x45,
	0x47, 0x41, 0x4c, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x0c, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0f, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x10, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x13, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x4e, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x16, 0x12,
	0x17, 0x0a, 0x13, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x18, 0x2a, 0x91, 0x01, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x4e, 0x54, 0x38, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54,
	0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x64, 0x12, 0x10, 0x0a,
	0x0c, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x65, 0x2a,
	0x43, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47,
	0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02,
	0x4e, 0x45, 0x10, 0x05, 0x2a, 0x38, 0x0a, 0x05, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x03, 0x2a, 0x3f,
	0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x45,
	0x52, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x32,
	0xdb, 0x0d, 0x0a, 0x0d, 0x4d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x12, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x14, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x1a, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x17, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x1a, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x53,
	0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1a, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x1a, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x44, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x03, 0x43, 0x6d, 0x64, 0x12, 0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x18, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x11, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x13, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x05, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x17, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x08, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x42, 0x12, 0x1a, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50,
	0x42, 0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_suvlim_proto_rawDescOnce sync.Once
	file_suvlim_proto_rawDescData = file_suvlim_proto_rawDesc
)

func file_suvlim_proto_rawDescGZIP() []byte {
	file_suvlim_proto_rawDescOnce.Do(func() {
		file_suvlim_proto_rawDescData = protoimpl.X.CompressGZIP(file_suvlim_proto_rawDescData)
	})
	return file_suvlim_proto_rawDescData
}

var file_suvlim_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_suvlim_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_suvlim_proto_goTypes = []interface{}{
	(ErrorCode)(0),               // 0: milvus.grpc.ErrorCode
	(DataType)(0),                // 1: milvus.grpc.DataType
	(CompareOperator)(0),         // 2: milvus.grpc.CompareOperator
	(Occur)(0),                   // 3: milvus.grpc.Occur
	(OpType)(0),                  // 4: milvus.grpc.OpType
	(*Status)(nil),               // 5: milvus.grpc.Status
	(*KeyValuePair)(nil),         // 6: milvus.grpc.KeyValuePair
	(*CollectionName)(nil),       // 7: milvus.grpc.CollectionName
	(*CollectionNameList)(nil),   // 8: milvus.grpc.CollectionNameList
	(*FieldName)(nil),            // 9: milvus.grpc.FieldName
	(*Mapping)(nil),              // 10: milvus.grpc.Mapping
	(*MappingList)(nil),          // 11: milvus.grpc.MappingList
	(*PartitionParam)(nil),       // 12: milvus.grpc.PartitionParam
	(*PartitionList)(nil),        // 13: milvus.grpc.PartitionList
	(*VectorRowRecord)(nil),      // 14: milvus.grpc.VectorRowRecord
	(*EntityIds)(nil),            // 15: milvus.grpc.EntityIds
	(*VectorRecord)(nil),         // 16: milvus.grpc.VectorRecord
	(*VectorParam)(nil),          // 17: milvus.grpc.VectorParam
	(*FieldMeta)(nil),            // 18: milvus.grpc.FieldMeta
	(*Schema)(nil),               // 19: milvus.grpc.Schema
	(*RowData)(nil),              // 20: milvus.grpc.RowData
	(*InsertParam)(nil),          // 21: milvus.grpc.InsertParam
	(*SearchParam)(nil),          // 22: milvus.grpc.SearchParam
	(*SearchInSegmentParam)(nil), // 23: milvus.grpc.SearchInSegmentParam
	(*Entities)(nil),             // 24: milvus.grpc.Entities
	(*QueryResult)(nil),          // 25: milvus.grpc.QueryResult
	(*StringReply)(nil),          // 26: milvus.grpc.StringReply
	(*BoolReply)(nil),            // 27: milvus.grpc.BoolReply
	(*CollectionRowCount)(nil),   // 28: milvus.grpc.CollectionRowCount
	(*Command)(nil),              // 29: milvus.grpc.Command
	(*IndexParam)(nil),           // 30: milvus.grpc.IndexParam
	(*FlushParam)(nil),           // 31: milvus.grpc.FlushParam
	(*CompactParam)(nil),         // 32: milvus.grpc.CompactParam
	(*DeleteByIDParam)(nil),      // 33: milvus.grpc.DeleteByIDParam
	(*CollectionInfo)(nil),       // 34: milvus.grpc.CollectionInfo
	(*GetEntityIDsParam)(nil),    // 35: milvus.grpc.GetEntityIDsParam
	(*EntityIdentity)(nil),       // 36: milvus.grpc.EntityIdentity
	(*VectorFieldParam)(nil),     // 37: milvus.grpc.VectorFieldParam
	(*FieldType)(nil),            // 38: milvus.grpc.FieldType
	(*FieldParam)(nil),           // 39: milvus.grpc.FieldParam
	(*VectorFieldRecord)(nil),    // 40: milvus.grpc.VectorFieldRecord
	(*TermQuery)(nil),            // 41: milvus.grpc.TermQuery
	(*CompareExpr)(nil),          // 42: milvus.grpc.CompareExpr
	(*RangeQuery)(nil),           // 43: milvus.grpc.RangeQuery
	(*VectorQuery)(nil),          // 44: milvus.grpc.VectorQuery
	(*BooleanQuery)(nil),         // 45: milvus.grpc.BooleanQuery
	(*GeneralQuery)(nil),         // 46: milvus.grpc.GeneralQuery
	(*SearchParamPB)(nil),        // 47: milvus.grpc.SearchParamPB
	(*InsertOrDeleteMsg)(nil),    // 48: milvus.grpc.InsertOrDeleteMsg
	(*SearchMsg)(nil),            // 49: milvus.grpc.SearchMsg
	(*TimeSyncMsg)(nil),          // 50: milvus.grpc.TimeSyncMsg
	(*SegmentRecord)(nil),        // 51: milvus.grpc.SegmentRecord
	(*Key2SegMsg)(nil),           // 52: milvus.grpc.Key2SegMsg
}
var file_suvlim_proto_depIdxs = []int32{
	0,  // 0: milvus.grpc.Status.error_code:type_name -> milvus.grpc.ErrorCode
	5,  // 1: milvus.grpc.CollectionNameList.status:type_name -> milvus.grpc.Status
	5,  // 2: milvus.grpc.Mapping.status:type_name -> milvus.grpc.Status
	39, // 3: milvus.grpc.Mapping.fields:type_name -> milvus.grpc.FieldParam
	6,  // 4: milvus.grpc.Mapping.extra_params:type_name -> milvus.grpc.KeyValuePair
	5,  // 5: milvus.grpc.MappingList.status:type_name -> milvus.grpc.Status
	10, // 6: milvus.grpc.MappingList.mapping_list:type_name -> milvus.grpc.Mapping
	5,  // 7: milvus.grpc.PartitionList.status:type_name -> milvus.grpc.Status
	5,  // 8: milvus.grpc.EntityIds.status:type_name -> milvus.grpc.Status
	14, // 9: milvus.grpc.VectorRecord.records:type_name -> milvus.grpc.VectorRowRecord
	16, // 10: milvus.grpc.VectorParam.row_record:type_name -> milvus.grpc.VectorRecord
	1,  // 11: milvus.grpc.FieldMeta.type:type_name -> milvus.grpc.DataType
	18, // 12: milvus.grpc.Schema.field_metas:type_name -> milvus.grpc.FieldMeta
	19, // 13: milvus.grpc.InsertParam.schema:type_name -> milvus.grpc.Schema
	20, // 14: milvus.grpc.InsertParam.rows_data:type_name -> milvus.grpc.RowData
	6,  // 15: milvus.grpc.InsertParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	17, // 16: milvus.grpc.SearchParam.vector_param:type_name -> milvus.grpc.VectorParam
	6,  // 17: milvus.grpc.SearchParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	22, // 18: milvus.grpc.SearchInSegmentParam.search_param:type_name -> milvus.grpc.SearchParam
	5,  // 19: milvus.grpc.Entities.status:type_name -> milvus.grpc.Status
	20, // 20: milvus.grpc.Entities.rows_data:type_name -> milvus.grpc.RowData
	5,  // 21: milvus.grpc.QueryResult.status:type_name -> milvus.grpc.Status
	24, // 22: milvus.grpc.QueryResult.entities:type_name -> milvus.grpc.Entities
	6,  // 23: milvus.grpc.QueryResult.extra_params:type_name -> milvus.grpc.KeyValuePair
	5,  // 24: milvus.grpc.StringReply.status:type_name -> milvus.grpc.Status
	5,  // 25: milvus.grpc.BoolReply.status:type_name -> milvus.grpc.Status
	5,  // 26: milvus.grpc.CollectionRowCount.status:type_name -> milvus.grpc.Status
	5,  // 27: milvus.grpc.IndexParam.status:type_name -> milvus.grpc.Status
	6,  // 28: milvus.grpc.IndexParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	5,  // 29: milvus.grpc.CollectionInfo.status:type_name -> milvus.grpc.Status
	1,  // 30: milvus.grpc.FieldType.data_type:type_name -> milvus.grpc.DataType
	37, // 31: milvus.grpc.FieldType.vector_param:type_name -> milvus.grpc.VectorFieldParam
	1,  // 32: milvus.grpc.FieldParam.type:type_name -> milvus.grpc.DataType
	6,  // 33: milvus.grpc.FieldParam.index_params:type_name -> milvus.grpc.KeyValuePair
	6,  // 34: milvus.grpc.FieldParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	14, // 35: milvus.grpc.VectorFieldRecord.value:type_name -> milvus.grpc.VectorRowRecord
	6,  // 36: milvus.grpc.TermQuery.extra_params:type_name -> milvus.grpc.KeyValuePair
	2,  // 37: milvus.grpc.CompareExpr.operator:type_name -> milvus.grpc.CompareOperator
	42, // 38: milvus.grpc.RangeQuery.operand:type_name -> milvus.grpc.CompareExpr
	6,  // 39: milvus.grpc.RangeQuery.extra_params:type_name -> milvus.grpc.KeyValuePair
	14, // 40: milvus.grpc.VectorQuery.records:type_name -> milvus.grpc.VectorRowRecord
	6,  // 41: milvus.grpc.VectorQuery.extra_params:type_name -> milvus.grpc.KeyValuePair
	3,  // 42: milvus.grpc.BooleanQuery.occur:type_name -> milvus.grpc.Occur
	46, // 43: milvus.grpc.BooleanQuery.general_query:type_name -> milvus.grpc.GeneralQuery
	45, // 44: milvus.grpc.GeneralQuery.boolean_query:type_name -> milvus.grpc.BooleanQuery
	41, // 45: milvus.grpc.GeneralQuery.term_query:type_name -> milvus.grpc.TermQuery
	43, // 46: milvus.grpc.GeneralQuery.range_query:type_name -> milvus.grpc.RangeQuery
	44, // 47: milvus.grpc.GeneralQuery.vector_query:type_name -> milvus.grpc.VectorQuery
	46, // 48: milvus.grpc.SearchParamPB.general_query:type_name -> milvus.grpc.GeneralQuery
	6,  // 49: milvus.grpc.SearchParamPB.extra_params:type_name -> milvus.grpc.KeyValuePair
	20, // 50: milvus.grpc.InsertOrDeleteMsg.rows_data:type_name -> milvus.grpc.RowData
	4,  // 51: milvus.grpc.InsertOrDeleteMsg.op:type_name -> milvus.grpc.OpType
	6,  // 52: milvus.grpc.InsertOrDeleteMsg.extra_params:type_name -> milvus.grpc.KeyValuePair
	14, // 53: milvus.grpc.SearchMsg.records:type_name -> milvus.grpc.VectorRowRecord
	6,  // 54: milvus.grpc.SearchMsg.extra_params:type_name -> milvus.grpc.KeyValuePair
	4,  // 55: milvus.grpc.TimeSyncMsg.MsgType:type_name -> milvus.grpc.OpType
	51, // 56: milvus.grpc.Key2SegMsg.records:type_name -> milvus.grpc.SegmentRecord
	4,  // 57: milvus.grpc.Key2SegMsg.msg_type:type_name -> milvus.grpc.OpType
	10, // 58: milvus.grpc.MilvusService.CreateCollection:input_type -> milvus.grpc.Mapping
	7,  // 59: milvus.grpc.MilvusService.HasCollection:input_type -> milvus.grpc.CollectionName
	7,  // 60: milvus.grpc.MilvusService.DescribeCollection:input_type -> milvus.grpc.CollectionName
	7,  // 61: milvus.grpc.MilvusService.CountCollection:input_type -> milvus.grpc.CollectionName
	29, // 62: milvus.grpc.MilvusService.ShowCollections:input_type -> milvus.grpc.Command
	7,  // 63: milvus.grpc.MilvusService.ShowCollectionInfo:input_type -> milvus.grpc.CollectionName
	7,  // 64: milvus.grpc.MilvusService.DropCollection:input_type -> milvus.grpc.CollectionName
	30, // 65: milvus.grpc.MilvusService.CreateIndex:input_type -> milvus.grpc.IndexParam
	30, // 66: milvus.grpc.MilvusService.DescribeIndex:input_type -> milvus.grpc.IndexParam
	30, // 67: milvus.grpc.MilvusService.DropIndex:input_type -> milvus.grpc.IndexParam
	12, // 68: milvus.grpc.MilvusService.CreatePartition:input_type -> milvus.grpc.PartitionParam
	12, // 69: milvus.grpc.MilvusService.HasPartition:input_type -> milvus.grpc.PartitionParam
	7,  // 70: milvus.grpc.MilvusService.ShowPartitions:input_type -> milvus.grpc.CollectionName
	12, // 71: milvus.grpc.MilvusService.DropPartition:input_type -> milvus.grpc.PartitionParam
	21, // 72: milvus.grpc.MilvusService.Insert:input_type -> milvus.grpc.InsertParam
	36, // 73: milvus.grpc.MilvusService.GetEntityByID:input_type -> milvus.grpc.EntityIdentity
	35, // 74: milvus.grpc.MilvusService.GetEntityIDs:input_type -> milvus.grpc.GetEntityIDsParam
	22, // 75: milvus.grpc.MilvusService.Search:input_type -> milvus.grpc.SearchParam
	23, // 76: milvus.grpc.MilvusService.SearchInSegment:input_type -> milvus.grpc.SearchInSegmentParam
	29, // 77: milvus.grpc.MilvusService.Cmd:input_type -> milvus.grpc.Command
	33, // 78: milvus.grpc.MilvusService.DeleteByID:input_type -> milvus.grpc.DeleteByIDParam
	7,  // 79: milvus.grpc.MilvusService.PreloadCollection:input_type -> milvus.grpc.CollectionName
	31, // 80: milvus.grpc.MilvusService.Flush:input_type -> milvus.grpc.FlushParam
	32, // 81: milvus.grpc.MilvusService.Compact:input_type -> milvus.grpc.CompactParam
	47, // 82: milvus.grpc.MilvusService.SearchPB:input_type -> milvus.grpc.SearchParamPB
	5,  // 83: milvus.grpc.MilvusService.CreateCollection:output_type -> milvus.grpc.Status
	27, // 84: milvus.grpc.MilvusService.HasCollection:output_type -> milvus.grpc.BoolReply
	10, // 85: milvus.grpc.MilvusService.DescribeCollection:output_type -> milvus.grpc.Mapping
	28, // 86: milvus.grpc.MilvusService.CountCollection:output_type -> milvus.grpc.CollectionRowCount
	8,  // 87: milvus.grpc.MilvusService.ShowCollections:output_type -> milvus.grpc.CollectionNameList
	34, // 88: milvus.grpc.MilvusService.ShowCollectionInfo:output_type -> milvus.grpc.CollectionInfo
	5,  // 89: milvus.grpc.MilvusService.DropCollection:output_type -> milvus.grpc.Status
	5,  // 90: milvus.grpc.MilvusService.CreateIndex:output_type -> milvus.grpc.Status
	30, // 91: milvus.grpc.MilvusService.DescribeIndex:output_type -> milvus.grpc.IndexParam
	5,  // 92: milvus.grpc.MilvusService.DropIndex:output_type -> milvus.grpc.Status
	5,  // 93: milvus.grpc.MilvusService.CreatePartition:output_type -> milvus.grpc.Status
	27, // 94: milvus.grpc.MilvusService.HasPartition:output_type -> milvus.grpc.BoolReply
	13, // 95: milvus.grpc.MilvusService.ShowPartitions:output_type -> milvus.grpc.PartitionList
	5,  // 96: milvus.grpc.MilvusService.DropPartition:output_type -> milvus.grpc.Status
	15, // 97: milvus.grpc.MilvusService.Insert:output_type -> milvus.grpc.EntityIds
	24, // 98: milvus.grpc.MilvusService.GetEntityByID:output_type -> milvus.grpc.Entities
	15, // 99: milvus.grpc.MilvusService.GetEntityIDs:output_type -> milvus.grpc.EntityIds
	25, // 100: milvus.grpc.MilvusService.Search:output_type -> milvus.grpc.QueryResult
	25, // 101: milvus.grpc.MilvusService.SearchInSegment:output_type -> milvus.grpc.QueryResult
	26, // 102: milvus.grpc.MilvusService.Cmd:output_type -> milvus.grpc.StringReply
	5,  // 103: milvus.grpc.MilvusService.DeleteByID:output_type -> milvus.grpc.Status
	5,  // 104: milvus.grpc.MilvusService.PreloadCollection:output_type -> milvus.grpc.Status
	5,  // 105: milvus.grpc.MilvusService.Flush:output_type -> milvus.grpc.Status
	5,  // 106: milvus.grpc.MilvusService.Compact:output_type -> milvus.grpc.Status
	25, // 107: milvus.grpc.MilvusService.SearchPB:output_type -> milvus.grpc.QueryResult
	83, // [83:108] is the sub-list for method output_type
	58, // [58:83] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_suvlim_proto_init() }
func file_suvlim_proto_init() {
	if File_suvlim_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_suvlim_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionNameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MappingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorRowRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInSegmentParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionRowCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteByIDParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntityIDsParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorFieldParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorFieldRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParamPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertOrDeleteMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suvlim_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key2SegMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_suvlim_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*FieldType_DataType)(nil),
		(*FieldType_VectorParam)(nil),
	}
	file_suvlim_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*GeneralQuery_BooleanQuery)(nil),
		(*GeneralQuery_TermQuery)(nil),
		(*GeneralQuery_RangeQuery)(nil),
		(*GeneralQuery_VectorQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_suvlim_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_suvlim_proto_goTypes,
		DependencyIndexes: file_suvlim_proto_depIdxs,
		EnumInfos:         file_suvlim_proto_enumTypes,
		MessageInfos:      file_suvlim_proto_msgTypes,
	}.Build()
	File_suvlim_proto = out.File
	file_suvlim_proto_rawDesc = nil
	file_suvlim_proto_goTypes = nil
	file_suvlim_proto_depIdxs = nil
}
