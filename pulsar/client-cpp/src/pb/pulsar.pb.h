// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulsar.proto

#ifndef PROTOBUF_pulsar_2eproto__INCLUDED
#define PROTOBUF_pulsar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_pulsar_2eproto();
void protobuf_AssignDesc_pulsar_2eproto();
void protobuf_ShutdownFile_pulsar_2eproto();

class AttrRecord;
class DeleteMsg;
class FieldValue;
class InsertMsg;
class PulsarMessage;
class SearchMsg;
class SearchResultMsg;
class SegmentRecord;
class Status;
class TestData;
class VectorParam;
class VectorRecord;
class VectorRowRecord;

enum ErrorCode {
  SUCCESS = 0,
  UNEXPECTED_ERROR = 1,
  CONNECT_FAILED = 2,
  PERMISSION_DENIED = 3,
  COLLECTION_NOT_EXISTS = 4,
  ILLEGAL_ARGUMENT = 5,
  ILLEGAL_DIMENSION = 7,
  ILLEGAL_INDEX_TYPE = 8,
  ILLEGAL_COLLECTION_NAME = 9,
  ILLEGAL_TOPK = 10,
  ILLEGAL_ROWRECORD = 11,
  ILLEGAL_VECTOR_ID = 12,
  ILLEGAL_SEARCH_RESULT = 13,
  FILE_NOT_FOUND = 14,
  META_FAILED = 15,
  CACHE_FAILED = 16,
  CANNOT_CREATE_FOLDER = 17,
  CANNOT_CREATE_FILE = 18,
  CANNOT_DELETE_FOLDER = 19,
  CANNOT_DELETE_FILE = 20,
  BUILD_INDEX_ERROR = 21,
  ILLEGAL_NLIST = 22,
  ILLEGAL_METRIC_TYPE = 23,
  OUT_OF_MEMORY = 24,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = SUCCESS;
const ErrorCode ErrorCode_MAX = OUT_OF_MEMORY;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum DataType {
  NONE = 0,
  BOOL = 1,
  INT8 = 2,
  INT16 = 3,
  INT32 = 4,
  INT64 = 5,
  FLOAT = 10,
  DOUBLE = 11,
  STRING = 20,
  VECTOR_BINARY = 100,
  VECTOR_FLOAT = 101,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = NONE;
const DataType DataType_MAX = VECTOR_FLOAT;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum OpType {
  Insert = 0,
  Delete = 1,
  Search = 2,
  TimeSync = 3,
  Key2Seg = 4,
  Statistics = 5,
  OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OpType_IsValid(int value);
const OpType OpType_MIN = Insert;
const OpType OpType_MAX = Statistics;
const int OpType_ARRAYSIZE = OpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpType_descriptor();
inline const ::std::string& OpType_Name(OpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpType_descriptor(), value);
}
inline bool OpType_Parse(
    const ::std::string& name, OpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpType>(
    OpType_descriptor(), name, value);
}
// ===================================================================

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  inline Status* New() const { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ErrorCode error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::pb::ErrorCode error_code() const;
  void set_error_code(::pb::ErrorCode value);

  // optional string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:pb.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int error_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class SegmentRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SegmentRecord) */ {
 public:
  SegmentRecord();
  virtual ~SegmentRecord();

  SegmentRecord(const SegmentRecord& from);

  inline SegmentRecord& operator=(const SegmentRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentRecord& default_instance();

  void Swap(SegmentRecord* other);

  // implements Message ----------------------------------------------

  inline SegmentRecord* New() const { return New(NULL); }

  SegmentRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegmentRecord& from);
  void MergeFrom(const SegmentRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SegmentRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string seg_info = 1;
  int seg_info_size() const;
  void clear_seg_info();
  static const int kSegInfoFieldNumber = 1;
  const ::std::string& seg_info(int index) const;
  ::std::string* mutable_seg_info(int index);
  void set_seg_info(int index, const ::std::string& value);
  void set_seg_info(int index, const char* value);
  void set_seg_info(int index, const char* value, size_t size);
  ::std::string* add_seg_info();
  void add_seg_info(const ::std::string& value);
  void add_seg_info(const char* value);
  void add_seg_info(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& seg_info() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_seg_info();

  // @@protoc_insertion_point(class_scope:pb.SegmentRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> seg_info_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static SegmentRecord* default_instance_;
};
// -------------------------------------------------------------------

class VectorRowRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.VectorRowRecord) */ {
 public:
  VectorRowRecord();
  virtual ~VectorRowRecord();

  VectorRowRecord(const VectorRowRecord& from);

  inline VectorRowRecord& operator=(const VectorRowRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorRowRecord& default_instance();

  void Swap(VectorRowRecord* other);

  // implements Message ----------------------------------------------

  inline VectorRowRecord* New() const { return New(NULL); }

  VectorRowRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorRowRecord& from);
  void MergeFrom(const VectorRowRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VectorRowRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float float_data = 1;
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 1;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bytes binary_data = 2;
  void clear_binary_data();
  static const int kBinaryDataFieldNumber = 2;
  const ::std::string& binary_data() const;
  void set_binary_data(const ::std::string& value);
  void set_binary_data(const char* value);
  void set_binary_data(const void* value, size_t size);
  ::std::string* mutable_binary_data();
  ::std::string* release_binary_data();
  void set_allocated_binary_data(::std::string* binary_data);

  // @@protoc_insertion_point(class_scope:pb.VectorRowRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< float > float_data_;
  mutable int _float_data_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr binary_data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static VectorRowRecord* default_instance_;
};
// -------------------------------------------------------------------

class AttrRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.AttrRecord) */ {
 public:
  AttrRecord();
  virtual ~AttrRecord();

  AttrRecord(const AttrRecord& from);

  inline AttrRecord& operator=(const AttrRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttrRecord& default_instance();

  void Swap(AttrRecord* other);

  // implements Message ----------------------------------------------

  inline AttrRecord* New() const { return New(NULL); }

  AttrRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttrRecord& from);
  void MergeFrom(const AttrRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AttrRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 int32_value = 1;
  int int32_value_size() const;
  void clear_int32_value();
  static const int kInt32ValueFieldNumber = 1;
  ::google::protobuf::int32 int32_value(int index) const;
  void set_int32_value(int index, ::google::protobuf::int32 value);
  void add_int32_value(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_value();

  // repeated int64 int64_value = 2;
  int int64_value_size() const;
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 2;
  ::google::protobuf::int64 int64_value(int index) const;
  void set_int64_value(int index, ::google::protobuf::int64 value);
  void add_int64_value(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      int64_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_int64_value();

  // repeated float float_value = 3;
  int float_value_size() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 3;
  float float_value(int index) const;
  void set_float_value(int index, float value);
  void add_float_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_value();

  // repeated double double_value = 4;
  int double_value_size() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 4;
  double double_value(int index) const;
  void set_double_value(int index, double value);
  void add_double_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_value();

  // @@protoc_insertion_point(class_scope:pb.AttrRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_value_;
  mutable int _int32_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > int64_value_;
  mutable int _int64_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > float_value_;
  mutable int _float_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_value_;
  mutable int _double_value_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static AttrRecord* default_instance_;
};
// -------------------------------------------------------------------

class VectorRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.VectorRecord) */ {
 public:
  VectorRecord();
  virtual ~VectorRecord();

  VectorRecord(const VectorRecord& from);

  inline VectorRecord& operator=(const VectorRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorRecord& default_instance();

  void Swap(VectorRecord* other);

  // implements Message ----------------------------------------------

  inline VectorRecord* New() const { return New(NULL); }

  VectorRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorRecord& from);
  void MergeFrom(const VectorRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VectorRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.VectorRowRecord records = 1;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  const ::pb::VectorRowRecord& records(int index) const;
  ::pb::VectorRowRecord* mutable_records(int index);
  ::pb::VectorRowRecord* add_records();
  ::google::protobuf::RepeatedPtrField< ::pb::VectorRowRecord >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::pb::VectorRowRecord >&
      records() const;

  // @@protoc_insertion_point(class_scope:pb.VectorRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::pb::VectorRowRecord > records_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static VectorRecord* default_instance_;
};
// -------------------------------------------------------------------

class VectorParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.VectorParam) */ {
 public:
  VectorParam();
  virtual ~VectorParam();

  VectorParam(const VectorParam& from);

  inline VectorParam& operator=(const VectorParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorParam& default_instance();

  void Swap(VectorParam* other);

  // implements Message ----------------------------------------------

  inline VectorParam* New() const { return New(NULL); }

  VectorParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorParam& from);
  void MergeFrom(const VectorParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VectorParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string json = 1;
  void clear_json();
  static const int kJsonFieldNumber = 1;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // optional .pb.VectorRecord row_record = 2;
  bool has_row_record() const;
  void clear_row_record();
  static const int kRowRecordFieldNumber = 2;
  const ::pb::VectorRecord& row_record() const;
  ::pb::VectorRecord* mutable_row_record();
  ::pb::VectorRecord* release_row_record();
  void set_allocated_row_record(::pb::VectorRecord* row_record);

  // @@protoc_insertion_point(class_scope:pb.VectorParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  ::pb::VectorRecord* row_record_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static VectorParam* default_instance_;
};
// -------------------------------------------------------------------

class FieldValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.FieldValue) */ {
 public:
  FieldValue();
  virtual ~FieldValue();

  FieldValue(const FieldValue& from);

  inline FieldValue& operator=(const FieldValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldValue& default_instance();

  void Swap(FieldValue* other);

  // implements Message ----------------------------------------------

  inline FieldValue* New() const { return New(NULL); }

  FieldValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldValue& from);
  void MergeFrom(const FieldValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field_name = 1;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 1;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // optional .pb.DataType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::pb::DataType type() const;
  void set_type(::pb::DataType value);

  // optional .pb.AttrRecord attr_record = 3;
  bool has_attr_record() const;
  void clear_attr_record();
  static const int kAttrRecordFieldNumber = 3;
  const ::pb::AttrRecord& attr_record() const;
  ::pb::AttrRecord* mutable_attr_record();
  ::pb::AttrRecord* release_attr_record();
  void set_allocated_attr_record(::pb::AttrRecord* attr_record);

  // optional .pb.VectorRecord vector_record = 4;
  bool has_vector_record() const;
  void clear_vector_record();
  static const int kVectorRecordFieldNumber = 4;
  const ::pb::VectorRecord& vector_record() const;
  ::pb::VectorRecord* mutable_vector_record();
  ::pb::VectorRecord* release_vector_record();
  void set_allocated_vector_record(::pb::VectorRecord* vector_record);

  // @@protoc_insertion_point(class_scope:pb.FieldValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  ::pb::AttrRecord* attr_record_;
  ::pb::VectorRecord* vector_record_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static FieldValue* default_instance_;
};
// -------------------------------------------------------------------

class PulsarMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PulsarMessage) */ {
 public:
  PulsarMessage();
  virtual ~PulsarMessage();

  PulsarMessage(const PulsarMessage& from);

  inline PulsarMessage& operator=(const PulsarMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PulsarMessage& default_instance();

  void Swap(PulsarMessage* other);

  // implements Message ----------------------------------------------

  inline PulsarMessage* New() const { return New(NULL); }

  PulsarMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PulsarMessage& from);
  void MergeFrom(const PulsarMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PulsarMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collection_name = 1;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 1;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // repeated .pb.FieldValue fields = 2;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 2;
  const ::pb::FieldValue& fields(int index) const;
  ::pb::FieldValue* mutable_fields(int index);
  ::pb::FieldValue* add_fields();
  ::google::protobuf::RepeatedPtrField< ::pb::FieldValue >*
      mutable_fields();
  const ::google::protobuf::RepeatedPtrField< ::pb::FieldValue >&
      fields() const;

  // optional int64 entity_id = 3;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 3;
  ::google::protobuf::int64 entity_id() const;
  void set_entity_id(::google::protobuf::int64 value);

  // optional string partition_tag = 4;
  void clear_partition_tag();
  static const int kPartitionTagFieldNumber = 4;
  const ::std::string& partition_tag() const;
  void set_partition_tag(const ::std::string& value);
  void set_partition_tag(const char* value);
  void set_partition_tag(const char* value, size_t size);
  ::std::string* mutable_partition_tag();
  ::std::string* release_partition_tag();
  void set_allocated_partition_tag(::std::string* partition_tag);

  // optional .pb.VectorParam vector_param = 5;
  bool has_vector_param() const;
  void clear_vector_param();
  static const int kVectorParamFieldNumber = 5;
  const ::pb::VectorParam& vector_param() const;
  ::pb::VectorParam* mutable_vector_param();
  ::pb::VectorParam* release_vector_param();
  void set_allocated_vector_param(::pb::VectorParam* vector_param);

  // optional .pb.SegmentRecord segments = 6;
  bool has_segments() const;
  void clear_segments();
  static const int kSegmentsFieldNumber = 6;
  const ::pb::SegmentRecord& segments() const;
  ::pb::SegmentRecord* mutable_segments();
  ::pb::SegmentRecord* release_segments();
  void set_allocated_segments(::pb::SegmentRecord* segments);

  // optional int64 timestamp = 7;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int64 client_id = 8;
  void clear_client_id();
  static const int kClientIdFieldNumber = 8;
  ::google::protobuf::int64 client_id() const;
  void set_client_id(::google::protobuf::int64 value);

  // optional .pb.OpType msg_type = 9;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 9;
  ::pb::OpType msg_type() const;
  void set_msg_type(::pb::OpType value);

  // optional string topic_name = 10;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 10;
  const ::std::string& topic_name() const;
  void set_topic_name(const ::std::string& value);
  void set_topic_name(const char* value);
  void set_topic_name(const char* value, size_t size);
  ::std::string* mutable_topic_name();
  ::std::string* release_topic_name();
  void set_allocated_topic_name(::std::string* topic_name);

  // optional int64 partition_id = 11;
  void clear_partition_id();
  static const int kPartitionIdFieldNumber = 11;
  ::google::protobuf::int64 partition_id() const;
  void set_partition_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.PulsarMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::google::protobuf::RepeatedPtrField< ::pb::FieldValue > fields_;
  ::google::protobuf::int64 entity_id_;
  ::google::protobuf::internal::ArenaStringPtr partition_tag_;
  ::pb::VectorParam* vector_param_;
  ::pb::SegmentRecord* segments_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 client_id_;
  ::google::protobuf::internal::ArenaStringPtr topic_name_;
  ::google::protobuf::int64 partition_id_;
  int msg_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static PulsarMessage* default_instance_;
};
// -------------------------------------------------------------------

class TestData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TestData) */ {
 public:
  TestData();
  virtual ~TestData();

  TestData(const TestData& from);

  inline TestData& operator=(const TestData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestData& default_instance();

  void Swap(TestData* other);

  // implements Message ----------------------------------------------

  inline TestData* New() const { return New(NULL); }

  TestData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestData& from);
  void MergeFrom(const TestData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.TestData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static TestData* default_instance_;
};
// -------------------------------------------------------------------

class InsertMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.InsertMsg) */ {
 public:
  InsertMsg();
  virtual ~InsertMsg();

  InsertMsg(const InsertMsg& from);

  inline InsertMsg& operator=(const InsertMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertMsg& default_instance();

  void Swap(InsertMsg* other);

  // implements Message ----------------------------------------------

  inline InsertMsg* New() const { return New(NULL); }

  InsertMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InsertMsg& from);
  void MergeFrom(const InsertMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InsertMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  ::google::protobuf::int64 client_id() const;
  void set_client_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.InsertMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 client_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static InsertMsg* default_instance_;
};
// -------------------------------------------------------------------

class DeleteMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DeleteMsg) */ {
 public:
  DeleteMsg();
  virtual ~DeleteMsg();

  DeleteMsg(const DeleteMsg& from);

  inline DeleteMsg& operator=(const DeleteMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteMsg& default_instance();

  void Swap(DeleteMsg* other);

  // implements Message ----------------------------------------------

  inline DeleteMsg* New() const { return New(NULL); }

  DeleteMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteMsg& from);
  void MergeFrom(const DeleteMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  ::google::protobuf::int64 client_id() const;
  void set_client_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.DeleteMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 client_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static DeleteMsg* default_instance_;
};
// -------------------------------------------------------------------

class SearchMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SearchMsg) */ {
 public:
  SearchMsg();
  virtual ~SearchMsg();

  SearchMsg(const SearchMsg& from);

  inline SearchMsg& operator=(const SearchMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchMsg& default_instance();

  void Swap(SearchMsg* other);

  // implements Message ----------------------------------------------

  inline SearchMsg* New() const { return New(NULL); }

  SearchMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchMsg& from);
  void MergeFrom(const SearchMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  ::google::protobuf::int64 client_id() const;
  void set_client_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.SearchMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 client_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static SearchMsg* default_instance_;
};
// -------------------------------------------------------------------

class SearchResultMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SearchResultMsg) */ {
 public:
  SearchResultMsg();
  virtual ~SearchResultMsg();

  SearchResultMsg(const SearchResultMsg& from);

  inline SearchResultMsg& operator=(const SearchResultMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResultMsg& default_instance();

  void Swap(SearchResultMsg* other);

  // implements Message ----------------------------------------------

  inline SearchResultMsg* New() const { return New(NULL); }

  SearchResultMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchResultMsg& from);
  void MergeFrom(const SearchResultMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchResultMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  ::google::protobuf::int64 client_id() const;
  void set_client_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.SearchResultMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 client_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pulsar_2eproto();
  friend void protobuf_AssignDesc_pulsar_2eproto();
  friend void protobuf_ShutdownFile_pulsar_2eproto();

  void InitAsDefaultInstance();
  static SearchResultMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional .pb.ErrorCode error_code = 1;
inline void Status::clear_error_code() {
  error_code_ = 0;
}
inline ::pb::ErrorCode Status::error_code() const {
  // @@protoc_insertion_point(field_get:pb.Status.error_code)
  return static_cast< ::pb::ErrorCode >(error_code_);
}
inline void Status::set_error_code(::pb::ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:pb.Status.error_code)
}

// optional string reason = 2;
inline void Status::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::reason() const {
  // @@protoc_insertion_point(field_get:pb.Status.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Status.reason)
}
inline void Status::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Status.reason)
}
inline void Status::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Status.reason)
}
inline ::std::string* Status::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:pb.Status.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_reason() {
  // @@protoc_insertion_point(field_release:pb.Status.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:pb.Status.reason)
}

// -------------------------------------------------------------------

// SegmentRecord

// repeated string seg_info = 1;
inline int SegmentRecord::seg_info_size() const {
  return seg_info_.size();
}
inline void SegmentRecord::clear_seg_info() {
  seg_info_.Clear();
}
inline const ::std::string& SegmentRecord::seg_info(int index) const {
  // @@protoc_insertion_point(field_get:pb.SegmentRecord.seg_info)
  return seg_info_.Get(index);
}
inline ::std::string* SegmentRecord::mutable_seg_info(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SegmentRecord.seg_info)
  return seg_info_.Mutable(index);
}
inline void SegmentRecord::set_seg_info(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.SegmentRecord.seg_info)
  seg_info_.Mutable(index)->assign(value);
}
inline void SegmentRecord::set_seg_info(int index, const char* value) {
  seg_info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SegmentRecord.seg_info)
}
inline void SegmentRecord::set_seg_info(int index, const char* value, size_t size) {
  seg_info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SegmentRecord.seg_info)
}
inline ::std::string* SegmentRecord::add_seg_info() {
  // @@protoc_insertion_point(field_add_mutable:pb.SegmentRecord.seg_info)
  return seg_info_.Add();
}
inline void SegmentRecord::add_seg_info(const ::std::string& value) {
  seg_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.SegmentRecord.seg_info)
}
inline void SegmentRecord::add_seg_info(const char* value) {
  seg_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.SegmentRecord.seg_info)
}
inline void SegmentRecord::add_seg_info(const char* value, size_t size) {
  seg_info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.SegmentRecord.seg_info)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SegmentRecord::seg_info() const {
  // @@protoc_insertion_point(field_list:pb.SegmentRecord.seg_info)
  return seg_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SegmentRecord::mutable_seg_info() {
  // @@protoc_insertion_point(field_mutable_list:pb.SegmentRecord.seg_info)
  return &seg_info_;
}

// -------------------------------------------------------------------

// VectorRowRecord

// repeated float float_data = 1;
inline int VectorRowRecord::float_data_size() const {
  return float_data_.size();
}
inline void VectorRowRecord::clear_float_data() {
  float_data_.Clear();
}
inline float VectorRowRecord::float_data(int index) const {
  // @@protoc_insertion_point(field_get:pb.VectorRowRecord.float_data)
  return float_data_.Get(index);
}
inline void VectorRowRecord::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.VectorRowRecord.float_data)
}
inline void VectorRowRecord::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:pb.VectorRowRecord.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
VectorRowRecord::float_data() const {
  // @@protoc_insertion_point(field_list:pb.VectorRowRecord.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
VectorRowRecord::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.VectorRowRecord.float_data)
  return &float_data_;
}

// optional bytes binary_data = 2;
inline void VectorRowRecord::clear_binary_data() {
  binary_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VectorRowRecord::binary_data() const {
  // @@protoc_insertion_point(field_get:pb.VectorRowRecord.binary_data)
  return binary_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorRowRecord::set_binary_data(const ::std::string& value) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.VectorRowRecord.binary_data)
}
inline void VectorRowRecord::set_binary_data(const char* value) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.VectorRowRecord.binary_data)
}
inline void VectorRowRecord::set_binary_data(const void* value, size_t size) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.VectorRowRecord.binary_data)
}
inline ::std::string* VectorRowRecord::mutable_binary_data() {
  
  // @@protoc_insertion_point(field_mutable:pb.VectorRowRecord.binary_data)
  return binary_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VectorRowRecord::release_binary_data() {
  // @@protoc_insertion_point(field_release:pb.VectorRowRecord.binary_data)
  
  return binary_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorRowRecord::set_allocated_binary_data(::std::string* binary_data) {
  if (binary_data != NULL) {
    
  } else {
    
  }
  binary_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_data);
  // @@protoc_insertion_point(field_set_allocated:pb.VectorRowRecord.binary_data)
}

// -------------------------------------------------------------------

// AttrRecord

// repeated int32 int32_value = 1;
inline int AttrRecord::int32_value_size() const {
  return int32_value_.size();
}
inline void AttrRecord::clear_int32_value() {
  int32_value_.Clear();
}
inline ::google::protobuf::int32 AttrRecord::int32_value(int index) const {
  // @@protoc_insertion_point(field_get:pb.AttrRecord.int32_value)
  return int32_value_.Get(index);
}
inline void AttrRecord::set_int32_value(int index, ::google::protobuf::int32 value) {
  int32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.AttrRecord.int32_value)
}
inline void AttrRecord::add_int32_value(::google::protobuf::int32 value) {
  int32_value_.Add(value);
  // @@protoc_insertion_point(field_add:pb.AttrRecord.int32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AttrRecord::int32_value() const {
  // @@protoc_insertion_point(field_list:pb.AttrRecord.int32_value)
  return int32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AttrRecord::mutable_int32_value() {
  // @@protoc_insertion_point(field_mutable_list:pb.AttrRecord.int32_value)
  return &int32_value_;
}

// repeated int64 int64_value = 2;
inline int AttrRecord::int64_value_size() const {
  return int64_value_.size();
}
inline void AttrRecord::clear_int64_value() {
  int64_value_.Clear();
}
inline ::google::protobuf::int64 AttrRecord::int64_value(int index) const {
  // @@protoc_insertion_point(field_get:pb.AttrRecord.int64_value)
  return int64_value_.Get(index);
}
inline void AttrRecord::set_int64_value(int index, ::google::protobuf::int64 value) {
  int64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.AttrRecord.int64_value)
}
inline void AttrRecord::add_int64_value(::google::protobuf::int64 value) {
  int64_value_.Add(value);
  // @@protoc_insertion_point(field_add:pb.AttrRecord.int64_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AttrRecord::int64_value() const {
  // @@protoc_insertion_point(field_list:pb.AttrRecord.int64_value)
  return int64_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AttrRecord::mutable_int64_value() {
  // @@protoc_insertion_point(field_mutable_list:pb.AttrRecord.int64_value)
  return &int64_value_;
}

// repeated float float_value = 3;
inline int AttrRecord::float_value_size() const {
  return float_value_.size();
}
inline void AttrRecord::clear_float_value() {
  float_value_.Clear();
}
inline float AttrRecord::float_value(int index) const {
  // @@protoc_insertion_point(field_get:pb.AttrRecord.float_value)
  return float_value_.Get(index);
}
inline void AttrRecord::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.AttrRecord.float_value)
}
inline void AttrRecord::add_float_value(float value) {
  float_value_.Add(value);
  // @@protoc_insertion_point(field_add:pb.AttrRecord.float_value)
}
inline const ::google::protobuf::RepeatedField< float >&
AttrRecord::float_value() const {
  // @@protoc_insertion_point(field_list:pb.AttrRecord.float_value)
  return float_value_;
}
inline ::google::protobuf::RepeatedField< float >*
AttrRecord::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:pb.AttrRecord.float_value)
  return &float_value_;
}

// repeated double double_value = 4;
inline int AttrRecord::double_value_size() const {
  return double_value_.size();
}
inline void AttrRecord::clear_double_value() {
  double_value_.Clear();
}
inline double AttrRecord::double_value(int index) const {
  // @@protoc_insertion_point(field_get:pb.AttrRecord.double_value)
  return double_value_.Get(index);
}
inline void AttrRecord::set_double_value(int index, double value) {
  double_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.AttrRecord.double_value)
}
inline void AttrRecord::add_double_value(double value) {
  double_value_.Add(value);
  // @@protoc_insertion_point(field_add:pb.AttrRecord.double_value)
}
inline const ::google::protobuf::RepeatedField< double >&
AttrRecord::double_value() const {
  // @@protoc_insertion_point(field_list:pb.AttrRecord.double_value)
  return double_value_;
}
inline ::google::protobuf::RepeatedField< double >*
AttrRecord::mutable_double_value() {
  // @@protoc_insertion_point(field_mutable_list:pb.AttrRecord.double_value)
  return &double_value_;
}

// -------------------------------------------------------------------

// VectorRecord

// repeated .pb.VectorRowRecord records = 1;
inline int VectorRecord::records_size() const {
  return records_.size();
}
inline void VectorRecord::clear_records() {
  records_.Clear();
}
inline const ::pb::VectorRowRecord& VectorRecord::records(int index) const {
  // @@protoc_insertion_point(field_get:pb.VectorRecord.records)
  return records_.Get(index);
}
inline ::pb::VectorRowRecord* VectorRecord::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:pb.VectorRecord.records)
  return records_.Mutable(index);
}
inline ::pb::VectorRowRecord* VectorRecord::add_records() {
  // @@protoc_insertion_point(field_add:pb.VectorRecord.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::VectorRowRecord >*
VectorRecord::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:pb.VectorRecord.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::VectorRowRecord >&
VectorRecord::records() const {
  // @@protoc_insertion_point(field_list:pb.VectorRecord.records)
  return records_;
}

// -------------------------------------------------------------------

// VectorParam

// optional string json = 1;
inline void VectorParam::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VectorParam::json() const {
  // @@protoc_insertion_point(field_get:pb.VectorParam.json)
  return json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorParam::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.VectorParam.json)
}
inline void VectorParam::set_json(const char* value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.VectorParam.json)
}
inline void VectorParam::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.VectorParam.json)
}
inline ::std::string* VectorParam::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:pb.VectorParam.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VectorParam::release_json() {
  // @@protoc_insertion_point(field_release:pb.VectorParam.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorParam::set_allocated_json(::std::string* json) {
  if (json != NULL) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:pb.VectorParam.json)
}

// optional .pb.VectorRecord row_record = 2;
inline bool VectorParam::has_row_record() const {
  return !_is_default_instance_ && row_record_ != NULL;
}
inline void VectorParam::clear_row_record() {
  if (GetArenaNoVirtual() == NULL && row_record_ != NULL) delete row_record_;
  row_record_ = NULL;
}
inline const ::pb::VectorRecord& VectorParam::row_record() const {
  // @@protoc_insertion_point(field_get:pb.VectorParam.row_record)
  return row_record_ != NULL ? *row_record_ : *default_instance_->row_record_;
}
inline ::pb::VectorRecord* VectorParam::mutable_row_record() {
  
  if (row_record_ == NULL) {
    row_record_ = new ::pb::VectorRecord;
  }
  // @@protoc_insertion_point(field_mutable:pb.VectorParam.row_record)
  return row_record_;
}
inline ::pb::VectorRecord* VectorParam::release_row_record() {
  // @@protoc_insertion_point(field_release:pb.VectorParam.row_record)
  
  ::pb::VectorRecord* temp = row_record_;
  row_record_ = NULL;
  return temp;
}
inline void VectorParam::set_allocated_row_record(::pb::VectorRecord* row_record) {
  delete row_record_;
  row_record_ = row_record;
  if (row_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.VectorParam.row_record)
}

// -------------------------------------------------------------------

// FieldValue

// optional string field_name = 1;
inline void FieldValue::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FieldValue::field_name() const {
  // @@protoc_insertion_point(field_get:pb.FieldValue.field_name)
  return field_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldValue::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.FieldValue.field_name)
}
inline void FieldValue::set_field_name(const char* value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.FieldValue.field_name)
}
inline void FieldValue::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.FieldValue.field_name)
}
inline ::std::string* FieldValue::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.FieldValue.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldValue::release_field_name() {
  // @@protoc_insertion_point(field_release:pb.FieldValue.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldValue::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:pb.FieldValue.field_name)
}

// optional .pb.DataType type = 2;
inline void FieldValue::clear_type() {
  type_ = 0;
}
inline ::pb::DataType FieldValue::type() const {
  // @@protoc_insertion_point(field_get:pb.FieldValue.type)
  return static_cast< ::pb::DataType >(type_);
}
inline void FieldValue::set_type(::pb::DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.FieldValue.type)
}

// optional .pb.AttrRecord attr_record = 3;
inline bool FieldValue::has_attr_record() const {
  return !_is_default_instance_ && attr_record_ != NULL;
}
inline void FieldValue::clear_attr_record() {
  if (GetArenaNoVirtual() == NULL && attr_record_ != NULL) delete attr_record_;
  attr_record_ = NULL;
}
inline const ::pb::AttrRecord& FieldValue::attr_record() const {
  // @@protoc_insertion_point(field_get:pb.FieldValue.attr_record)
  return attr_record_ != NULL ? *attr_record_ : *default_instance_->attr_record_;
}
inline ::pb::AttrRecord* FieldValue::mutable_attr_record() {
  
  if (attr_record_ == NULL) {
    attr_record_ = new ::pb::AttrRecord;
  }
  // @@protoc_insertion_point(field_mutable:pb.FieldValue.attr_record)
  return attr_record_;
}
inline ::pb::AttrRecord* FieldValue::release_attr_record() {
  // @@protoc_insertion_point(field_release:pb.FieldValue.attr_record)
  
  ::pb::AttrRecord* temp = attr_record_;
  attr_record_ = NULL;
  return temp;
}
inline void FieldValue::set_allocated_attr_record(::pb::AttrRecord* attr_record) {
  delete attr_record_;
  attr_record_ = attr_record;
  if (attr_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FieldValue.attr_record)
}

// optional .pb.VectorRecord vector_record = 4;
inline bool FieldValue::has_vector_record() const {
  return !_is_default_instance_ && vector_record_ != NULL;
}
inline void FieldValue::clear_vector_record() {
  if (GetArenaNoVirtual() == NULL && vector_record_ != NULL) delete vector_record_;
  vector_record_ = NULL;
}
inline const ::pb::VectorRecord& FieldValue::vector_record() const {
  // @@protoc_insertion_point(field_get:pb.FieldValue.vector_record)
  return vector_record_ != NULL ? *vector_record_ : *default_instance_->vector_record_;
}
inline ::pb::VectorRecord* FieldValue::mutable_vector_record() {
  
  if (vector_record_ == NULL) {
    vector_record_ = new ::pb::VectorRecord;
  }
  // @@protoc_insertion_point(field_mutable:pb.FieldValue.vector_record)
  return vector_record_;
}
inline ::pb::VectorRecord* FieldValue::release_vector_record() {
  // @@protoc_insertion_point(field_release:pb.FieldValue.vector_record)
  
  ::pb::VectorRecord* temp = vector_record_;
  vector_record_ = NULL;
  return temp;
}
inline void FieldValue::set_allocated_vector_record(::pb::VectorRecord* vector_record) {
  delete vector_record_;
  vector_record_ = vector_record;
  if (vector_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FieldValue.vector_record)
}

// -------------------------------------------------------------------

// PulsarMessage

// optional string collection_name = 1;
inline void PulsarMessage::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PulsarMessage::collection_name() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.collection_name)
  return collection_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PulsarMessage::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.collection_name)
}
inline void PulsarMessage::set_collection_name(const char* value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PulsarMessage.collection_name)
}
inline void PulsarMessage::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PulsarMessage.collection_name)
}
inline ::std::string* PulsarMessage::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PulsarMessage::release_collection_name() {
  // @@protoc_insertion_point(field_release:pb.PulsarMessage.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PulsarMessage::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:pb.PulsarMessage.collection_name)
}

// repeated .pb.FieldValue fields = 2;
inline int PulsarMessage::fields_size() const {
  return fields_.size();
}
inline void PulsarMessage::clear_fields() {
  fields_.Clear();
}
inline const ::pb::FieldValue& PulsarMessage::fields(int index) const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.fields)
  return fields_.Get(index);
}
inline ::pb::FieldValue* PulsarMessage::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.fields)
  return fields_.Mutable(index);
}
inline ::pb::FieldValue* PulsarMessage::add_fields() {
  // @@protoc_insertion_point(field_add:pb.PulsarMessage.fields)
  return fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::FieldValue >*
PulsarMessage::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:pb.PulsarMessage.fields)
  return &fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::FieldValue >&
PulsarMessage::fields() const {
  // @@protoc_insertion_point(field_list:pb.PulsarMessage.fields)
  return fields_;
}

// optional int64 entity_id = 3;
inline void PulsarMessage::clear_entity_id() {
  entity_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PulsarMessage::entity_id() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.entity_id)
  return entity_id_;
}
inline void PulsarMessage::set_entity_id(::google::protobuf::int64 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.entity_id)
}

// optional string partition_tag = 4;
inline void PulsarMessage::clear_partition_tag() {
  partition_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PulsarMessage::partition_tag() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.partition_tag)
  return partition_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PulsarMessage::set_partition_tag(const ::std::string& value) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.partition_tag)
}
inline void PulsarMessage::set_partition_tag(const char* value) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PulsarMessage.partition_tag)
}
inline void PulsarMessage::set_partition_tag(const char* value, size_t size) {
  
  partition_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PulsarMessage.partition_tag)
}
inline ::std::string* PulsarMessage::mutable_partition_tag() {
  
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.partition_tag)
  return partition_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PulsarMessage::release_partition_tag() {
  // @@protoc_insertion_point(field_release:pb.PulsarMessage.partition_tag)
  
  return partition_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PulsarMessage::set_allocated_partition_tag(::std::string* partition_tag) {
  if (partition_tag != NULL) {
    
  } else {
    
  }
  partition_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partition_tag);
  // @@protoc_insertion_point(field_set_allocated:pb.PulsarMessage.partition_tag)
}

// optional .pb.VectorParam vector_param = 5;
inline bool PulsarMessage::has_vector_param() const {
  return !_is_default_instance_ && vector_param_ != NULL;
}
inline void PulsarMessage::clear_vector_param() {
  if (GetArenaNoVirtual() == NULL && vector_param_ != NULL) delete vector_param_;
  vector_param_ = NULL;
}
inline const ::pb::VectorParam& PulsarMessage::vector_param() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.vector_param)
  return vector_param_ != NULL ? *vector_param_ : *default_instance_->vector_param_;
}
inline ::pb::VectorParam* PulsarMessage::mutable_vector_param() {
  
  if (vector_param_ == NULL) {
    vector_param_ = new ::pb::VectorParam;
  }
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.vector_param)
  return vector_param_;
}
inline ::pb::VectorParam* PulsarMessage::release_vector_param() {
  // @@protoc_insertion_point(field_release:pb.PulsarMessage.vector_param)
  
  ::pb::VectorParam* temp = vector_param_;
  vector_param_ = NULL;
  return temp;
}
inline void PulsarMessage::set_allocated_vector_param(::pb::VectorParam* vector_param) {
  delete vector_param_;
  vector_param_ = vector_param;
  if (vector_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PulsarMessage.vector_param)
}

// optional .pb.SegmentRecord segments = 6;
inline bool PulsarMessage::has_segments() const {
  return !_is_default_instance_ && segments_ != NULL;
}
inline void PulsarMessage::clear_segments() {
  if (GetArenaNoVirtual() == NULL && segments_ != NULL) delete segments_;
  segments_ = NULL;
}
inline const ::pb::SegmentRecord& PulsarMessage::segments() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.segments)
  return segments_ != NULL ? *segments_ : *default_instance_->segments_;
}
inline ::pb::SegmentRecord* PulsarMessage::mutable_segments() {
  
  if (segments_ == NULL) {
    segments_ = new ::pb::SegmentRecord;
  }
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.segments)
  return segments_;
}
inline ::pb::SegmentRecord* PulsarMessage::release_segments() {
  // @@protoc_insertion_point(field_release:pb.PulsarMessage.segments)
  
  ::pb::SegmentRecord* temp = segments_;
  segments_ = NULL;
  return temp;
}
inline void PulsarMessage::set_allocated_segments(::pb::SegmentRecord* segments) {
  delete segments_;
  segments_ = segments;
  if (segments) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PulsarMessage.segments)
}

// optional int64 timestamp = 7;
inline void PulsarMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PulsarMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.timestamp)
  return timestamp_;
}
inline void PulsarMessage::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.timestamp)
}

// optional int64 client_id = 8;
inline void PulsarMessage::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PulsarMessage::client_id() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.client_id)
  return client_id_;
}
inline void PulsarMessage::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.client_id)
}

// optional .pb.OpType msg_type = 9;
inline void PulsarMessage::clear_msg_type() {
  msg_type_ = 0;
}
inline ::pb::OpType PulsarMessage::msg_type() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.msg_type)
  return static_cast< ::pb::OpType >(msg_type_);
}
inline void PulsarMessage::set_msg_type(::pb::OpType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.msg_type)
}

// optional string topic_name = 10;
inline void PulsarMessage::clear_topic_name() {
  topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PulsarMessage::topic_name() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.topic_name)
  return topic_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PulsarMessage::set_topic_name(const ::std::string& value) {
  
  topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.topic_name)
}
inline void PulsarMessage::set_topic_name(const char* value) {
  
  topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PulsarMessage.topic_name)
}
inline void PulsarMessage::set_topic_name(const char* value, size_t size) {
  
  topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PulsarMessage.topic_name)
}
inline ::std::string* PulsarMessage::mutable_topic_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.PulsarMessage.topic_name)
  return topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PulsarMessage::release_topic_name() {
  // @@protoc_insertion_point(field_release:pb.PulsarMessage.topic_name)
  
  return topic_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PulsarMessage::set_allocated_topic_name(::std::string* topic_name) {
  if (topic_name != NULL) {
    
  } else {
    
  }
  topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_name);
  // @@protoc_insertion_point(field_set_allocated:pb.PulsarMessage.topic_name)
}

// optional int64 partition_id = 11;
inline void PulsarMessage::clear_partition_id() {
  partition_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PulsarMessage::partition_id() const {
  // @@protoc_insertion_point(field_get:pb.PulsarMessage.partition_id)
  return partition_id_;
}
inline void PulsarMessage::set_partition_id(::google::protobuf::int64 value) {
  
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:pb.PulsarMessage.partition_id)
}

// -------------------------------------------------------------------

// TestData

// optional string id = 1;
inline void TestData::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestData::id() const {
  // @@protoc_insertion_point(field_get:pb.TestData.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestData::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TestData.id)
}
inline void TestData::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TestData.id)
}
inline void TestData::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TestData.id)
}
inline ::std::string* TestData::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.TestData.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestData::release_id() {
  // @@protoc_insertion_point(field_release:pb.TestData.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestData::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.TestData.id)
}

// optional string name = 2;
inline void TestData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestData::name() const {
  // @@protoc_insertion_point(field_get:pb.TestData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TestData.name)
}
inline void TestData::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TestData.name)
}
inline void TestData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TestData.name)
}
inline ::std::string* TestData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.TestData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestData::release_name() {
  // @@protoc_insertion_point(field_release:pb.TestData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.TestData.name)
}

// -------------------------------------------------------------------

// InsertMsg

// optional int64 client_id = 1;
inline void InsertMsg::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InsertMsg::client_id() const {
  // @@protoc_insertion_point(field_get:pb.InsertMsg.client_id)
  return client_id_;
}
inline void InsertMsg::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:pb.InsertMsg.client_id)
}

// -------------------------------------------------------------------

// DeleteMsg

// optional int64 client_id = 1;
inline void DeleteMsg::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeleteMsg::client_id() const {
  // @@protoc_insertion_point(field_get:pb.DeleteMsg.client_id)
  return client_id_;
}
inline void DeleteMsg::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:pb.DeleteMsg.client_id)
}

// -------------------------------------------------------------------

// SearchMsg

// optional int64 client_id = 1;
inline void SearchMsg::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SearchMsg::client_id() const {
  // @@protoc_insertion_point(field_get:pb.SearchMsg.client_id)
  return client_id_;
}
inline void SearchMsg::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:pb.SearchMsg.client_id)
}

// -------------------------------------------------------------------

// SearchResultMsg

// optional int64 client_id = 1;
inline void SearchResultMsg::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SearchResultMsg::client_id() const {
  // @@protoc_insertion_point(field_get:pb.SearchResultMsg.client_id)
  return client_id_;
}
inline void SearchResultMsg::set_client_id(::google::protobuf::int64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:pb.SearchResultMsg.client_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ErrorCode>() {
  return ::pb::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::pb::DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::DataType>() {
  return ::pb::DataType_descriptor();
}
template <> struct is_proto_enum< ::pb::OpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::OpType>() {
  return ::pb::OpType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pulsar_2eproto__INCLUDED
